"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
–í—ã–¥–µ–ª–µ–Ω—ã –∏–∑ utils.py –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
"""

import datetime
import os
import re
import subprocess
import sys
from pathlib import Path
from tkinter import messagebox

def get_current_year():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –≥–æ–¥
    
    Returns:
        int: –¢–µ–∫—É—â–∏–π –≥–æ–¥
    """
    return datetime.datetime.now().year

def validate_domain(domain):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–æ–º–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
    
    Args:
        domain (str): –î–æ–º–µ–Ω–Ω–æ–µ –∏–º—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        tuple: (bool, str, str) - (–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –¥–æ–º–µ–Ω)
    """
    if not domain:
        return False, "–î–æ–º–µ–Ω–Ω–æ–µ –∏–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", domain
    
    if len(domain) < 3:
        return False, "–î–æ–º–µ–Ω–Ω–æ–µ –∏–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)", domain
    
    if len(domain) > 253:
        return False, "–î–æ–º–µ–Ω–Ω–æ–µ –∏–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 253 —Å–∏–º–≤–æ–ª–∞)", domain
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–º–µ–Ω–∞ –ø–æ—Ö–æ–∂–∏—Ö –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ
    cyrillic_to_latin = {
        '–∞': 'a', '–ê': 'A',
        '–µ': 'e', '–ï': 'E', 
        '–æ': 'o', '–û': 'O',
        '—Ä': 'p', '–†': 'P',
        '—Å': 'c', '–°': 'C',
        '—É': 'u', '–£': 'U',
        '—Ö': 'x', '–•': 'X',
        '–º': 'm', '–ú': 'M',
        '–Ω': 'n', '–ù': 'N',
        '–∫': 'k', '–ö': 'K',
        '—Ç': 't', '–¢': 'T'
    }
    
    # –ó–∞–º–µ–Ω—è–µ–º –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ
    corrected_domain = domain
    for cyrillic, latin in cyrillic_to_latin.items():
        corrected_domain = corrected_domain.replace(cyrillic, latin)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–æ–º–µ–Ω–∞
    domain_pattern = r'^[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?)*\.[a-zA-Z]{2,}$'
    
    if not re.match(domain_pattern, corrected_domain):
        return False, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–º–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏", corrected_domain
    
    return True, "", corrected_domain

def check_directory_exists(path, domain):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
    
    Args:
        path (str): –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        domain (str): –î–æ–º–µ–Ω–Ω–æ–µ –∏–º—è
        
    Returns:
        tuple: (bool, Path) - (—Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏, –ø–æ–ª–Ω—ã–π –ø—É—Ç—å)
    """
    project_path = Path(path) / domain
    return project_path.exists(), project_path

def format_status_message(text, status_type="info"):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
    
    Args:
        text (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        status_type (str): –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (info, success, warning, error)
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    icons = {
        "info": "‚ÑπÔ∏è",
        "success": "‚úÖ", 
        "warning": "‚ö†Ô∏è",
        "error": "‚ùå",
        "progress": "üîÑ"
    }
    
    icon = icons.get(status_type, "‚ÑπÔ∏è")
    return f"{icon} {text}"

def get_language_by_country(country):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —è–∑—ã–∫ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã
    
    Args:
        country (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
        
    Returns:
        str: –ö–æ–¥ —è–∑—ã–∫–∞
    """
    language_map = {
        "–†–æ—Å—Å–∏—è": "ru",
        "–£–∫—Ä–∞–∏–Ω–∞": "uk", 
        "–ë–µ–ª–∞—Ä—É—Å—å": "be",
        "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω": "kk",
        "–°–®–ê": "en",
        "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è": "en",
        "–ì–µ—Ä–º–∞–Ω–∏—è": "de",
        "–§—Ä–∞–Ω—Ü–∏—è": "fr",
        "–ò—Ç–∞–ª–∏—è": "it", 
        "–ò—Å–ø–∞–Ω–∏—è": "es",
        "–ü–æ–ª—å—à–∞": "pl",
        "–ü–µ—Ä—É": "es",
        "–ß–µ—Ö–∏—è": "cs",
        "–ß–∏–ª–∏": "es",
        "–¢—É—Ä—Ü–∏—è": "tr",
        "–ö–∏—Ç–∞–π": "zh",
        "–Ø–ø–æ–Ω–∏—è": "ja",
        "–ö–æ—Ä–µ—è": "ko",
        "–ò–Ω–¥–∏—è": "hi",
        "–ë—Ä–∞–∑–∏–ª–∏—è": "pt",
        "–ú–µ–∫—Å–∏–∫–∞": "es",
        "–ö–∞–Ω–∞–¥–∞": "en"
    }
    
    return language_map.get(country, "en")

def get_html_lang_code(country):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML lang –∫–æ–¥ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã"""
    return get_language_by_country(country)

def get_language_display_name(country):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    
    Args:
        country (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
        
    Returns:
        str: –ß–µ–ª–æ–≤–µ–∫–æ-–ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞
    """
    language_display_map = {
        "–†–æ—Å—Å–∏—è": "—Ä—É—Å—Å–∫–∏–π (–†–æ—Å—Å–∏—è)",
        "–£–∫—Ä–∞–∏–Ω–∞": "—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π (–£–∫—Ä–∞–∏–Ω–∞)", 
        "–ë–µ–ª–∞—Ä—É—Å—å": "–±–µ–ª–æ—Ä—É—Å—Å–∫–∏–π (–ë–µ–ª–∞—Ä—É—Å—å)",
        "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω": "–∫–∞–∑–∞—Ö—Å–∫–∏–π (–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω)",
        "–°–®–ê": "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π (–°–®–ê)",
        "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è": "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π (–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è)",
        "–ì–µ—Ä–º–∞–Ω–∏—è": "–Ω–µ–º–µ—Ü–∫–∏–π (–ì–µ—Ä–º–∞–Ω–∏—è)",
        "–§—Ä–∞–Ω—Ü–∏—è": "—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π (–§—Ä–∞–Ω—Ü–∏—è)",
        "–ò—Ç–∞–ª–∏—è": "–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π (–ò—Ç–∞–ª–∏—è)", 
        "–ò—Å–ø–∞–Ω–∏—è": "–∏—Å–ø–∞–Ω—Å–∫–∏–π (–ò—Å–ø–∞–Ω–∏—è)",
        "–ü–æ–ª—å—à–∞": "–ø–æ–ª—å—Å–∫–∏–π (–ü–æ–ª—å—à–∞)",
        "–ü–µ—Ä—É": "–∏—Å–ø–∞–Ω—Å–∫–∏–π (–ü–µ—Ä—É)",
        "–ß–µ—Ö–∏—è": "—á–µ—à—Å–∫–∏–π (–ß–µ—Ö–∏—è)",
        "–ß–∏–ª–∏": "–∏—Å–ø–∞–Ω—Å–∫–∏–π (–ß–∏–ª–∏)",
        "–¢—É—Ä—Ü–∏—è": "—Ç—É—Ä–µ—Ü–∫–∏–π (–¢—É—Ä—Ü–∏—è)",
        "–ö–∏—Ç–∞–π": "–∫–∏—Ç–∞–π—Å–∫–∏–π (–ö–∏—Ç–∞–π)",
        "–Ø–ø–æ–Ω–∏—è": "—è–ø–æ–Ω—Å–∫–∏–π (–Ø–ø–æ–Ω–∏—è)",
        "–ö–æ—Ä–µ—è": "–∫–æ—Ä–µ–π—Å–∫–∏–π (–ö–æ—Ä–µ—è)",
        "–ò–Ω–¥–∏—è": "—Ö–∏–Ω–¥–∏ (–ò–Ω–¥–∏—è)",
        "–ë—Ä–∞–∑–∏–ª–∏—è": "–ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π (–ë—Ä–∞–∑–∏–ª–∏—è)",
        "–ú–µ–∫—Å–∏–∫–∞": "–∏—Å–ø–∞–Ω—Å–∫–∏–π (–ú–µ–∫—Å–∏–∫–∞)",
        "–ö–∞–Ω–∞–¥–∞": "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π (–ö–∞–Ω–∞–¥–∞)"
    }
    
    return language_display_map.get(country, f"–∞–Ω–≥–ª–∏–π—Å–∫–∏–π ({country})")

def sanitize_filename(filename):
    """
    –û—á–∏—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    
    Args:
        filename (str): –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        
    Returns:
        str: –û—á–∏—â–µ–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    """
    # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    invalid_chars = '<>:"/\\|?*'
    for char in invalid_chars:
        filename = filename.replace(char, '')
    
    # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    filename = filename.replace(' ', '_')
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    if len(filename) > 200:
        filename = filename[:200]
    
    return filename

def create_project_info(country, city, language, domain, theme):
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
    
    Args:
        country (str): –°—Ç—Ä–∞–Ω–∞
        city (str): –ì–æ—Ä–æ–¥
        language (str): –Ø–∑—ã–∫
        domain (str): –î–æ–º–µ–Ω
        theme (str): –¢–µ–º–∞—Ç–∏–∫–∞
        
    Returns:
        dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
    """
    return {
        'country': country,
        'city': city,
        'language': language,
        'domain': domain,
        'theme': theme,
        'created_at': datetime.datetime.now().isoformat(),
        'year': get_current_year()
    }

def open_text_editor(text, title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞"):
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    
    Args:
        text (str): –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        title (str): –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
        
    Returns:
        str: –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ None –µ—Å–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ
    """
    try:
        import tkinter as tk
        from tkinter import scrolledtext
        
        root = tk.Tk()
        root.title(title)
        root.geometry("600x400")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        text_area = scrolledtext.ScrolledText(root, wrap=tk.WORD, width=70, height=20)
        text_area.pack(expand=True, fill='both', padx=10, pady=10)
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        text_area.insert(tk.END, text)
        
        result = {'text': None}
        
        def save_and_close():
            result['text'] = text_area.get('1.0', tk.END).strip()
            root.destroy()
        
        def cancel():
            root.destroy()
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = tk.Frame(root)
        button_frame.pack(pady=5)
        
        tk.Button(button_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_and_close).pack(side=tk.LEFT, padx=5)
        tk.Button(button_frame, text="–û—Ç–º–µ–Ω–∞", command=cancel).pack(side=tk.LEFT, padx=5)
        
        root.mainloop()
        
        return result['text']
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞: {e}")
        return text 