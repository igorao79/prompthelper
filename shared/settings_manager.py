"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
–í—ã–¥–µ–ª–µ–Ω –∏–∑ utils.py –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
"""

import json
import os
from pathlib import Path

def get_desktop_path():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ä–∞–±–æ—á–µ–º—É —Å—Ç–æ–ª—É –≤ Windows
    
    Returns:
        Path: –ü—É—Ç—å –∫ —Ä–∞–±–æ—á–µ–º—É —Å—Ç–æ–ª—É
    """
    try:
        # –î–ª—è Windows –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é USERPROFILE
        if os.name == 'nt':  # Windows
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ä–∞–±–æ—á–µ–º—É —Å—Ç–æ–ª—É —á–µ—Ä–µ–∑ —Ä–µ–µ—Å—Ç—Ä
            try:
                import winreg
                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, 
                                  r"Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders") as key:
                    desktop_path = winreg.QueryValueEx(key, "Desktop")[0]
                    return Path(desktop_path)
            except:
                pass
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã
            desktop_paths = [
                Path(os.path.expanduser("~/Desktop")),
                Path(os.path.expanduser("~/–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª")),
                Path(os.path.join(os.path.expanduser("~"), "Desktop")),
                Path(os.path.join(os.path.expanduser("~"), "–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª")),
                Path(os.environ.get('USERPROFILE', '')) / "Desktop",
                Path(os.environ.get('USERPROFILE', '')) / "–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª"
            ]
            
            for path in desktop_paths:
                if path.exists():
                    return path
        
        # –î–ª—è –¥—Ä—É–≥–∏—Ö –û–°
        return Path.home() / "Desktop"
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞: {e}")
        return Path.home() / "Desktop"

class SettingsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    
    def __init__(self):
        # –§–∞–π–ª-–ª–æ–∫–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑—ã–≤–∞–µ—Ç –≥–¥–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.locator_file = Path.home() / ".landing_generator_settings_locator.json"
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞—Å—Ç—Ä–æ–µ–∫: –∏–∑ –ª–æ–∫–∞—Ç–æ—Ä–∞ –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.settings_file = self._resolve_settings_file_path()
        self.settings = self.load_settings()
    
    def _resolve_settings_file_path(self) -> Path:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞—Å—Ç—Ä–æ–µ–∫, —á–∏—Ç–∞—è –ª–æ–∫–∞—Ç–æ—Ä, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
        try:
            if self.locator_file.exists():
                with open(self.locator_file, 'r', encoding='utf-8') as f:
                    import json as _json
                    data = _json.load(f) or {}
                    p = data.get("settings_path")
                    if p:
                        sp = Path(p)
                        # –ï—Å–ª–∏ –ø—É—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–∏–ª–∏ —Ö–æ—Ç—è –±—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º
                        if sp.exists() or sp.parent.exists():
                            return sp
        except Exception as _e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–∫–∞—Ç–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫: {_e}")
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –≤ –¥–æ–º–∞—à–Ω–µ–π –ø–∞–ø–∫–µ
        return Path.home() / "landing_generator_settings.json"

    def _save_locator(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª-–ª–æ–∫–∞—Ç–æ—Ä —Å —Ç–µ–∫—É—â–∏–º –ø—É—Ç—ë–º –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º."""
        try:
            with open(self.locator_file, 'w', encoding='utf-8') as f:
                import json as _json
                _json.dump({"settings_path": str(self.settings_file)}, f, ensure_ascii=False, indent=2)
        except Exception as _e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–∫–∞—Ç–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫: {_e}")

    def load_settings(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        default_settings = {
            "favorite_countries": [],
            "theme_history": [],
            "default_save_path": str(get_desktop_path()),
            "last_save_path": str(get_desktop_path()),
            "custom_prompt": "",
            "last_selected_country": "",
            "landing_history": [],  # [{"domain": str, "prompt": str, "ts": int}]
            "auto_check_updates": True,
            "last_update_sha": "",
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Ideogram
            "ideogram_model": "3.0 Turbo",
            "ideogram_magic_prompt_option": "OFF",  # OFF | AUTO | ON
            "ideogram_api_key": "",
            # –ü–æ–≤–µ–¥–µ–Ω–∏–µ Cursor
            "auto_paste_prompt": True,
        }
        
        print(f"üîç –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑: {self.settings_file}")
        
        try:
            if self.settings_file.exists():
                with open(self.settings_file, 'r', encoding='utf-8') as f:
                    saved_settings = json.load(f)
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                    default_settings.update(saved_settings)
                print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                print(f"üìä –ò–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω: {len(default_settings['favorite_countries'])}")
                print(f"üìù –¢–µ–º–∞—Ç–∏–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(default_settings['theme_history'])}")
            else:
                print(f"‚ÑπÔ∏è –§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∏ –ª–æ–∫–∞—Ç–æ—Ä —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                self.save_settings()
                self._save_locator()
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        
        return default_settings
    
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.settings_file, 'w', encoding='utf-8') as f:
                json.dump(self.settings, f, ensure_ascii=False, indent=2)
            print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {self.settings_file}")
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞—Ç–æ—Ä –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            self._save_locator()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    
    def add_favorite_country(self, country):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω—É –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ"""
        if country not in self.settings["favorite_countries"]:
            self.settings["favorite_countries"].insert(0, country)
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
            self.settings["favorite_countries"] = self.settings["favorite_countries"][:10]
            self.save_settings()
    
    def remove_favorite_country(self, country):
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω—É –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö"""
        if country in self.settings["favorite_countries"]:
            self.settings["favorite_countries"].remove(country)
            self.save_settings()
    
    def add_theme_to_history(self, theme):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–º–∞—Ç–∏–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        theme = theme.strip()
        if theme and theme not in self.settings["theme_history"]:
            self.settings["theme_history"].insert(0, theme)
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            self.settings["theme_history"] = self.settings["theme_history"][:10]
            self.save_settings()
    
    def get_favorite_countries(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω"""
        return self.settings.get("favorite_countries", [])
    
    def get_theme_history(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ç–µ–º–∞—Ç–∏–∫"""
        return self.settings.get("theme_history", [])
    
    def set_save_path(self, path):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        self.settings["last_save_path"] = str(path)
        self.save_settings()
    
    def get_save_path(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        return self.settings.get("last_save_path", str(get_desktop_path()))

    def save_prompt(self, prompt):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç"""
        self.settings["custom_prompt"] = prompt
        self.save_settings()
        
    def get_prompt(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
        return self.settings.get("custom_prompt", "")
    
    def set_last_selected_country(self, country):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω—É"""
        self.settings["last_selected_country"] = country
        self.save_settings()
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞: {country}")
    
    def get_last_selected_country(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω—É"""
        return self.settings.get("last_selected_country", "") 

    # --- –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–µ–Ω–¥–∏–Ω–≥–æ–≤ ---
    def add_landing_to_history(self, domain: str, prompt: str):
        try:
            from time import time
            entry = {"domain": domain.strip(), "prompt": prompt or "", "ts": int(time())}
            hist = self.settings.get("landing_history", [])
            # —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –¥–æ–º–µ–Ω—É
            hist = [e for e in hist if e.get("domain") != entry["domain"]]
            hist.insert(0, entry)
            self.settings["landing_history"] = hist[:10]
            self.save_settings()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ª–µ–Ω–¥–∏–Ω–≥–æ–≤: {e}")

    def get_landing_history(self):
        return self.settings.get("landing_history", [])

    # --- –û–±–Ω–æ–≤–ª–µ–Ω–∏—è ---
    def get_auto_check_updates(self) -> bool:
        return bool(self.settings.get("auto_check_updates", True))

    def set_auto_check_updates(self, value: bool):
        self.settings["auto_check_updates"] = bool(value)
        self.save_settings()

    def get_last_update_sha(self) -> str:
        return self.settings.get("last_update_sha", "")

    def set_last_update_sha(self, sha: str):
        self.settings["last_update_sha"] = sha or ""
        self.save_settings()

    # --- Ideogram API key ---
    def get_ideogram_api_key(self) -> str:
        try:
            return str(self.settings.get("ideogram_api_key", ""))
        except Exception:
            return ""

    def set_ideogram_api_key(self, api_key: str):
        self.settings["ideogram_api_key"] = (api_key or "").strip()
        self.save_settings()

    # --- Cursor behavior ---
    def get_auto_paste_prompt(self) -> bool:
        try:
            return bool(self.settings.get("auto_paste_prompt", True))
        except Exception:
            return True

    def set_auto_paste_prompt(self, value: bool):
        self.settings["auto_paste_prompt"] = bool(value)
        self.save_settings()

    # --- –ü–µ—Ä–µ–Ω–æ—Å —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---
    def relocate_settings_file(self, new_directory: str) -> bool:
        """
        –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –Ω–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é. –°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
        –û–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–∫–∞—Ç–æ—Ä –∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –ø—Ä–∏ —É—Å–ø–µ—Ö–µ.
        """
        try:
            new_dir = Path(new_directory)
            new_dir.mkdir(parents=True, exist_ok=True)
            new_path = new_dir / self.settings_file.name
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –Ω–æ–≤—ã–π —Ñ–∞–π–ª
            with open(new_path, 'w', encoding='utf-8') as f:
                json.dump(self.settings, f, ensure_ascii=False, indent=2)
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∏ –ª–æ–∫–∞—Ç–æ—Ä
            self.settings_file = new_path
            self._save_locator()
            print(f"‚úÖ –§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –≤: {self.settings_file}")
            return True
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            return False