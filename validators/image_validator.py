"""
–í–∞–ª–∏–¥–∞—Ç–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ —Ç–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
"""

import os
import cv2
import numpy as np
from PIL import Image, ImageEnhance, ImageFilter
from pathlib import Path
import json
from datetime import datetime
import requests
from io import BytesIO
import base64

class ImageQualityValidator:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    def __init__(self, silent_mode=False):
        self.silent_mode = silent_mode
        self.issues_found = []
        
        # –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.blur_threshold = 100.0  # –ù–∏–∂–µ = —Ä–∞–∑–º—ã—Ç–æ—Å—Ç—å
        self.low_contrast_threshold = 30  # –ù–∏–∂–µ = –Ω–∏–∑–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç
        self.noise_threshold = 0.15  # –í—ã—à–µ = –º–Ω–æ–≥–æ —à—É–º–∞
        
        if not self.silent_mode:
            print("üîç ImageQualityValidator - –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    def validate_media_folder(self, media_dir, theme=None):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ media
        
        Args:
            media_dir (str): –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            theme (str): –¢–µ–º–∞—Ç–∏–∫–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            dict: –û—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
        """
        if not self.silent_mode:
            print(f"üîç –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤: {media_dir}")
        
        media_path = Path(media_dir)
        if not media_path.exists():
            return {"error": "–ü–∞–ø–∫–∞ media –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
        
        # –°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
        expected_files = [
            'main.jpg', 'about1.jpg', 'about2.jpg', 'about3.jpg',
            'review1.jpg', 'review2.jpg', 'review3.jpg', 'favicon.png'
        ]
        
        report = {
            "timestamp": datetime.now().isoformat(),
            "theme": theme,
            "total_files": 0,
            "analyzed_files": 0,
            "quality_scores": {},
            "issues": [],
            "recommendations": [],
            "overall_score": 0
        }
        
        total_score = 0
        analyzed_count = 0
        
        for filename in expected_files:
            file_path = media_path / filename
            
            if file_path.exists():
                report["total_files"] += 1
                
                if not self.silent_mode:
                    print(f"üìä –ê–Ω–∞–ª–∏–∑ {filename}...")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                analysis = self.analyze_image(str(file_path), filename, theme)
                
                if analysis:
                    report["quality_scores"][filename] = analysis
                    report["analyzed_files"] += 1
                    total_score += analysis.get("overall_score", 0)
                    analyzed_count += 1
                    
                    # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã
                    if analysis.get("issues"):
                        report["issues"].extend([
                            f"{filename}: {issue}" for issue in analysis["issues"]
                        ])
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É
        if analyzed_count > 0:
            report["overall_score"] = round(total_score / analyzed_count, 2)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        report["recommendations"] = self._generate_recommendations(report)
        
        if not self.silent_mode:
            self._print_report(report)
        
        return report
    
    def analyze_image(self, image_path, filename, theme=None):
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –∏ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å
        
        Args:
            image_path (str): –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            filename (str): –ò–º—è —Ñ–∞–π–ª–∞
            theme (str): –¢–µ–º–∞—Ç–∏–∫–∞
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        """
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image = Image.open(image_path)
            cv_image = cv2.imread(image_path)
            
            if cv_image is None:
                return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"}
            
            analysis = {
                "filename": filename,
                "size": image.size,
                "format": image.format,
                "mode": image.mode,
                "file_size_kb": round(Path(image_path).stat().st_size / 1024, 2),
                "issues": [],
                "scores": {},
                "overall_score": 0
            }
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
            analysis["scores"]["sharpness"] = self._check_sharpness(cv_image)
            analysis["scores"]["contrast"] = self._check_contrast(cv_image)
            analysis["scores"]["noise"] = self._check_noise(cv_image)
            analysis["scores"]["color_balance"] = self._check_color_balance(cv_image)
            
            # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ —Ç–∏–ø—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if "review" in filename:
                analysis["scores"]["face_detection"] = self._check_faces(cv_image)
                analysis["scores"]["human_anatomy"] = self._check_human_anatomy(cv_image, image)
            
            if theme and "–∞–≤—Ç–æ" in theme.lower():
                analysis["scores"]["vehicle_logic"] = self._check_vehicle_logic(cv_image, image)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ AI
            analysis["scores"]["ai_artifacts"] = self._check_ai_artifacts(cv_image, image)
            analysis["scores"]["geometric_consistency"] = self._check_geometry(cv_image)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            analysis["scores"]["file_size"] = self._check_file_size(analysis["file_size_kb"], filename)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É
            scores = [v for v in analysis["scores"].values() if isinstance(v, (int, float))]
            if scores:
                analysis["overall_score"] = round(sum(scores) / len(scores), 2)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º
            analysis["issues"] = self._generate_issues(analysis)
            
            return analysis
            
        except Exception as e:
            return {"error": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"}
    
    def _check_sharpness(self, cv_image):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ç–∫–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        gray = cv2.cvtColor(cv_image, cv2.COLOR_BGR2GRAY)
        laplacian_var = cv2.Laplacian(gray, cv2.CV_64F).var()
        
        if laplacian_var > 500:
            return 10  # –û—Ç–ª–∏—á–Ω–∞—è —á–µ—Ç–∫–æ—Å—Ç—å
        elif laplacian_var > 200:
            return 8   # –•–æ—Ä–æ—à–∞—è —á–µ—Ç–∫–æ—Å—Ç—å
        elif laplacian_var > self.blur_threshold:
            return 6   # –ü—Ä–∏–µ–º–ª–µ–º–∞—è —á–µ—Ç–∫–æ—Å—Ç—å
        elif laplacian_var > 50:
            return 4   # –°–ª–∞–±–∞—è —á–µ—Ç–∫–æ—Å—Ç—å
        else:
            return 2   # –†–∞–∑–º—ã—Ç–æ
    
    def _check_contrast(self, cv_image):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏"""
        gray = cv2.cvtColor(cv_image, cv2.COLOR_BGR2GRAY)
        contrast = gray.std()
        
        if contrast > 60:
            return 10  # –û—Ç–ª–∏—á–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç
        elif contrast > 45:
            return 8   # –•–æ—Ä–æ—à–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç
        elif contrast > self.low_contrast_threshold:
            return 6   # –ü—Ä–∏–µ–º–ª–µ–º—ã–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç
        elif contrast > 20:
            return 4   # –°–ª–∞–±—ã–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç
        else:
            return 2   # –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç
    
    def _check_noise(self, cv_image):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è —à—É–º–∞"""
        gray = cv2.cvtColor(cv_image, cv2.COLOR_BGR2GRAY)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è —à—É–º–∞
        denoised = cv2.medianBlur(gray, 5)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–æ—Å—Ç—å
        noise = cv2.absdiff(gray, denoised)
        noise_level = np.mean(noise) / 255.0
        
        if noise_level < 0.05:
            return 10  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à—É–º
        elif noise_level < 0.1:
            return 8   # –ù–µ–±–æ–ª—å—à–æ–π —à—É–º
        elif noise_level < self.noise_threshold:
            return 6   # –£–º–µ—Ä–µ–Ω–Ω—ã–π —à—É–º
        elif noise_level < 0.25:
            return 4   # –ó–∞–º–µ—Ç–Ω—ã–π —à—É–º
        else:
            return 2   # –°–∏–ª—å–Ω—ã–π —à—É–º
    
    def _check_color_balance(self, cv_image):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞"""
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ LAB –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        lab = cv2.cvtColor(cv_image, cv2.COLOR_BGR2LAB)
        l, a, b = cv2.split(lab)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å a –∏ b –∫–∞–Ω–∞–ª–æ–≤
        a_mean = np.mean(a)
        b_mean = np.mean(b)
        
        # –ò–¥–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –æ–∫–æ–ª–æ 128
        a_deviation = abs(a_mean - 128)
        b_deviation = abs(b_mean - 128)
        
        avg_deviation = (a_deviation + b_deviation) / 2
        
        if avg_deviation < 5:
            return 10  # –û—Ç–ª–∏—á–Ω—ã–π –±–∞–ª–∞–Ω—Å
        elif avg_deviation < 10:
            return 8   # –•–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å
        elif avg_deviation < 20:
            return 6   # –ü—Ä–∏–µ–º–ª–µ–º—ã–π –±–∞–ª–∞–Ω—Å
        elif avg_deviation < 30:
            return 4   # –°–ª–∞–±—ã–π –±–∞–ª–∞–Ω—Å
        else:
            return 2   # –ü–ª–æ—Ö–æ–π –±–∞–ª–∞–Ω—Å
    
    def _check_faces(self, cv_image):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ª–∏—Ü –¥–ª—è review –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å–∫–∞–¥ –•–∞–∞—Ä–∞ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –ª–∏—Ü
            face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
            gray = cv2.cvtColor(cv_image, cv2.COLOR_BGR2GRAY)
            
            faces = face_cascade.detectMultiScale(gray, 1.1, 4, minSize=(50, 50))
            
            if len(faces) == 0:
                return 2  # –õ–∏—Ü–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            elif len(faces) == 1:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –ª–∏—Ü–∞
                (x, y, w, h) = faces[0]
                face_area = w * h
                image_area = cv_image.shape[0] * cv_image.shape[1]
                face_ratio = face_area / image_area
                
                if face_ratio > 0.1:  # –õ–∏—Ü–æ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—É—é –ø–ª–æ—â–∞–¥—å
                    return 10
                else:
                    return 6  # –õ–∏—Ü–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ
            else:
                return 4  # –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–∏—Ü (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–æ–π)
                
        except:
            return 5  # –û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    
    def _check_human_anatomy(self, cv_image, pil_image):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∞—Ç–æ–º–∏—á–µ—Å–∫–æ–π –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω–æ—Å—Ç–∏ –ª—é–¥–µ–π"""
        # –ü—Ä–æ—Å—Ç—ã–µ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –∞–Ω–∞—Ç–æ–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º
        score = 8  # –ù–∞—á–∏–Ω–∞–µ–º —Å —Ö–æ—Ä–æ—à–µ–π –æ—Ü–µ–Ω–∫–∏
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        height, width = cv_image.shape[:2]
        aspect_ratio = width / height
        
        # –î–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤ –æ–∂–∏–¥–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
        if 0.6 <= aspect_ratio <= 1.5:
            score += 1
        else:
            score -= 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∫–æ–∂–∏
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ HSV –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ü–≤–µ—Ç–∞ –∫–æ–∂–∏
            hsv = cv2.cvtColor(cv_image, cv2.COLOR_BGR2HSV)
            
            # –î–∏–∞–ø–∞–∑–æ–Ω —Ü–≤–µ—Ç–æ–≤ –∫–æ–∂–∏ –≤ HSV
            lower_skin = np.array([0, 20, 70])
            upper_skin = np.array([20, 255, 255])
            
            skin_mask = cv2.inRange(hsv, lower_skin, upper_skin)
            skin_pixels = cv2.countNonZero(skin_mask)
            total_pixels = cv_image.shape[0] * cv_image.shape[1]
            
            skin_ratio = skin_pixels / total_pixels
            
            # –î–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤ –æ–∂–∏–¥–∞–µ–º —Ä–∞–∑—É–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–∂–∏
            if 0.1 <= skin_ratio <= 0.6:
                score += 1
            elif skin_ratio < 0.05:
                score -= 2  # –°–ª–∏—à–∫–æ–º –º–∞–ª–æ –∫–æ–∂–∏
                
        except:
            pass
        
        return max(2, min(10, score))
    
    def _check_vehicle_logic(self, cv_image, pil_image):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—á–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""
        score = 8  # –ù–∞—á–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–º–º–µ—Ç—Ä–∏—é (–∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –æ–±—ã—á–Ω–æ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã)
        gray = cv2.cvtColor(cv_image, cv2.COLOR_BGR2GRAY)
        height, width = gray.shape
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ª–µ–≤—É—é –∏ –ø—Ä–∞–≤—É—é –ø–æ–ª–æ–≤–∏–Ω—ã
        left_half = gray[:, :width//2]
        right_half = cv2.flip(gray[:, width//2:], 1)
        
        # –ü–æ–¥–≥–æ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä—ã
        min_width = min(left_half.shape[1], right_half.shape[1])
        left_half = left_half[:, :min_width]
        right_half = right_half[:, :min_width]
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–æ—Å—Ç—å
        if left_half.shape == right_half.shape:
            diff = cv2.absdiff(left_half, right_half)
            symmetry_score = 1.0 - (np.mean(diff) / 255.0)
            
            if symmetry_score > 0.7:
                score += 1
            elif symmetry_score < 0.4:
                score -= 2  # –û—á–µ–Ω—å –Ω–µ—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–µ—Å (–∫—Ä—É–≥–ª—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏)
        circles = cv2.HoughCircles(gray, cv2.HOUGH_GRADIENT, 1, 50, 
                                 param1=50, param2=30, minRadius=10, maxRadius=100)
        
        if circles is not None:
            circles = np.round(circles[0, :]).astype("int")
            wheel_count = 0
            
            # –°—á–∏—Ç–∞–µ–º –∫—Ä—É–≥–∏ –≤ –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ–≤–∏–Ω–µ (–≥–¥–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ–ª–µ—Å–∞)
            for (x, y, r) in circles:
                if y > height * 0.6:  # –ù–∏–∂–Ω—è—è –ø–æ–ª–æ–≤–∏–Ω–∞
                    wheel_count += 1
            
            if wheel_count >= 2:
                score += 1
            elif wheel_count == 0:
                score -= 1
        
        return max(2, min(10, score))
    
    def _check_ai_artifacts(self, cv_image, pil_image):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–∏–ø–∏—á–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        score = 8
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        gray = cv2.cvtColor(cv_image, cv2.COLOR_BGR2GRAY)
        
        # –ò—â–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã
        template_size = 32
        height, width = gray.shape
        
        if height > template_size * 2 and width > template_size * 2:
            # –ë–µ—Ä–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —É—á–∞—Å—Ç–æ–∫ –∏ –∏—â–µ–º –µ–≥–æ –∫–æ–ø–∏–∏
            template = gray[height//4:height//4+template_size, 
                          width//4:width//4+template_size]
            
            result = cv2.matchTemplate(gray, template, cv2.TM_CCOEFF_NORMED)
            locations = np.where(result >= 0.8)  # –í—ã—Å–æ–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            
            if len(locations[0]) > 3:  # –ù–∞–π–¥–µ–Ω–æ –º–Ω–æ–≥–æ –∫–æ–ø–∏–π
                score -= 2
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é –≥–ª–∞–¥–∫–æ—Å—Ç—å (–ø—Ä–∏–∑–Ω–∞–∫ AI)
        blur_kernel = 5
        blurred = cv2.GaussianBlur(gray, (blur_kernel, blur_kernel), 0)
        diff = cv2.absdiff(gray, blurred)
        texture_variance = np.var(diff)
        
        if texture_variance < 10:  # –°–ª–∏—à–∫–æ–º –≥–ª–∞–¥–∫–æ
            score -= 1
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã
        grad_x = cv2.Sobel(gray, cv2.CV_64F, 1, 0, ksize=3)
        grad_y = cv2.Sobel(gray, cv2.CV_64F, 0, 1, ksize=3)
        gradient_magnitude = np.sqrt(grad_x**2 + grad_y**2)
        
        # –ò—â–µ–º –æ–±–ª–∞—Å—Ç–∏ —Å –æ—á–µ–Ω—å —Ä–µ–∑–∫–∏–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏
        extreme_gradients = np.sum(gradient_magnitude > 200)
        total_pixels = gradient_magnitude.size
        
        if extreme_gradients / total_pixels > 0.05:  # –ú–Ω–æ–≥–æ —Ä–µ–∑–∫–∏—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
            score -= 1
        
        return max(2, min(10, score))
    
    def _check_geometry(self, cv_image):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏"""
        score = 8
        
        # –î–µ—Ç–µ–∫—Ü–∏—è –ª–∏–Ω–∏–π
        gray = cv2.cvtColor(cv_image, cv2.COLOR_BGR2GRAY)
        edges = cv2.Canny(gray, 50, 150, apertureSize=3)
        lines = cv2.HoughLines(edges, 1, np.pi/180, threshold=100)
        
        if lines is not None:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É–≥–ª—ã –º–µ–∂–¥—É –ª–∏–Ω–∏—è–º–∏
            angles = []
            for line in lines[:20]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 20 –ª–∏–Ω–∏–π
                rho, theta = line[0]
                angles.append(theta)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —É–≥–ª–æ–≤
            angles = np.array(angles)
            angle_variance = np.var(angles)
            
            if angle_variance > 0.5:  # –•–æ—Ä–æ—à–µ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —É–≥–ª–æ–≤
                score += 1
            elif angle_variance < 0.1:  # –°–ª–∏—à–∫–æ–º –æ–¥–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —É–≥–ª—ã
                score -= 1
        
        return max(2, min(10, score))
    
    def _check_file_size(self, size_kb, filename):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
        if filename.endswith('.png'):
            # –î–ª—è PNG (—Ñ–∞–≤–∏–∫–æ–Ω–∫–∏)
            if size_kb < 100:
                return 10
            elif size_kb < 200:
                return 8
            else:
                return 6
        else:
            # –î–ª—è JPG
            if 50 <= size_kb <= 200:
                return 10
            elif 30 <= size_kb <= 300:
                return 8
            elif size_kb < 30:
                return 4  # –°–ª–∏—à–∫–æ–º —Å–∂–∞—Ç–æ
            else:
                return 6  # –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
    
    def _generate_issues(self, analysis):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        issues = []
        scores = analysis["scores"]
        
        if scores.get("sharpness", 10) < 5:
            issues.append("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–º—ã—Ç–æ –∏–ª–∏ –Ω–µ—á–µ—Ç–∫–æ")
        
        if scores.get("contrast", 10) < 5:
            issues.append("–ù–∏–∑–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª–µ–∫–ª–æ–µ")
        
        if scores.get("noise", 10) < 5:
            issues.append("–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —à—É–º–∞/–∑–µ—Ä–Ω–∏—Å—Ç–æ—Å—Ç–∏")
        
        if scores.get("color_balance", 10) < 5:
            issues.append("–ü–ª–æ—Ö–æ–π —Ü–≤–µ—Ç–æ–≤–æ–π –±–∞–ª–∞–Ω—Å")
        
        if scores.get("face_detection", 10) < 5:
            issues.append("–ü—Ä–æ–±–ª–µ–º—ã —Å –ª–∏—Ü–∞–º–∏ (–Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ)")
        
        if scores.get("human_anatomy", 10) < 5:
            issues.append("–ê–Ω–∞—Ç–æ–º–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –∏–ª–∏ –Ω–µ–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏")
        
        if scores.get("vehicle_logic", 10) < 5:
            issues.append("–ù–µ–ª–æ–≥–∏—á–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
        
        if scores.get("ai_artifacts", 10) < 5:
            issues.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        
        if scores.get("geometric_consistency", 10) < 5:
            issues.append("–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è")
        
        if scores.get("file_size", 10) < 5:
            issues.append("–ù–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞")
        
        return issues
    
    def _generate_recommendations(self, report):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç—á–µ—Ç–∞"""
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        low_quality_files = []
        for filename, analysis in report["quality_scores"].items():
            if analysis.get("overall_score", 0) < 6:
                low_quality_files.append(filename)
        
        if low_quality_files:
            recommendations.append(f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å: {', '.join(low_quality_files)}")
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if "—Ä–∞–∑–º—ã—Ç–æ" in str(report["issues"]):
            recommendations.append("–î–æ–±–∞–≤—å—Ç–µ –≤ –ø—Ä–æ–º–ø—Ç—ã: 'sharp, high quality, detailed'")
        
        if "–∫–æ–Ω—Ç—Ä–∞—Å—Ç" in str(report["issues"]):
            recommendations.append("–î–æ–±–∞–≤—å—Ç–µ –≤ –ø—Ä–æ–º–ø—Ç—ã: 'high contrast, vibrant colors'")
        
        if "–ª–∏—Ü" in str(report["issues"]):
            recommendations.append("–î–ª—è review –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º–ø—Ç—ã: 'close-up portrait, human face clearly visible'")
        
        if "–∞–≤—Ç–æ–º–æ–±–∏–ª—å" in str(report["issues"]):
            recommendations.append("–î–ª—è –∞–≤—Ç–æ –¥–æ–±–∞–≤—å—Ç–µ: 'realistic car, proper vehicle proportions, logical car design'")
        
        if report["overall_score"] < 6:
            recommendations.append("–û–±—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∏–∑–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å AI –∏–ª–∏ —É–ª—É—á—à–∏—Ç–µ –ø—Ä–æ–º–ø—Ç—ã")
        
        return recommendations
    
    def _print_report(self, report):
        """–í—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å"""
        print("\n" + "="*60)
        print("üìä –û–¢–ß–ï–¢ –û –ö–ê–ß–ï–°–¢–í–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
        print("="*60)
        
        print(f"üéØ –¢–µ–º–∞—Ç–∏–∫–∞: {report.get('theme', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
        print(f"üìÅ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {report['analyzed_files']}/{report['total_files']} —Ñ–∞–π–ª–æ–≤")
        print(f"‚≠ê –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {report['overall_score']}/10")
        
        if report['overall_score'] >= 8:
            print("‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ!")
        elif report['overall_score'] >= 6:
            print("‚úÖ –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ")
        elif report['overall_score'] >= 4:
            print("‚ö†Ô∏è –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
        else:
            print("‚ùå –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–¥–µ–ª–∫–∏")
        
        print("\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –û–¶–ï–ù–ö–ò:")
        for filename, analysis in report["quality_scores"].items():
            score = analysis.get("overall_score", 0)
            icon = "‚úÖ" if score >= 7 else "‚ö†Ô∏è" if score >= 5 else "‚ùå"
            print(f"  {icon} {filename}: {score}/10")
            
            if analysis.get("issues"):
                for issue in analysis["issues"]:
                    print(f"     üî∏ {issue}")
        
        if report["issues"]:
            print(f"\n‚ö†Ô∏è –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ ({len(report['issues'])}):")
            for issue in report["issues"][:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"  ‚Ä¢ {issue}")
        
        if report["recommendations"]:
            print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            for rec in report["recommendations"]:
                print(f"  ‚û§ {rec}")
        
        print("="*60)
    
    def save_report(self, report, output_path="validation_report.json"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –≤ JSON —Ñ–∞–π–ª"""
        try:
            with open(output_path, 'w', encoding='utf-8') as f:
                json.dump(report, f, ensure_ascii=False, indent=2)
            
            if not self.silent_mode:
                print(f"üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
            
            return True
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            return False


def validate_images(media_dir, theme=None, save_report=True, silent_mode=False):
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    
    Args:
        media_dir (str): –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        theme (str): –¢–µ–º–∞—Ç–∏–∫–∞
        save_report (bool): –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        silent_mode (bool): –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º
        
    Returns:
        dict: –û—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
    """
    validator = ImageQualityValidator(silent_mode=silent_mode)
    report = validator.validate_media_folder(media_dir, theme)
    
    if save_report and not report.get("error"):
        validator.save_report(report)
    
    return report


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    media_directory = "media"
    theme = "–≤—ã–µ–∑–¥–Ω–æ–π –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å"
    
    print("üîç –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    report = validate_images(media_directory, theme, save_report=True)
    
    if report.get("error"):
        print(f"‚ùå –û—à–∏–±–∫–∞: {report['error']}")
    else:
        print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {report['overall_score']}/10") 