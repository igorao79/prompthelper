# -*- coding: utf-8 -*-

"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
"""

import random
from data import COUNTRIES_DATA


class CityGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≥–æ—Ä–æ–¥–æ–≤ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤"""
    
    def __init__(self):
        self.last_cities = {}  # {country: last_city}
    
    def get_random_city(self, country):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≥–æ—Ä–æ–¥ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã, –∏—Å–∫–ª—é—á–∞—è –ø—Ä–µ–¥—ã–¥—É—â–∏–π
        
        Args:
            country (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
            
        Returns:
            str: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
        """
        if country not in COUNTRIES_DATA:
            return ""
        
        cities = COUNTRIES_DATA[country]["cities"]
        last_city = self.last_cities.get(country, "")
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥–æ—Ä–æ–¥
        available_cities = [city for city in cities if city != last_city]
        
        # –ï—Å–ª–∏ –≤—Å–µ –≥–æ—Ä–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
        if not available_cities:
            available_cities = cities
        
        new_city = random.choice(available_cities)
        self.last_cities[country] = new_city
        
        return new_city


def validate_domain(domain):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–æ–º–µ–Ω–∞
    
    Args:
        domain (str): –î–æ–º–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        tuple: (is_valid, error_message)
    """
    if not domain or not domain.strip():
        return False, "–î–æ–º–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    
    domain = domain.strip()
    
    # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–∞
    if len(domain) < 3:
        return False, "–î–æ–º–µ–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π"
    
    if len(domain) > 63:
        return False, "–î–æ–º–µ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    invalid_chars = [' ', '/', '\\', ':', '*', '?', '"', '<', '>', '|']
    for char in invalid_chars:
        if char in domain:
            return False, f"–î–æ–º–µ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å–∏–º–≤–æ–ª: {char}"
    
    return True, ""


def format_status_message(text, status_type="info"):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏
    
    Args:
        text (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        status_type (str): –¢–∏–ø —Å—Ç–∞—Ç—É—Å–∞ (info, success, error, warning)
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    emojis = {
        "info": "‚ÑπÔ∏è",
        "success": "‚úÖ", 
        "error": "‚ùå",
        "warning": "‚ö†Ô∏è",
        "loading": "‚è≥",
        "rocket": "üöÄ",
        "gear": "‚öôÔ∏è",
        "folder": "üìÅ",
        "document": "üìù"
    }
    
    emoji = emojis.get(status_type, "")
    return f"{emoji} {text}" if emoji else text


def get_language_by_country(country):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —è–∑—ã–∫ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã
    
    Args:
        country (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
        
    Returns:
        str: –Ø–∑—ã–∫ —Å—Ç—Ä–∞–Ω—ã –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    if country in COUNTRIES_DATA:
        return COUNTRIES_DATA[country]["language"]
    return ""


def sanitize_filename(filename):
    """
    –û—á–∏—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    
    Args:
        filename (str): –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        
    Returns:
        str: –û—á–∏—â–µ–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    """
    invalid_chars = ['<', '>', ':', '"', '/', '\\', '|', '?', '*']
    
    for char in invalid_chars:
        filename = filename.replace(char, '_')
    
    # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    while '__' in filename:
        filename = filename.replace('__', '_')
    
    # –£–±–∏—Ä–∞–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    filename = filename.strip('_')
    
    return filename


def create_project_info(country, city, language, domain, theme):
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–µ–∫—Ç–µ
    
    Args:
        country (str): –°—Ç—Ä–∞–Ω–∞
        city (str): –ì–æ—Ä–æ–¥
        language (str): –Ø–∑—ã–∫
        domain (str): –î–æ–º–µ–Ω
        theme (str): –¢–µ–º–∞—Ç–∏–∫–∞
        
    Returns:
        dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
    """
    return {
        "country": country,
        "city": city, 
        "language": language,
        "domain": domain,
        "theme": theme,
        "project_name": f"{theme} - {country} ({city})",
        "safe_domain": sanitize_filename(domain)
    } 