# -*- coding: utf-8 -*-

"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
"""

import random
import os
import sys
import json
import datetime
from pathlib import Path
from data import COUNTRIES_DATA
import subprocess
from tkinter import messagebox


class CityGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≥–æ—Ä–æ–¥–æ–≤"""
    
    def __init__(self):
        self.cities_by_country = {
            "–†–æ—Å—Å–∏—è": ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å"],
            "–£–∫—Ä–∞–∏–Ω–∞": ["–ö–∏–µ–≤", "–•–∞—Ä—å–∫–æ–≤", "–û–¥–µ—Å—Å–∞", "–î–Ω–µ–ø—Ä", "–õ—å–≤–æ–≤"],
            "–ë–µ–ª–∞—Ä—É—Å—å": ["–ú–∏–Ω—Å–∫", "–ì–æ–º–µ–ª—å", "–ú–æ–≥–∏–ª–µ–≤", "–í–∏—Ç–µ–±—Å–∫", "–ì—Ä–æ–¥–Ω–æ"],
            "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω": ["–ê–ª–º–∞—Ç—ã", "–ù—É—Ä-–°—É–ª—Ç–∞–Ω", "–®—ã–º–∫–µ–Ω—Ç", "–ö–∞—Ä–∞–≥–∞–Ω–¥–∞", "–ê–∫—Ç–æ–±–µ"],
            "–°–®–ê": ["–ù—å—é-–ô–æ—Ä–∫", "–õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å", "–ß–∏–∫–∞–≥–æ", "–•—å—é—Å—Ç–æ–Ω", "–§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è"],
            "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è": ["–õ–æ–Ω–¥–æ–Ω", "–ú–∞–Ω—á–µ—Å—Ç–µ—Ä", "–ë–∏—Ä–º–∏–Ω–≥–µ–º", "–ì–ª–∞–∑–≥–æ", "–õ–∏–≤–µ—Ä–ø—É–ª—å"],
            "–ì–µ—Ä–º–∞–Ω–∏—è": ["–ë–µ—Ä–ª–∏–Ω", "–ì–∞–º–±—É—Ä–≥", "–ú—é–Ω—Ö–µ–Ω", "–ö—ë–ª—å–Ω", "–§—Ä–∞–Ω–∫—Ñ—É—Ä—Ç"],
            "–§—Ä–∞–Ω—Ü–∏—è": ["–ü–∞—Ä–∏–∂", "–ú–∞—Ä—Å–µ–ª—å", "–õ–∏–æ–Ω", "–¢—É–ª—É–∑–∞", "–ù–∏—Ü—Ü–∞"],
            "–ò—Ç–∞–ª–∏—è": ["–†–∏–º", "–ú–∏–ª–∞–Ω", "–ù–µ–∞–ø–æ–ª—å", "–¢—É—Ä–∏–Ω", "–ü–∞–ª–µ—Ä–º–æ"],
            "–ò—Å–ø–∞–Ω–∏—è": ["–ú–∞–¥—Ä–∏–¥", "–ë–∞—Ä—Å–µ–ª–æ–Ω–∞", "–í–∞–ª–µ–Ω—Å–∏—è", "–°–µ–≤–∏–ª—å—è", "–°–∞—Ä–∞–≥–æ—Å–∞"],
            "–ü–æ–ª—å—à–∞": ["–í–∞—Ä—à–∞–≤–∞", "–ö—Ä–∞–∫–æ–≤", "–õ–æ–¥–∑—å", "–í—Ä–æ—Ü–ª–∞–≤", "–ü–æ–∑–Ω–∞–Ω—å"],
            "–ß–µ—Ö–∏—è": ["–ü—Ä–∞–≥–∞", "–ë—Ä–Ω–æ", "–û—Å—Ç—Ä–∞–≤–∞", "–ü–ª—å–∑–µ–Ω—å", "–õ–∏–±–µ—Ä–µ—Ü"],
            "–¢—É—Ä—Ü–∏—è": ["–°—Ç–∞–º–±—É–ª", "–ê–Ω–∫–∞—Ä–∞", "–ò–∑–º–∏—Ä", "–ë—É—Ä—Å–∞", "–ê–Ω—Ç–∞–ª—å—è"],
            "–ö–∏—Ç–∞–π": ["–ü–µ–∫–∏–Ω", "–®–∞–Ω—Ö–∞–π", "–ì—É–∞–Ω—á–∂–æ—É", "–®—ç–Ω—å—á–∂—ç–Ω—å", "–¢—è–Ω—å—Ü–∑–∏–Ω—å"],
            "–Ø–ø–æ–Ω–∏—è": ["–¢–æ–∫–∏–æ", "–û—Å–∞–∫–∞", "–ù–∞–≥–æ—è", "–°–∞–ø–ø–æ—Ä–æ", "–§—É–∫—É–æ–∫–∞"],
            "–ö–æ—Ä–µ—è": ["–°–µ—É–ª", "–ü—É—Å–∞–Ω", "–ò–Ω—á—Ö–æ–Ω", "–¢—ç–≥—É", "–î—ç–¥–∂–æ–Ω"],
            "–ò–Ω–¥–∏—è": ["–ú—É–º–±–∞–∏", "–î–µ–ª–∏", "–ë–∞–Ω–≥–∞–ª–æ—Ä", "–•–∞–π–¥–∞—Ä–∞–±–∞–¥", "–ê—Ö–º–∞–¥–∞–±–∞–¥"],
            "–ë—Ä–∞–∑–∏–ª–∏—è": ["–°–∞–Ω-–ü–∞—É–ª—É", "–†–∏–æ-–¥–µ-–ñ–∞–Ω–µ–π—Ä–æ", "–ë—Ä–∞–∑–∏–ª–∏–∞", "–°–∞–ª–≤–∞–¥–æ—Ä", "–§–æ—Ä—Ç–∞–ª–µ–∑–∞"],
            "–ú–µ–∫—Å–∏–∫–∞": ["–ú–µ—Ö–∏–∫–æ", "–ì–≤–∞–¥–∞–ª–∞—Ö–∞—Ä–∞", "–ú–æ–Ω—Ç–µ—Ä—Ä–µ–π", "–ü—É—ç–±–ª–∞", "–¢–∏—Ö—É–∞–Ω–∞"],
            "–ö–∞–Ω–∞–¥–∞": ["–¢–æ—Ä–æ–Ω—Ç–æ", "–ú–æ–Ω—Ä–µ–∞–ª—å", "–í–∞–Ω–∫—É–≤–µ—Ä", "–ö–∞–ª–≥–∞—Ä–∏", "–û—Ç—Ç–∞–≤–∞"]
        }
    
    def get_random_city(self, country):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≥–æ—Ä–æ–¥ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã"""
        if country in self.cities_by_country:
            return random.choice(self.cities_by_country[country])
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥"


class SettingsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    
    def __init__(self):
        # –•—Ä–∞–Ω–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –¥–æ–º–∞—à–Ω–µ–π –ø–∞–ø–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.settings_file = Path.home() / "landing_generator_settings.json"
        self.settings = self.load_settings()
    
    def load_settings(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        default_settings = {
            "favorite_countries": [],
            "theme_history": [],
            "default_save_path": str(get_desktop_path()),
            "last_save_path": str(get_desktop_path()),
            "custom_prompt": ""
        }
        
        print(f"üîç –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑: {self.settings_file}")
        
        try:
            if self.settings_file.exists():
                with open(self.settings_file, 'r', encoding='utf-8') as f:
                    saved_settings = json.load(f)
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                    default_settings.update(saved_settings)
                print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                print(f"üìä –ò–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω: {len(default_settings['favorite_countries'])}")
                print(f"üìù –¢–µ–º–∞—Ç–∏–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(default_settings['theme_history'])}")
            else:
                print(f"‚ÑπÔ∏è –§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                self.save_settings()  # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        
        return default_settings
    
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.settings_file, 'w', encoding='utf-8') as f:
                json.dump(self.settings, f, ensure_ascii=False, indent=2)
            print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {self.settings_file}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    
    def add_favorite_country(self, country):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω—É –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ"""
        if country not in self.settings["favorite_countries"]:
            self.settings["favorite_countries"].insert(0, country)
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
            self.settings["favorite_countries"] = self.settings["favorite_countries"][:10]
            self.save_settings()
    
    def remove_favorite_country(self, country):
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω—É –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö"""
        if country in self.settings["favorite_countries"]:
            self.settings["favorite_countries"].remove(country)
            self.save_settings()
    
    def add_theme_to_history(self, theme):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–º–∞—Ç–∏–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        theme = theme.strip()
        if theme and theme not in self.settings["theme_history"]:
            self.settings["theme_history"].insert(0, theme)
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            self.settings["theme_history"] = self.settings["theme_history"][:10]
            self.save_settings()
    
    def get_favorite_countries(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω"""
        return self.settings.get("favorite_countries", [])
    
    def get_theme_history(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ç–µ–º–∞—Ç–∏–∫"""
        return self.settings.get("theme_history", [])
    
    def set_save_path(self, path):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        self.settings["last_save_path"] = str(path)
        self.save_settings()
    
    def get_save_path(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        return self.settings.get("last_save_path", str(get_desktop_path()))

    def save_prompt(self, prompt):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç"""
        self.settings["custom_prompt"] = prompt
        self.save_settings()
        
    def get_prompt(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
        return self.settings.get("custom_prompt", "")


def get_desktop_path():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ä–∞–±–æ—á–µ–º—É —Å—Ç–æ–ª—É –≤ Windows
    
    Returns:
        Path: –ü—É—Ç—å –∫ —Ä–∞–±–æ—á–µ–º—É —Å—Ç–æ–ª—É
    """
    try:
        # –î–ª—è Windows –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é USERPROFILE
        if os.name == 'nt':  # Windows
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ä–∞–±–æ—á–µ–º—É —Å—Ç–æ–ª—É —á–µ—Ä–µ–∑ —Ä–µ–µ—Å—Ç—Ä
            try:
                import winreg
                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, 
                                  r"Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders") as key:
                    desktop_path = winreg.QueryValueEx(key, "Desktop")[0]
                    return Path(desktop_path)
            except:
                pass
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã
            desktop_paths = [
                Path(os.path.expanduser("~/Desktop")),
                Path(os.path.expanduser("~/–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª")),
                Path(os.path.join(os.path.expanduser("~"), "Desktop")),
                Path(os.path.join(os.path.expanduser("~"), "–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª")),
                Path(os.environ.get('USERPROFILE', '')) / "Desktop",
                Path(os.environ.get('USERPROFILE', '')) / "–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª"
            ]
            
            for path in desktop_paths:
                if path.exists():
                    return path
        
        # –î–ª—è –¥—Ä—É–≥–∏—Ö –û–°
        return Path.home() / "Desktop"
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞: {e}")
        return Path.home() / "Desktop"


def get_current_year():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –≥–æ–¥
    
    Returns:
        int: –¢–µ–∫—É—â–∏–π –≥–æ–¥
    """
    return datetime.datetime.now().year


def validate_domain(domain):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–æ–º–µ–Ω–∞
    
    Args:
        domain (str): –î–æ–º–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        tuple: (is_valid, error_message)
    """
    if not domain or not domain.strip():
        return False, "–î–æ–º–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    
    domain = domain.strip()
    
    # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–∞
    if len(domain) < 3:
        return False, "–î–æ–º–µ–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π"
    
    if len(domain) > 63:
        return False, "–î–æ–º–µ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    invalid_chars = [' ', '/', '\\', ':', '*', '?', '"', '<', '>', '|']
    for char in invalid_chars:
        if char in domain:
            return False, f"–î–æ–º–µ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å–∏–º–≤–æ–ª: {char}"
    
    return True, ""


def check_directory_exists(path, domain):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞ —Å —Ç–∞–∫–∏–º –¥–æ–º–µ–Ω–æ–º
    
    Args:
        path (Path): –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        domain (str): –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–º–µ–Ω–∞
        
    Returns:
        tuple: (exists, full_path)
    """
    full_path = Path(path) / domain
    return full_path.exists(), full_path


def format_status_message(text, status_type="info"):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏
    
    Args:
        text (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        status_type (str): –¢–∏–ø —Å—Ç–∞—Ç—É—Å–∞ (info, success, error, warning)
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    emojis = {
        "info": "‚ÑπÔ∏è",
        "success": "‚úÖ", 
        "error": "‚ùå",
        "warning": "‚ö†Ô∏è",
        "loading": "‚è≥",
        "rocket": "üöÄ",
        "gear": "‚öôÔ∏è",
        "folder": "üìÅ",
        "document": "üìù"
    }
    
    emoji = emojis.get(status_type, "")
    return f"{emoji} {text}" if emoji else text


def get_language_by_country(country):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —è–∑—ã–∫ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã"""
    language_names = {
        "ru": "–†—É—Å—Å–∫–∏–π",
        "uk": "–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π",
        "be": "–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π",
        "kk": "–ö–∞–∑–∞—Ö—Å–∫–∏–π",
        "en": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
        "de": "–ù–µ–º–µ—Ü–∫–∏–π",
        "fr": "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π",
        "it": "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π",
        "es": "–ò—Å–ø–∞–Ω—Å–∫–∏–π",
        "pl": "–ü–æ–ª—å—Å–∫–∏–π",
        "cs": "–ß–µ—à—Å–∫–∏–π",
        "tr": "–¢—É—Ä–µ—Ü–∫–∏–π",
        "zh": "–ö–∏—Ç–∞–π—Å–∫–∏–π",
        "ja": "–Ø–ø–æ–Ω—Å–∫–∏–π",
        "ko": "–ö–æ—Ä–µ–π—Å–∫–∏–π",
        "hi": "–•–∏–Ω–¥–∏",
        "pt": "–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π"
    }
    
    lang_code = COUNTRIES_DATA.get(country)
    return language_names.get(lang_code, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —è–∑—ã–∫")


def sanitize_filename(filename):
    """
    –û—á–∏—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    
    Args:
        filename (str): –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        
    Returns:
        str: –û—á–∏—â–µ–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    """
    invalid_chars = ['<', '>', ':', '"', '/', '\\', '|', '?', '*']
    
    for char in invalid_chars:
        filename = filename.replace(char, '_')
    
    # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    while '__' in filename:
        filename = filename.replace('__', '_')
    
    # –£–±–∏—Ä–∞–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    filename = filename.strip('_')
    
    return filename


def create_project_info(country, city, language, domain, theme):
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–µ–∫—Ç–µ
    
    Args:
        country (str): –°—Ç—Ä–∞–Ω–∞
        city (str): –ì–æ—Ä–æ–¥
        language (str): –Ø–∑—ã–∫
        domain (str): –î–æ–º–µ–Ω
        theme (str): –¢–µ–º–∞—Ç–∏–∫–∞
        
    Returns:
        dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
    """
    return {
        "country": country,
        "city": city, 
        "language": language,
        "domain": domain,
        "theme": theme,
        "project_name": f"{theme} - {country} ({city})",
        "safe_domain": sanitize_filename(domain),
        "year": get_current_year()
    }


def open_text_editor(text, title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞"):
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
    
    Args:
        text (str): –¢–µ–∫—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        title (str): –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
        
    Returns:
        str: –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_dir = Path.home() / ".landing_generator"
        temp_dir.mkdir(exist_ok=True)
        temp_file = temp_dir / "temp_prompt.txt"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(temp_file, 'w', encoding='utf-8') as f:
            f.write(text or "")
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
        if os.name == 'nt':  # Windows
            os.startfile(str(temp_file))
        else:  # Linux/Mac
            subprocess.run(['xdg-open', str(temp_file)])
        
        # –ñ–¥–µ–º –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä–æ–µ—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä
        result = messagebox.askokcancel(
            "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞",
            "–§–∞–π–ª –æ—Ç–∫—Ä—ã—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ.\n\n"
            "1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç\n"
            "2. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª (Ctrl+S)\n"
            "3. –ó–∞–∫—Ä–æ–π—Ç–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä\n"
            "4. –ù–∞–∂–º–∏—Ç–µ OK –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π\n"
            "   –∏–ª–∏ –û—Ç–º–µ–Ω–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π"
        )
        
        if result:
            # –ß–∏—Ç–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            with open(temp_file, 'r', encoding='utf-8') as f:
                edited_text = f.read()
            return edited_text
        
        return None
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º: {e}")
        return None
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            if temp_file.exists():
                temp_file.unlink()
        except:
            pass 