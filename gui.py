# -*- coding: utf-8 -*-

"""
GUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ª–µ–Ω–¥–∏–Ω–≥–æ–≤
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import threading
from pathlib import Path

from data import COUNTRIES_DATA, THEME_COLORS
from utils import (CityGenerator, validate_domain, format_status_message, 
                  get_language_by_country, SettingsManager, get_desktop_path, 
                  open_text_editor, check_directory_exists)
from cursor_manager import CursorManager
from prompt_generator import create_landing_prompt


class CountrySearchCombobox(ttk.Frame):
    """–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∫–æ–º–±–æ–±–æ–∫—Å —Å –ø–æ–∏—Å–∫–æ–º –¥–ª—è —Å—Ç—Ä–∞–Ω"""
    
    def __init__(self, parent, settings_manager, textvariable=None, on_select=None):
        super().__init__(parent)
        
        self.textvariable = textvariable or tk.StringVar()
        self.on_select = on_select
        self.settings_manager = settings_manager
        self.all_countries = list(COUNTRIES_DATA.keys())
        self.filtered_countries = self.all_countries.copy()
        self.favorites = self.settings_manager.get_favorite_countries()
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.search_var = tk.StringVar()
        self.search_var.trace('w', self.on_search_change)
        self.popup_window = None
        
        self.setup_ui()
    
    def setup_ui(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self)
        main_frame.pack(fill="x")
        
        # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
        self.entry = ttk.Entry(
            main_frame, 
            textvariable=self.search_var,
            font=("Arial", 9)
        )
        self.entry.pack(side="left", fill="x", expand=True)
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞
        select_btn = ttk.Button(
            main_frame,
            text="‚ñº",
            width=3,
            command=self.show_dropdown
        )
        select_btn.pack(side="left", padx=(2, 0))
        
        # –ë–∏–Ω–¥—ã
        self.entry.bind('<Return>', lambda e: self.show_dropdown())
        self.entry.bind('<Down>', lambda e: self.show_dropdown())
        
    def show_dropdown(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫"""
        if self.popup_window and self.popup_window.winfo_exists():
            self.popup_window.destroy()
            return
            
        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ
        self.popup_window = tk.Toplevel(self)
        self.popup_window.overrideredirect(True)
        self.popup_window.transient()
        
        # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
        x = self.entry.winfo_rootx()
        y = self.entry.winfo_rooty() + self.entry.winfo_height()
        self.popup_window.geometry(f"{self.entry.winfo_width() + 30}x200+{x}+{y}")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º —Å–æ —Å–∫—Ä–æ–ª–ª–æ–º
        container = ttk.Frame(self.popup_window)
        container.pack(fill="both", expand=True)
        
        # –ö–∞–Ω–≤–∞—Å –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞
        canvas = tk.Canvas(container, height=200)
        scrollbar = ttk.Scrollbar(container, orient="vertical", command=canvas.yview)
        
        # –§—Ä–µ–π–º –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.items_frame = ttk.Frame(canvas)
        self.items_frame.bind("<Configure>", 
            lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–Ω–≤–∞—Å
        canvas.create_window((0, 0), window=self.items_frame, anchor="nw", width=self.entry.winfo_width() + 13)
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # –†–∞–∑–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –∫–æ–ª–µ—Å–∏–∫–æ–º –º—ã—à–∏
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        
        canvas.bind_all("<MouseWheel>", _on_mousewheel)
        
        # –û—Ç–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞
        def _on_popup_destroy(event):
            canvas.unbind_all("<MouseWheel>")
        self.popup_window.bind("<Destroy>", _on_popup_destroy)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω—ã
        self.update_dropdown_items()
        
        # –ë–∏–Ω–¥—ã –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        self.popup_window.bind('<Escape>', lambda e: self.popup_window.destroy())
        self.popup_window.bind('<FocusOut>', self._on_focus_out)
        
        # –°—Ç–∏–ª–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞
        style = ttk.Style()
        style.configure("Country.TLabel", padding=4, font=("Arial", 9))
        style.configure("Favorite.TLabel", padding=4, font=("Arial", 9, "bold"))
        
    def update_dropdown_items(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω"""
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        for widget in self.items_frame.winfo_children():
            widget.destroy()
            
        # –°–Ω–∞—á–∞–ª–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ
        if self.favorites:
            for country in self.favorites:
                if self._matches_search(country):
                    self.create_country_item(country, True)
            
            # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            if any(self._matches_search(c) for c in self.filtered_countries if c not in self.favorites):
                ttk.Separator(self.items_frame).pack(fill="x", pady=2)
        
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
        for country in self.filtered_countries:
            if country not in self.favorites and self._matches_search(country):
                self.create_country_item(country, False)
    
    def create_country_item(self, country, is_favorite):
        """–°–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Å—Ç—Ä–∞–Ω—ã"""
        frame = ttk.Frame(self.items_frame)
        frame.pack(fill="x")
        
        # –°—Ç–∏–ª—å –º–µ—Ç–∫–∏
        style = "Favorite.TLabel" if is_favorite else "Country.TLabel"
        
        # –ú–µ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω—ã
        label = ttk.Label(
            frame, 
            text=country,
            style=style
        )
        label.pack(side="left", fill="x", expand=True)
        
        # –ó–≤–µ–∑–¥–æ—á–∫–∞
        star = ttk.Label(
            frame,
            text="‚òÖ" if is_favorite else "‚òÜ",
            style=style,
            cursor="hand2"
        )
        star.pack(side="right", padx=5)
        
        # –ë–∏–Ω–¥—ã
        label.bind('<Button-1>', lambda e, c=country: self._select_country(c))
        star.bind('<Button-1>', lambda e, c=country: self._toggle_favorite(c))
        
        # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        for widget in (label, star):
            widget.bind('<Enter>', lambda e, w=widget: w.configure(foreground="#2980b9"))
            widget.bind('<Leave>', lambda e, w=widget: w.configure(foreground="black"))
    
    def _matches_search(self, country):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É"""
        search = self.search_var.get().lower()
        return not search or search in country.lower()
    
    def _select_country(self, country):
        """–í—ã–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–∞–Ω—É"""
        self.textvariable.set(country)
        self.entry.delete(0, tk.END)
        self.entry.insert(0, country)
        if self.popup_window:
            self.popup_window.destroy()
        if self.on_select:
            self.on_select()
    
    def _toggle_favorite(self, country):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
        current_favorites = self.settings_manager.get_favorite_countries()
        
        if country in current_favorites:
            self.settings_manager.remove_favorite_country(country)
            self.favorites = self.settings_manager.get_favorite_countries()
        else:
            self.settings_manager.add_favorite_country(country)
            self.favorites = self.settings_manager.get_favorite_countries()
        
        self.update_dropdown_items()
    
    def _on_focus_out(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞"""
        if self.popup_window:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞ –Ω–∞—à–∏—Ö –ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞—Ö —Ñ–æ–∫—É—Å
            focused = self.popup_window.focus_get()
            if not focused or not (focused.winfo_toplevel() == self.popup_window):
                self.popup_window.destroy()
    
    def on_search_change(self, *args):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞"""
        if self.popup_window and self.popup_window.winfo_exists():
            self.update_dropdown_items()
            
    def set_value(self, value):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ"""
        self.entry.delete(0, tk.END)
        self.entry.insert(0, value)
        self.textvariable.set(value)


class ThemeHistoryCombobox(ttk.Frame):
    """–ö–æ–º–±–æ–±–æ–∫—Å —Å –∏—Å—Ç–æ—Ä–∏–µ–π –¥–ª—è —Ç–µ–º–∞—Ç–∏–∫"""
    
    def __init__(self, parent, textvariable=None):
        super().__init__(parent)
        
        self.textvariable = textvariable or tk.StringVar()
        self.history = []
        
        self.setup_ui()
    
    def setup_ui(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        # –û—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        self.entry = tk.Entry(
            self, 
            textvariable=self.textvariable,
            font=("Arial", 12),
            width=70
        )
        self.entry.pack(fill="x", ipady=3)
        
        # –ö–Ω–æ–ø–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
        self.history_btn = tk.Button(
            self,
            text="üìã",
            command=self.show_history,
            width=3,
            font=("Arial", 10)
        )
        self.history_btn.pack(side="right", padx=(5, 0))
    
    def set_history(self, history):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ç–µ–º–∞—Ç–∏–∫"""
        self.history = history
    
    def show_history(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ç–µ–º–∞—Ç–∏–∫"""
        if not self.history:
            messagebox.showinfo("–ò—Å—Ç–æ—Ä–∏—è", "–ò—Å—Ç–æ—Ä–∏—è —Ç–µ–º–∞—Ç–∏–∫ –ø—É—Å—Ç–∞")
            return
        
        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞
        history_window = tk.Toplevel(self)
        history_window.title("–ò—Å—Ç–æ—Ä–∏—è —Ç–µ–º–∞—Ç–∏–∫")
        history_window.geometry("400x300")
        history_window.transient(self)
        history_window.grab_set()
        
        # –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏
        listbox = tk.Listbox(history_window, font=("Arial", 10))
        listbox.pack(fill="both", expand=True, padx=10, pady=10)
        
        for theme in self.history:
            listbox.insert(tk.END, theme)
        
        # –ö–Ω–æ–ø–∫–∏
        btn_frame = tk.Frame(history_window)
        btn_frame.pack(fill="x", padx=10, pady=(0, 10))
        
        def select_theme():
            selection = listbox.curselection()
            if selection:
                selected_theme = listbox.get(selection[0])
                self.textvariable.set(selected_theme)
                history_window.destroy()
        
        select_btn = tk.Button(
            btn_frame,
            text="–í—ã–±—Ä–∞—Ç—å",
            command=select_theme,
            bg="#27ae60",
            fg="white",
            font=("Arial", 10, "bold")
        )
        select_btn.pack(side="right", padx=(5, 0))
        
        close_btn = tk.Button(
            btn_frame,
            text="–ó–∞–∫—Ä—ã—Ç—å",
            command=history_window.destroy,
            bg="#e74c3c",
            fg="white",
            font=("Arial", 10, "bold")
        )
        close_btn.pack(side="right")
        
        # –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
        listbox.bind("<Double-Button-1>", lambda e: select_theme())


class LandingPageGeneratorGUI:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –õ–µ–Ω–¥–∏–Ω–≥–æ–≤ v2.0")
        self.root.geometry("800x750")
        self.root.resizable(False, False)
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.city_generator = CityGenerator()
        self.cursor_manager = CursorManager()
        self.settings_manager = SettingsManager()
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.selected_country = tk.StringVar()
        self.theme_var = tk.StringVar()
        self.domain_var = tk.StringVar()
        self.save_path_var = tk.StringVar(value=self.settings_manager.get_save_path())
        self.current_city = ""
        self.current_prompt = self.settings_manager.get_prompt()
        
        # –û–∫–Ω–∞
        self.prompt_window = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.setup_ui()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        
    def setup_ui(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            print("üé® –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞...")
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            header = tk.Label(
                self.root, 
                text="üöÄ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –õ–µ–Ω–¥–∏–Ω–≥–æ–≤ v2.0 üöÄ", 
                font=("Arial", 12, "bold"), 
                bg="#2c3e50", 
                fg="white",
                pady=8
            )
            header.pack(fill="x")
            
            print("üñºÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–æ–π –æ–±–ª–∞—Å—Ç–∏...")
            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
            self.create_scrollable_frame()
            
            print("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –ø–∞–ø–∫–∏...")
            # –ë–ª–æ–∫ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            self.create_save_path_section()
            
            print("üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Ç–µ–º–∞—Ç–∏–∫–∏...")
            # –ë–ª–æ–∫ —Ç–µ–º–∞—Ç–∏–∫–∏
            self.create_theme_section()
            
            print("üåç –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Å—Ç—Ä–∞–Ω—ã...")
            # –ë–ª–æ–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã
            self.create_country_section()
            
            print("‚ÑπÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–µ–∫—Ü–∏–∏...")
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫
            self.create_info_section()
            
            print("üåê –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –¥–æ–º–µ–Ω–∞...")
            # –ë–ª–æ–∫ –¥–æ–º–µ–Ω–∞
            self.create_domain_section()
            
            print("‚ö° –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π...")
            # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            self.create_action_buttons()
            
            print("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞...")
            # –°—Ç–∞—Ç—É—Å
            self.create_status_section()
            
            print("‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
            import traceback
            traceback.print_exc()
            raise
        
    def create_scrollable_frame(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –æ–±–ª–∞—Å—Ç—å –±–µ–∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏"""
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –±–µ–∑ –æ—Ç—Å—Ç—É–ø–æ–≤
        main_container = tk.Frame(self.root, bg="#f0f0f0")
        main_container.pack(fill="both", expand=True)
        
        # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ –∫–∞–Ω–≤–∞—Å–∞ –∏ —Å–∫—Ä–æ–ª–ª–∞
        self.scrollable_frame = tk.Frame(main_container, bg="#f0f0f0")
        self.scrollable_frame.pack(fill="both", expand=True, padx=15, pady=10)
    
    def create_save_path_section(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        section = tk.LabelFrame(
            self.scrollable_frame, 
            text="üìÅ –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤", 
            font=("Arial", 9, "bold"),
            padx=8, 
            pady=5
        )
        section.pack(fill="x", pady=(0, 8), ipady=2)
        
        path_frame = tk.Frame(section)
        path_frame.pack(fill="x")
        
        # –ü–æ–ª–µ –ø—É—Ç–∏
        path_entry = tk.Entry(
            path_frame,
            textvariable=self.save_path_var,
            font=("Arial", 12),
            state="readonly"
        )
        path_entry.pack(side="left", fill="x", expand=True, padx=(0, 8), ipady=3)
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏
        browse_btn = tk.Button(
            path_frame,
            text="üìÇ –í—ã–±—Ä–∞—Ç—å",
            command=self.browse_save_path,
            bg="#3498db",
            fg="white",
            font=("Arial", 8, "bold"),
            padx=8,
            pady=3
        )
        browse_btn.pack(side="right", padx=(0, 3))
        
        # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞ —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª
        reset_btn = tk.Button(
            path_frame,
            text="üè† –†–∞–±–æ—á–∏–π —Å—Ç–æ–ª",
            command=self.reset_to_desktop,
            bg="#95a5a6",
            fg="white",
            font=("Arial", 12),
            padx=5,
            pady=3
        )
        reset_btn.pack(side="right")
    
    def create_theme_section(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Ç–µ–º–∞—Ç–∏–∫–∏"""
        section = tk.LabelFrame(
            self.scrollable_frame, 
            text="üéØ –¢–µ–º–∞—Ç–∏–∫–∞ –ª–µ–Ω–¥–∏–Ω–≥–∞", 
            font=("Arial", 9, "bold"),
            padx=8, 
            pady=5
        )
        section.pack(fill="x", pady=(0, 8), ipady=2)
        
        # –ö–æ–º–±–æ–±–æ–∫—Å —Å –∏—Å—Ç–æ—Ä–∏–µ–π
        self.theme_combo = ThemeHistoryCombobox(section, self.theme_var)
        self.theme_combo.pack(fill="x")
        self.theme_combo.set_history(self.settings_manager.get_theme_history())
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∏
        theme_hint = tk.Label(
            section,
            text="–ü—Ä–∏–º–µ—Ä—ã: –ü—Ä–æ–¥–∞–∂–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –¥–æ–º–æ–≤, –†–µ–º–æ–Ω—Ç –∫–≤–∞—Ä—Ç–∏—Ä",
            font=("Arial", 12),
            fg="#666",
            wraplength=600
        )
        theme_hint.pack(anchor="w", pady=(2, 0))
    
    def create_country_section(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã"""
        section = tk.LabelFrame(
            self.scrollable_frame, 
            text="üåç –°—Ç—Ä–∞–Ω–∞ –∏ –≥–æ—Ä–æ–¥", 
            font=("Arial", 9, "bold"),
            padx=8, 
            pady=5
        )
        section.pack(fill="x", pady=(0, 8), ipady=2)
        
        # –ö–æ–º–±–æ–±–æ–∫—Å —Å –ø–æ–∏—Å–∫–æ–º —Å—Ç—Ä–∞–Ω
        self.country_combo = CountrySearchCombobox(
            section,
            settings_manager=self.settings_manager,  # –ü–µ—Ä–µ–¥–∞–µ–º settings_manager
            textvariable=self.selected_country,
            on_select=self.on_country_select
        )
        self.country_combo.pack(fill="x")
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        instruction = tk.Label(
            section,
            text="üí° –ù–∞—á–Ω–∏—Ç–µ –ø–µ—á–∞—Ç–∞—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞. ‚≠ê –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.",
            font=("Arial", 12),
            fg="#666"
        )
        instruction.pack(anchor="w", pady=(2, 0))
    
    def create_info_section(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é —Å–µ–∫—Ü–∏—é"""
        section = tk.LabelFrame(
            self.scrollable_frame, 
            text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", 
            font=("Arial", 9, "bold"),
            padx=8, 
            pady=5
        )
        section.pack(fill="x", pady=(0, 8), ipady=2)
        
        self.language_label = tk.Label(
            section, 
            text="–Ø–∑—ã–∫: –Ω–µ –≤—ã–±—Ä–∞–Ω", 
            font=("Arial", 12), 
            fg="#666"
        )
        self.language_label.pack(anchor="w")
        
        self.city_label = tk.Label(
            section, 
            text="–ì–æ—Ä–æ–¥: –Ω–µ –≤—ã–±—Ä–∞–Ω", 
            font=("Arial", 12), 
            fg="#666"
        )
        self.city_label.pack(anchor="w")
        
        # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ–¥–∞
        city_btn = tk.Button(
            section, 
            text="üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä–æ–¥", 
            command=self.generate_new_city,
            bg="#f39c12", 
            fg="white",
            font=("Arial", 8, "bold"),
            padx=5,
            pady=2
        )
        city_btn.pack(anchor="w", pady=(3, 0))
    
    def create_domain_section(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –¥–æ–º–µ–Ω–∞"""
        section = tk.LabelFrame(
            self.scrollable_frame, 
            text="üåê –î–æ–º–µ–Ω", 
            font=("Arial", 9, "bold"),
            padx=8, 
            pady=5
        )
        section.pack(fill="x", pady=(0, 8), ipady=2)
        
        domain_entry = tk.Entry(
            section, 
            textvariable=self.domain_var, 
            font=("Arial", 12),
            width=60
        )
        domain_entry.pack(anchor="w", ipady=3)
    
    def create_action_buttons(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π"""
        section = tk.Frame(self.scrollable_frame)
        section.pack(fill="x", pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
        edit_btn = tk.Button(
            section,
            text="‚úèÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–º–ø—Ç",
            command=self.edit_prompt,
            bg="#9b59b6",
            fg="white",
            font=("Arial", 9, "bold"),
            padx=15,
            pady=5
        )
        edit_btn.pack(pady=(0, 8))
        
        # –ì–õ–ê–í–ù–ê–Ø –ö–ù–û–ü–ö–ê - –°–û–ó–î–ê–¢–¨ –õ–ï–ù–î–ò–ù–ì
        create_button = tk.Button(
            section,
            text="üöÄ –°–û–ó–î–ê–¢–¨ –õ–ï–ù–î–ò–ù–ì",
            command=self.create_landing,
            bg="#e74c3c",
            fg="white", 
            font=("Arial", 12, "bold"),
            padx=25,
            pady=10,
            relief="raised",
            bd=3,
            cursor="hand2"
        )
        create_button.pack()
    
    def create_status_section(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å—Ç–∞—Ç—É—Å–∞"""
        self.status_label = tk.Label(
            self.scrollable_frame, 
            text="‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", 
            font=("Arial", 12), 
            fg="#27ae60"
        )
        self.status_label.pack(pady=(8, 0))
    
    def browse_save_path(self):
        """–í—ã–±–æ—Ä –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        folder = filedialog.askdirectory(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤",
            initialdir=self.save_path_var.get()
        )
        if folder:
            self.save_path_var.set(folder)
            self.settings_manager.set_save_path(folder)
    
    def reset_to_desktop(self):
        """–°–±—Ä–æ—Å –Ω–∞ —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª"""
        desktop = str(get_desktop_path())
        self.save_path_var.set(desktop)
        self.settings_manager.set_save_path(desktop)
    
    def on_country_select(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã"""
        country = self.selected_country.get()
        if country:
            language = get_language_by_country(country)
            self.language_label.config(text=f"–Ø–∑—ã–∫: {language}", fg="#27ae60")
            self.generate_new_city()
            
    def generate_new_city(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥"""
        country = self.selected_country.get()
        if not country:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É!")
            return
            
        new_city = self.city_generator.get_random_city(country)
        self.current_city = new_city
        self.city_label.config(text=f"–ì–æ—Ä–æ–¥: {new_city}", fg="#27ae60")
    
    def edit_prompt(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã)
            theme = self.theme_var.get().strip() or "–ü—Ä–æ–¥–∞–∂–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"
            country = self.selected_country.get() or "–†–æ—Å—Å–∏—è"
            domain = self.domain_var.get().strip() or "example"
            city = self.current_city or "–ú–æ—Å–∫–≤–∞"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ
            if not self.current_prompt:
                language = get_language_by_country(country)
                self.current_prompt = create_landing_prompt(country, city, language, domain, theme)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä
            edited_prompt = open_text_editor(self.current_prompt)
            if edited_prompt is not None:  # None –æ–∑–Ω–∞—á–∞–µ—Ç –æ—Ç–º–µ–Ω—É
                self.current_prompt = edited_prompt
                self.settings_manager.save_prompt(edited_prompt)
                messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", "–ü—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç: {e}")
    
    def validate_form(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º—ã"""
        theme = self.theme_var.get().strip()
        if not theme:
            return False, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É –ª–µ–Ω–¥–∏–Ω–≥–∞!"
            
        if not self.selected_country.get():
            return False, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É!"
            
        domain = self.domain_var.get().strip()
        is_valid, error_msg = validate_domain(domain)
        if not is_valid:
            return False, error_msg
            
        if not self.current_city:
            return False, "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –≥–æ—Ä–æ–¥!"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
        save_path = self.save_path_var.get()
        if not Path(save_path).exists():
            return False, f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {save_path}"
            
        return True, ""
        
    def create_landing(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–µ–Ω–¥–∏–Ω–≥–∞"""
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        is_valid, error_msg = self.validate_form()
        if not is_valid:
            messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º–∞—Ç–∏–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é
        theme = self.theme_var.get().strip()
        self.settings_manager.add_theme_to_history(theme)
        self.theme_combo.set_history(self.settings_manager.get_theme_history())
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        country = self.selected_country.get()
        domain = self.domain_var.get().strip()
        save_path = self.save_path_var.get()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
        exists, full_path = check_directory_exists(save_path, domain)
        if exists:
            result = messagebox.askyesno(
                "–ü–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                f"–ü–∞–ø–∫–∞ '{domain}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤:\n{save_path}\n\n"
                f"–•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ?"
            )
            if not result:
                return
        
        result = messagebox.askyesno(
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
            f"–°–æ–∑–¥–∞—Ç—å –ª–µ–Ω–¥–∏–Ω–≥:\n\n"
            f"–¢–µ–º–∞—Ç–∏–∫–∞: {theme}\n"
            f"–°—Ç—Ä–∞–Ω–∞: {country}\n"
            f"–ì–æ—Ä–æ–¥: {self.current_city}\n"
            f"–î–æ–º–µ–Ω: {domain}\n"
            f"–ü–∞–ø–∫–∞: {save_path}\n\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
        )
        if not result:
            return
            
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=self._create_landing_process, daemon=True).start()
    
    def _create_landing_process(self):
        """–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ª–µ–Ω–¥–∏–Ω–≥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            theme = self.theme_var.get().strip()
            country = self.selected_country.get()
            language = get_language_by_country(country)
            domain = self.domain_var.get().strip()
            city = self.current_city
            save_path = self.save_path_var.get()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            self.update_status("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫...")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
            project_path, media_path = self.cursor_manager.create_project_structure(
                domain, save_path
            )
            
            self.update_status("üìÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
            if self.current_prompt:
                full_prompt = self.current_prompt
            else:
                base_prompt = create_landing_prompt(country, city, language, domain, theme)
                full_prompt = base_prompt
            
            self.update_status("üöÄ –ó–∞–ø—É—Å–∫ Cursor AI...")
            
            # –ó–∞–ø—É—Å–∫ Cursor AI
            success, message = self.cursor_manager.open_project_and_paste_prompt(
                project_path, full_prompt, self.root, auto_paste=True, paste_delay=5
            )
            
            if success:
                self.update_status("‚úÖ –ì–æ—Ç–æ–≤–æ! Cursor AI –∑–∞–ø—É—â–µ–Ω")
                messagebox.showinfo(
                    "–£—Å–ø–µ—Ö!", 
                    f"–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
                    f"–ü–∞–ø–∫–∞: {project_path}\n"
                    f"Cursor AI –∑–∞–ø—É—â–µ–Ω —Å –≥–æ—Ç–æ–≤—ã–º –ø—Ä–æ–º–ø—Ç–æ–º.\n\n"
                    f"–ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç –Ω–µ –≤—Å—Ç–∞–≤–∏–ª—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏,\n"
                    f"–Ω–∞–∂–º–∏—Ç–µ Ctrl+V –≤ Cursor AI"
                )
            else:
                self.update_status("‚ö†Ô∏è Cursor –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–º–ø—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω")
                messagebox.showwarning(
                    "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                    f"–ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: {project_path}\n\n"
                    f"Cursor AI –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –ø—Ä–æ–º–ø—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.\n"
                    f"–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –≤ Cursor –≤—Ä—É—á–Ω—É—é –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–æ–º–ø—Ç."
                )
                
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞: {str(e)}"
            print(error_msg)
            self.update_status(f"‚ùå {error_msg}")
            messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
    
    def update_status(self, text):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å"""
        self.status_label.config(text=text)
        self.root.update()
    
    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        self.settings_manager.save_settings()
        self.root.destroy()
        
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        self.root.mainloop()