# -*- coding: utf-8 -*-

"""
GUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ª–µ–Ω–¥–∏–Ω–≥–æ–≤
"""

import tkinter as tk
from tkinter import ttk, messagebox
import threading

from data import COUNTRIES_DATA, THEME_COLORS
from utils import CityGenerator, validate_domain, format_status_message, get_language_by_country
from cursor_manager import CursorManager
from prompt_generator import create_landing_prompt, get_theme_specific_instructions


class LandingPageGeneratorGUI:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –õ–µ–Ω–¥–∏–Ω–≥–æ–≤")
        self.root.geometry("800x700")
        self.root.resizable(True, True)
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.city_generator = CityGenerator()
        self.cursor_manager = CursorManager()
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.selected_country = tk.StringVar()
        self.theme_var = tk.StringVar()
        self.domain_var = tk.StringVar()
        self.current_city = ""
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.setup_ui()
        
    def setup_ui(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = tk.Label(
            self.root, 
            text="üöÄ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –õ–µ–Ω–¥–∏–Ω–≥–æ–≤ üöÄ", 
            font=("Arial", 16, "bold"), 
            bg="#2c3e50", 
            fg="white",
            pady=15
        )
        header.pack(fill="x")
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        main_frame = tk.Frame(self.root)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # –¢–µ–º–∞—Ç–∏–∫–∞
        tk.Label(main_frame, text="–¢–µ–º–∞—Ç–∏–∫–∞ –ª–µ–Ω–¥–∏–Ω–≥–∞:", font=("Arial", 12, "bold")).pack(anchor="w", pady=(0,5))
        theme_entry = tk.Entry(
            main_frame, 
            textvariable=self.theme_var,
            font=("Arial", 11),
            width=60
        )
        theme_entry.pack(fill="x", pady=(0,5))
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Ç–µ–º–∞—Ç–∏–∫–∏
        theme_hint = tk.Label(
            main_frame,
            text="–ü—Ä–∏–º–µ—Ä—ã: –ü—Ä–æ–¥–∞–∂–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –¥–æ–º–æ–≤, –†–µ–º–æ–Ω—Ç –∫–≤–∞—Ä—Ç–∏—Ä, –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å, –ó–∞–≥–æ—Ä–æ–¥–Ω–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å",
            font=("Arial", 9),
            fg="#666",
            wraplength=700
        )
        theme_hint.pack(anchor="w", pady=(0,15))
        
        # –°—Ç—Ä–∞–Ω–∞
        tk.Label(main_frame, text="–°—Ç—Ä–∞–Ω–∞:", font=("Arial", 12, "bold")).pack(anchor="w", pady=(0,5))
        country_combo = ttk.Combobox(
            main_frame, 
            textvariable=self.selected_country,
            values=list(COUNTRIES_DATA.keys()),
            state="readonly", 
            font=("Arial", 11),
            width=30
        )
        country_combo.pack(anchor="w", pady=(0,15))
        country_combo.bind("<<ComboboxSelected>>", self.on_country_select)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_frame = tk.Frame(main_frame)
        info_frame.pack(fill="x", pady=(0,15))
        
        self.language_label = tk.Label(info_frame, text="–Ø–∑—ã–∫: –Ω–µ –≤—ã–±—Ä–∞–Ω", font=("Arial", 11), fg="#666")
        self.language_label.pack(anchor="w")
        
        self.city_label = tk.Label(info_frame, text="–ì–æ—Ä–æ–¥: –Ω–µ –≤—ã–±—Ä–∞–Ω", font=("Arial", 11), fg="#666")
        self.city_label.pack(anchor="w")
        
        # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ–¥–∞
        city_btn = tk.Button(
            info_frame, 
            text="üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä–æ–¥", 
            command=self.generate_new_city,
            bg="#f39c12", 
            fg="white",
            font=("Arial", 10, "bold")
        )
        city_btn.pack(anchor="w", pady=(5,0))
        
        # –î–æ–º–µ–Ω
        tk.Label(main_frame, text="–î–æ–º–µ–Ω:", font=("Arial", 12, "bold")).pack(anchor="w", pady=(15,5))
        domain_entry = tk.Entry(
            main_frame, 
            textvariable=self.domain_var, 
            font=("Arial", 12),
            width=40
        )
        domain_entry.pack(anchor="w", pady=(0,20))
        
        # –ì–õ–ê–í–ù–ê–Ø –ö–ù–û–ü–ö–ê - –°–ê–ú–ê–Ø –ë–û–õ–¨–®–ê–Ø –ò –ó–ê–ú–ï–¢–ù–ê–Ø
        create_button = tk.Button(
            main_frame,
            text="üöÄ –°–û–ó–î–ê–¢–¨ –õ–ï–ù–î–ò–ù–ì",
            command=self.create_landing,
            bg="#e74c3c",
            fg="white", 
            font=("Arial", 18, "bold"),
            padx=50,
            pady=20,
            relief="raised",
            bd=5,
            cursor="hand2"
        )
        create_button.pack(pady=30)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = tk.Label(
            main_frame, 
            text="‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", 
            font=("Arial", 10), 
            fg="#27ae60"
        )
        self.status_label.pack(pady=(20,0))
        
    def on_country_select(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã"""
        country = self.selected_country.get()
        if country:
            language = get_language_by_country(country)
            self.language_label.config(text=f"–Ø–∑—ã–∫: {language}", fg="#27ae60")
            self.generate_new_city()
            
    def generate_new_city(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥"""
        country = self.selected_country.get()
        if not country:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É!")
            return
            
        new_city = self.city_generator.get_random_city(country)
        self.current_city = new_city
        self.city_label.config(text=f"–ì–æ—Ä–æ–¥: {new_city}", fg="#27ae60")
        
    def validate_form(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º—ã"""
        theme = self.theme_var.get().strip()
        if not theme:
            return False, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É –ª–µ–Ω–¥–∏–Ω–≥–∞!"
            
        if not self.selected_country.get():
            return False, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É!"
            
        domain = self.domain_var.get().strip()
        is_valid, error_msg = validate_domain(domain)
        if not is_valid:
            return False, error_msg
            
        if not self.current_city:
            return False, "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –≥–æ—Ä–æ–¥!"
            
        return True, ""
        
    def create_landing(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–µ–Ω–¥–∏–Ω–≥–∞"""
        print("–ö–ù–û–ü–ö–ê –ù–ê–ñ–ê–¢–ê!")  # –û—Ç–ª–∞–¥–∫–∞
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        is_valid, error_msg = self.validate_form()
        if not is_valid:
            messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
            return
            
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        theme = self.theme_var.get().strip()
        country = self.selected_country.get()
        domain = self.domain_var.get().strip()
        
        result = messagebox.askyesno(
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
            f"–°–æ–∑–¥–∞—Ç—å –ª–µ–Ω–¥–∏–Ω–≥:\n\n"
            f"–¢–µ–º–∞—Ç–∏–∫–∞: {theme}\n"
            f"–°—Ç—Ä–∞–Ω–∞: {country}\n"
            f"–ì–æ—Ä–æ–¥: {self.current_city}\n"
            f"–î–æ–º–µ–Ω: {domain}\n\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
        )
        if not result:
            return
            
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=self._create_landing_process, daemon=True).start()
        
    def _create_landing_process(self):
        """–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ª–µ–Ω–¥–∏–Ω–≥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            theme = self.theme_var.get().strip()
            country = self.selected_country.get()
            language = get_language_by_country(country)
            domain = self.domain_var.get().strip()
            city = self.current_city
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            self.update_status("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫...")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
            project_path, media_path = self.cursor_manager.create_project_structure(domain)
            
            self.update_status("üìÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞...")
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞
            base_prompt = create_landing_prompt(country, city, language, domain, theme)
            theme_instructions = get_theme_specific_instructions(theme)
            full_prompt = base_prompt + theme_instructions
            
            self.update_status("üöÄ –ó–∞–ø—É—Å–∫ Cursor AI...")
            
            # –ó–∞–ø—É—Å–∫ Cursor AI
            success, message = self.cursor_manager.open_project_and_paste_prompt(
                project_path, full_prompt, self.root, auto_paste=True, paste_delay=5
            )
            
            if success:
                self.update_status("‚úÖ –ì–æ—Ç–æ–≤–æ! Cursor AI –∑–∞–ø—É—â–µ–Ω")
                messagebox.showinfo(
                    "–£—Å–ø–µ—Ö!", 
                    f"–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
                    f"–ü–∞–ø–∫–∞: {project_path}\n"
                    f"Cursor AI –∑–∞–ø—É—â–µ–Ω —Å –≥–æ—Ç–æ–≤—ã–º –ø—Ä–æ–º–ø—Ç–æ–º.\n\n"
                    f"–ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç –Ω–µ –≤—Å—Ç–∞–≤–∏–ª—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏,\n"
                    f"–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+V –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏."
                )
            else:
                self.update_status(f"‚ö†Ô∏è {message}")
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", message)
                
        except Exception as e:
            error_msg = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
            self.update_status(f"‚ùå {error_msg}")
            messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
            
    def update_status(self, text):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É"""
        self.root.after(0, lambda: self.status_label.config(text=text))
        
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        print("–ó–∞–ø—É—Å–∫ GUI...")
        self.root.mainloop()
        print("GUI –∑–∞–≤–µ—Ä—à–µ–Ω")