# -*- coding: utf-8 -*-

"""
–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ñ–∞–≤–∏–∫–æ–Ω–æ–≤ 2024
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª—É—á—à–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ AI –º–µ—Ç–æ–¥—ã –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞
"""

import os
import sys
import io
import time
import tempfile
import requests
import uuid
from pathlib import Path
from PIL import Image, ImageFilter, ImageEnhance, ImageOps
from io import BytesIO

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
try:
    import rembg
    REMBG_AVAILABLE = True
    print("‚úÖ rembg –¥–æ—Å—Ç—É–ø–µ–Ω - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω AI –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞")
except ImportError:
    REMBG_AVAILABLE = False
    print("‚ö†Ô∏è rembg –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –±–∞–∑–æ–≤—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã")

try:
    import cv2
    import numpy as np
    OPENCV_AVAILABLE = True
except ImportError:
    OPENCV_AVAILABLE = False
    cv2 = None
    np = None

class ModernFaviconGenerator:
    """
    –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ñ–∞–≤–∏–∫–æ–Ω–æ–≤ —Å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º —Ñ–æ–Ω–∞
    
    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - AI —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ —Å rembg (–Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–¥–µ–ª–µ–π)
    - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    - –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Å—Ç–∏–ª—è
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    """
    
    def __init__(self, silent_mode=False):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        
        Args:
            silent_mode (bool): –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º –±–µ–∑ –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        self.silent_mode = silent_mode
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º rembg —Å–µ—Å—Å–∏–∏ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        self.rembg_sessions = {}
        if REMBG_AVAILABLE:
            self._init_rembg_sessions()
        
        if not self.silent_mode:
            print("üöÄ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ñ–∞–≤–∏–∫–æ–Ω–æ–≤ 2024")
            print("=" * 50)
            if REMBG_AVAILABLE:
                print("ü§ñ AI —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞: –î–û–°–¢–£–ü–ù–û")
            else:
                print("üîß –ë–∞–∑–æ–≤—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã: –ê–ö–¢–ò–í–ù–´")
    
    def _init_rembg_sessions(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–æ–¥–µ–ª–∏ rembg –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        try:
            # u2net - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å, —Ö–æ—Ä–æ—à–æ –¥–ª—è –æ–±—â–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            self.rembg_sessions['u2net'] = rembg.new_session('u2net')
            
            # silueta - —Ö–æ—Ä–æ—à–æ –¥–ª—è —Å–∏–ª—É—ç—Ç–æ–≤ –∏ –ø—Ä–æ—Å—Ç—ã—Ö —Ñ–æ—Ä–º (–∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤)
            self.rembg_sessions['silueta'] = rembg.new_session('silueta')
            
            if not self.silent_mode:
                print("üéØ –ó–∞–≥—Ä—É–∂–µ–Ω—ã AI –º–æ–¥–µ–ª–∏: u2net, silueta")
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ rembg: {e}")
            self.rembg_sessions = {}
    
    def generate_favicon_from_prompt(self, prompt, output_path, size=512, style="modern_flat"):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∞–≤–∏–∫–æ–Ω–∫—É –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        
        Args:
            prompt (str): –û–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏
            output_path (str): –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            size (int): –†–∞–∑–º–µ—Ä —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 512)
            style (str): –°—Ç–∏–ª—å —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            if not self.silent_mode:
                print(f"\nüé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏: {prompt}")
                print(f"üìê –†–∞–∑–º–µ—Ä: {size}x{size}")
                print(f"üé≠ –°—Ç–∏–ª—å: {style}")
            
            # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏
            optimized_prompt = self._create_favicon_prompt(prompt, style)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            base_image = self._generate_base_image(optimized_prompt, size)
            
            if not base_image:
                if not self.silent_mode:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                return False
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞
            transparent_image = self._advanced_background_removal(base_image, style)
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
            optimized_image = self._optimize_favicon_quality(transparent_image, size)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º —Å–∂–∞—Ç–∏–µ–º
            success = self._save_optimized_favicon(optimized_image, output_path)
            
            if success and not self.silent_mode:
                file_size = os.path.getsize(output_path)
                print(f"‚úÖ –§–∞–≤–∏–∫–æ–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {output_path}")
                print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:,} –±–∞–π—Ç ({file_size/1024:.1f} –ö–ë)")
            
            return success
            
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏: {e}")
            return False
    
    def _create_favicon_prompt(self, prompt, style):
        """–°–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏"""
        style_prompts = {
            "modern_flat": "flat design, minimalist icon, simple geometric shapes, clean lines, modern style",
            "gradient": "gradient colors, modern icon, smooth transitions, professional design",
            "outline": "outline style, line art, minimal design, vector illustration",
            "filled": "solid colors, filled shapes, bold design, strong contrast",
            "abstract": "abstract geometric, creative design, artistic icon, unique pattern",
            "corporate": "professional logo, business style, corporate identity, clean design"
        }
        
        base_style = style_prompts.get(style, style_prompts["modern_flat"])
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏ –ë–ï–ó –¢–ï–ö–°–¢–ê
        favicon_prompt = (
            f"{prompt}, {base_style}, "
            "simple composition, centered design, clear background, "
            "high contrast, scalable design, vector style, professional quality, "
            "clean edges, optimized for small sizes, transparent background, "
            "PNG format, isolated object, NO TEXT, NO LETTERS, NO WORDS, "
            "symmetrical layout, bold colors, crisp details, symbol only, "
            "graphic element, visual icon without text, pure visual design"
        )
        
        return favicon_prompt
    
    def _generate_base_image(self, prompt, size):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Pollinations AI —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            enhanced_prompt = f"{prompt}, high quality, sharp details, professional design"
            
            import urllib.parse
            encoded_prompt = urllib.parse.quote(enhanced_prompt)
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–∞–≤–∏–∫–æ–Ω–æ–∫
            params = (
                f"?width={size}&height={size}&model=flux&enhance=true&nologo=true"
                "&style=digital-art&quality=high"
            )
            
            image_url = f"https://image.pollinations.ai/prompt/{encoded_prompt}{params}"
            
            if not self.silent_mode:
                print("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            
            response = requests.get(image_url, timeout=120)
            
            if response.status_code == 200:
                image = Image.open(BytesIO(response.content))
                
                # –£–±–µ–∂–¥–∞–µ–º—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ
                if image.size != (size, size):
                    image = image.resize((size, size), Image.Resampling.LANCZOS)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGBA –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
                if image.mode != 'RGBA':
                    image = image.convert('RGBA')
                
                return image
            else:
                if not self.silent_mode:
                    print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                return None
                
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            return None
    
    def _advanced_background_removal(self, image, style):
        """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤"""
        try:
            if not self.silent_mode:
                print("ü§ñ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ AI —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞...")
            
            # –ú–µ—Ç–æ–¥ 1: rembg AI (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π)
            if REMBG_AVAILABLE and self.rembg_sessions:
                ai_result = self._rembg_removal(image, style)
                if ai_result:
                    if not self.silent_mode:
                        print("‚úÖ AI —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    return ai_result
            
            # –ú–µ—Ç–æ–¥ 2: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–∞–µ–≤ –∏ —Ü–≤–µ—Ç–æ–≤
            advanced_result = self._advanced_edge_color_removal(image)
            if advanced_result:
                if not self.silent_mode:
                    print("‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–∏–º–µ–Ω–µ–Ω")
                return advanced_result
            
            # –ú–µ—Ç–æ–¥ 3: –ë–∞–∑–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º (fallback)
            if not self.silent_mode:
                print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞")
            return self._basic_smart_removal(image)
            
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞: {e}")
            return image
    
    def _rembg_removal(self, image, style):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ —Å –ø–æ–º–æ—â—å—é rembg AI"""
        try:
            # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –º–æ–¥–µ–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∏–ª—è
            if style in ["outline", "abstract", "modern_flat"]:
                model_name = 'silueta'  # –õ—É—á—à–µ –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Ñ–æ—Ä–º
            else:
                model_name = 'u2net'    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å
            
            session = self.rembg_sessions.get(model_name)
            if not session:
                session = self.rembg_sessions.get('u2net')  # Fallback
            
            if not session:
                return None
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PIL –≤ –±–∞–π—Ç—ã
            img_byte_arr = io.BytesIO()
            image.save(img_byte_arr, format='PNG')
            img_byte_arr.seek(0)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º rembg
            output = rembg.remove(img_byte_arr.getvalue(), session=session)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ PIL
            result_image = Image.open(io.BytesIO(output))
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç RGBA
            if result_image.mode != 'RGBA':
                result_image = result_image.convert('RGBA')
            
            return result_image
            
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ rembg: {e}")
            return None
    
    def _advanced_edge_color_removal(self, image):
        """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—Ä–∞–µ–≤ –∏ —Ü–≤–µ—Ç–æ–≤"""
        try:
            width, height = image.size
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∫—Ä–∞—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            edge_pixels = []
            
            # –°–æ–±–∏—Ä–∞–µ–º –ø–∏–∫—Å–µ–ª–∏ —Å –∫—Ä–∞–µ–≤ (–±–æ–ª—å—à–µ —Ç–æ—á–µ–∫ –≤—ã–±–æ—Ä–∫–∏)
            edge_thickness = max(2, min(width, height) // 50)
            
            for thickness in range(edge_thickness):
                # –í–µ—Ä—Ö–Ω–∏–π –∏ –Ω–∏–∂–Ω–∏–π –∫—Ä–∞—è
                for x in range(width):
                    if thickness < height:
                        edge_pixels.append(image.getpixel((x, thickness)))
                        edge_pixels.append(image.getpixel((x, height - 1 - thickness)))
                
                # –õ–µ–≤—ã–π –∏ –ø—Ä–∞–≤—ã–π –∫—Ä–∞—è
                for y in range(height):
                    if thickness < width:
                        edge_pixels.append(image.getpixel((thickness, y)))
                        edge_pixels.append(image.getpixel((width - 1 - thickness, y)))
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É–≥–ª—ã –æ—Ç–¥–µ–ª—å–Ω–æ (–æ–Ω–∏ —á–∞—Å—Ç–æ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ñ–æ–Ω)
            corner_pixels = [
                image.getpixel((0, 0)),
                image.getpixel((width-1, 0)),
                image.getpixel((0, height-1)),
                image.getpixel((width-1, height-1))
            ]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
            bg_color = self._smart_background_detection(edge_pixels + corner_pixels)
            
            if not bg_color:
                return None
            
            # –°–æ–∑–¥–∞–µ–º —É–º–Ω—É—é –º–∞—Å–∫—É
            mask = self._create_smart_mask(image, bg_color)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É
            result = image.copy()
            result.putalpha(mask)
            
            return result
            
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞: {e}")
            return None
    
    def _smart_background_detection(self, pixels):
        """–£–º–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞"""
        try:
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–≤–µ—Ç–ª—ã–µ –ø–∏–∫—Å–µ–ª–∏ (–≤–æ–∑–º–æ–∂–Ω—ã–π —Ñ–æ–Ω)
            light_pixels = []
            for pixel in pixels:
                if len(pixel) >= 3:
                    r, g, b = pixel[0], pixel[1], pixel[2]
                    brightness = (r + g + b) / 3
                    
                    # –†–∞—Å—à–∏—Ä–∏–ª–∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                    if brightness > 200:  # –°–≤–µ—Ç–ª—ã–µ –ø–∏–∫—Å–µ–ª–∏
                        light_pixels.append((r, g, b))
            
            if not light_pixels:
                # –ï—Å–ª–∏ —Å–≤–µ—Ç–ª—ã—Ö –Ω–µ—Ç, –∏—â–µ–º —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö
                all_colors = []
                for pixel in pixels:
                    if len(pixel) >= 3:
                        all_colors.append((pixel[0], pixel[1], pixel[2]))
                
                if not all_colors:
                    return None
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—ã–π —á–∞—Å—Ç—ã–π —Ü–≤–µ—Ç
                return self._find_most_frequent_color(all_colors)
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ—Ö–æ–∂–∏–µ —Å–≤–µ—Ç–ª—ã–µ —Ü–≤–µ—Ç–∞
            color_groups = {}
            tolerance = 20
            
            for color in light_pixels:
                found_group = False
                for group_color in color_groups:
                    if self._color_distance(color, group_color) <= tolerance:
                        color_groups[group_color].append(color)
                        found_group = True
                        break
                
                if not found_group:
                    color_groups[color] = [color]
            
            if not color_groups:
                return None
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é –±–æ–ª—å—à—É—é –≥—Ä—É–ø–ø—É
            largest_group = max(color_groups.values(), key=len)
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ü–≤–µ—Ç –≤ –≥—Ä—É–ø–ø–µ
            avg_r = sum(c[0] for c in largest_group) // len(largest_group)
            avg_g = sum(c[1] for c in largest_group) // len(largest_group)
            avg_b = sum(c[2] for c in largest_group) // len(largest_group)
            
            return (avg_r, avg_g, avg_b)
            
        except Exception as e:
            return None
    
    def _color_distance(self, color1, color2):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ü–≤–µ—Ç–∞–º–∏"""
        return ((color1[0] - color2[0]) ** 2 + 
                (color1[1] - color2[1]) ** 2 + 
                (color1[2] - color2[2]) ** 2) ** 0.5
    
    def _find_most_frequent_color(self, colors):
        """–ù–∞—Ö–æ–¥–∏—Ç —Å–∞–º—ã–π —á–∞—Å—Ç—ã–π —Ü–≤–µ—Ç"""
        color_counts = {}
        tolerance = 15
        
        for color in colors:
            found = False
            for existing_color in color_counts:
                if self._color_distance(color, existing_color) <= tolerance:
                    color_counts[existing_color] += 1
                    found = True
                    break
            
            if not found:
                color_counts[color] = 1
        
        if not color_counts:
            return None
        
        return max(color_counts.keys(), key=lambda k: color_counts[k])
    
    def _create_smart_mask(self, image, bg_color):
        """–°–æ–∑–¥–∞–µ—Ç —É–º–Ω—É—é –º–∞—Å–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞"""
        try:
            width, height = image.size
            mask = Image.new('L', (width, height), 255)
            
            # –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Å–∫–∏
            tolerance = 35  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å
            
            for y in range(height):
                for x in range(width):
                    pixel = image.getpixel((x, y))
                    
                    if len(pixel) >= 3:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞
                        distance = self._color_distance(pixel[:3], bg_color)
                        
                        if distance <= tolerance:
                            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç
                            if self._is_likely_background(image, x, y, bg_color):
                                mask.putpixel((x, y), 0)  # –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
            mask = self._smooth_mask(mask)
            
            return mask
            
        except Exception as e:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω—É—é –º–∞—Å–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return Image.new('L', image.size, 255)
    
    def _is_likely_background(self, image, x, y, bg_color, radius=2):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∏–∫—Å–µ–ª—å —á–∞—Å—Ç—å—é —Ñ–æ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        try:
            width, height = image.size
            bg_count = 0
            total_count = 0
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏ –ø–∏–∫—Å–µ–ª—è
            for dy in range(-radius, radius + 1):
                for dx in range(-radius, radius + 1):
                    nx, ny = x + dx, y + dy
                    
                    if 0 <= nx < width and 0 <= ny < height:
                        neighbor = image.getpixel((nx, ny))
                        if len(neighbor) >= 3:
                            distance = self._color_distance(neighbor[:3], bg_color)
                            if distance <= 25:
                                bg_count += 1
                            total_count += 1
            
            if total_count == 0:
                return False
            
            # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 60% —Å–æ—Å–µ–¥–µ–π –ø–æ—Ö–æ–∂–∏ –Ω–∞ —Ñ–æ–Ω, —Å—á–∏—Ç–∞–µ–º –ø–∏–∫—Å–µ–ª—å —Ñ–æ–Ω–æ–≤—ã–º
            return (bg_count / total_count) > 0.6
            
        except Exception as e:
            return False
    
    def _smooth_mask(self, mask):
        """–°–≥–ª–∞–∂–∏–≤–∞–µ—Ç –º–∞—Å–∫—É –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞"""
        try:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–∑–º—ã—Ç–∏–µ –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è –∫—Ä–∞–µ–≤
            smoothed = mask.filter(ImageFilter.GaussianBlur(radius=1))
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ OpenCV –¥–æ—Å—Ç—É–ø–µ–Ω
            if OPENCV_AVAILABLE:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy
                mask_array = np.array(smoothed)
                
                # –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥—ã—Ä
                kernel = np.ones((3, 3), np.uint8)
                closed = cv2.morphologyEx(mask_array, cv2.MORPH_CLOSE, kernel)
                
                # –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —à—É–º–∞
                opened = cv2.morphologyEx(closed, cv2.MORPH_OPEN, kernel)
                
                return Image.fromarray(opened, mode='L')
            
            return smoothed
            
        except Exception as e:
            return mask
    
    def _basic_smart_removal(self, image):
        """–ë–∞–∑–æ–≤—ã–π, –Ω–æ —É–º–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞"""
        try:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
            enhanced = ImageEnhance.Contrast(image).enhance(1.2)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—Ä–∞—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞
            width, height = image.size
            edge_samples = []
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–∑—Ü–æ–≤ —Å –∫—Ä–∞–µ–≤
            sample_step = max(1, min(width, height) // 20)
            
            for i in range(0, width, sample_step):
                edge_samples.append(enhanced.getpixel((i, 0)))
                edge_samples.append(enhanced.getpixel((i, height-1)))
            
            for i in range(0, height, sample_step):
                edge_samples.append(enhanced.getpixel((0, i)))
                edge_samples.append(enhanced.getpixel((width-1, i)))
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ–Ω
            bg_color = self._smart_background_detection(edge_samples)
            
            if not bg_color:
                return image
            
            # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É
            mask = self._create_smart_mask(enhanced, bg_color)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            result = image.copy()
            result.putalpha(mask)
            
            return result
            
        except Exception as e:
            return image
    
    def _optimize_favicon_quality(self, image, target_size):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏"""
        try:
            # –£–±–µ–∂–¥–∞–µ–º—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ
            if image.size != (target_size, target_size):
                image = image.resize((target_size, target_size), Image.Resampling.LANCZOS)
            
            # –ü–æ–≤—ã—à–∞–µ–º —Ä–µ–∑–∫–æ—Å—Ç—å –¥–ª—è –º–µ–ª–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π
            enhancer = ImageEnhance.Sharpness(image)
            image = enhancer.enhance(1.3)
            
            # –°–ª–µ–≥–∫–∞ –ø–æ–≤—ã—à–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å
            enhancer = ImageEnhance.Contrast(image)
            image = enhancer.enhance(1.15)
            
            # –£–ª—É—á—à–∞–µ–º –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –±–æ–ª–µ–µ —è—Ä–∫–∏—Ö —Ü–≤–µ—Ç–æ–≤
            enhancer = ImageEnhance.Color(image)
            image = enhancer.enhance(1.1)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–µ–≥–∫–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            image = image.filter(ImageFilter.SMOOTH_MORE)
            
            return image
            
        except Exception as e:
            return image
    
    def _save_optimized_favicon(self, image, output_path, target_size_kb=50):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–≤–∏–∫–æ–Ω–∫—É —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º —Å–∂–∞—Ç–∏–µ–º"""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            os.makedirs(os.path.dirname(output_path), exist_ok=True)
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
            optimized = self._optimize_transparency(image)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            for optimize_level in [True, False]:
                try:
                    optimized.save(
                        output_path,
                        format='PNG',
                        optimize=optimize_level,
                        compress_level=9
                    )
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                    file_size = os.path.getsize(output_path)
                    if file_size <= target_size_kb * 1024:
                        return True
                    
                except Exception as e:
                    continue
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            optimized.save(output_path, format='PNG')
            return True
            
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False
    
    def _optimize_transparency(self, image):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞"""
        try:
            if image.mode != 'RGBA':
                return image
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª
            alpha = image.split()[-1]
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è —á–µ—Ç–∫–æ–π –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
            alpha = alpha.point(lambda x: 0 if x < 128 else 255)
            
            # –°–æ–±–∏—Ä–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ
            rgb = image.convert('RGB')
            result = Image.merge('RGBA', rgb.split() + (alpha,))
            
            return result
            
        except Exception as e:
            return image
    
    def create_favicon_variants(self, base_prompt, output_dir, count=5):
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–≥–æ
        
        Args:
            base_prompt (str): –ë–∞–∑–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            output_dir (str): –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            count (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Å–æ–∑–¥–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
        """
        try:
            os.makedirs(output_dir, exist_ok=True)
            created_files = []
            
            styles = ["modern_flat", "gradient", "outline", "filled", "abstract"]
            
            if not self.silent_mode:
                print(f"\nüé® –°–æ–∑–¥–∞–Ω–∏–µ {count} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏...")
            
            for i in range(count):
                style = styles[i % len(styles)]
                filename = f"favicon_variant_{i+1}_{style}.png"
                filepath = os.path.join(output_dir, filename)
                
                if not self.silent_mode:
                    print(f"\nüîÑ –í–∞—Ä–∏–∞–Ω—Ç {i+1}/{count} - –°—Ç–∏–ª—å: {style}")
                
                success = self.generate_favicon_from_prompt(
                    base_prompt, 
                    filepath, 
                    size=512, 
                    style=style
                )
                
                if success:
                    created_files.append(filepath)
            
            if not self.silent_mode:
                print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(created_files)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤ {output_dir}")
            
            return created_files
            
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {e}")
            return []

def test_modern_favicon_generator():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Ñ–∞–≤–∏–∫–æ–Ω–æ–≤"""
    print("üß™ –¢–µ—Å—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Ñ–∞–≤–∏–∫–æ–Ω–æ–≤")
    print("=" * 60)
    
    generator = ModernFaviconGenerator(silent_mode=False)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–∞–ø–∫—É
    test_dir = "test_favicons"
    os.makedirs(test_dir, exist_ok=True)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã
    test_prompts = [
        "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è IT –∫–æ–º–ø–∞–Ω–∏—è, —Å–∏–Ω–∏–π –ª–æ–≥–æ—Ç–∏–ø",
        "—Ä–µ—Å—Ç–æ—Ä–∞–Ω –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–π –∫—É—Ö–Ω–∏, –∫—Ä–∞—Å–Ω—ã–π –∏ –∑–µ–ª–µ–Ω—ã–π", 
        "—Ñ–∏—Ç–Ω–µ—Å –∫–ª—É–±, –¥–∏–Ω–∞–º–∏—á–Ω—ã–π —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π —Å–∏–º–≤–æ–ª",
        "–¥–µ—Ç—Å–∫–∏–π —Å–∞–¥, —è—Ä–∫–∏–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –¥–∏–∑–∞–π–Ω",
        "—é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è —Ñ–∏—Ä–º–∞, —Å—Ç—Ä–æ–≥–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å"
    ]
    
    successful_tests = 0
    
    for i, prompt in enumerate(test_prompts, 1):
        print(f"\nüß™ –¢–µ—Å—Ç {i}/{len(test_prompts)}: {prompt}")
        
        output_path = os.path.join(test_dir, f"test_favicon_{i}.png")
        
        success = generator.generate_favicon_from_prompt(
            prompt=prompt,
            output_path=output_path,
            size=512,
            style="modern_flat"
        )
        
        if success:
            successful_tests += 1
            print(f"‚úÖ –¢–µ—Å—Ç {i} –ø—Ä–æ–π–¥–µ–Ω")
        else:
            print(f"‚ùå –¢–µ—Å—Ç {i} –ø—Ä–æ–≤–∞–ª–µ–Ω")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful_tests}/{len(test_prompts)}")
    print(f"üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {test_dir}")
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    print(f"\nüé® –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤...")
    variants_dir = os.path.join(test_dir, "variants")
    variants = generator.create_favicon_variants(
        "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è",
        variants_dir,
        count=3
    )
    
    print(f"üéØ –°–æ–∑–¥–∞–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {len(variants)}")
    
    return successful_tests == len(test_prompts)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_success = test_modern_favicon_generator()
    
    if test_success:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã") 