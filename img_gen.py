import requests
import datetime
import os
from PIL import Image, ImageDraw
from io import BytesIO
import json
import time

class ThematicImageGenerator:
    def __init__(self, silent_mode=False):
        """
        –£–º–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ª–µ–Ω–¥–∏–Ω–≥–æ–≤
        
        Args:
            silent_mode (bool): –ï—Å–ª–∏ True, –Ω–µ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å
        """
        self.silent_mode = silent_mode
        
        if not silent_mode:
            print("üé® AI –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –õ–µ–Ω–¥–∏–Ω–≥–æ–≤")
            print("=" * 60)
            print("‚ú® –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è 8 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–¥ –ª—é–±—É—é —Ç–µ–º–∞—Ç–∏–∫—É")
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
        self.theme_prompts = {
            "–∞–≤—Ç–æ—Å–∞–ª–æ–Ω": {
                "main": "modern car dealership showroom, luxury cars displayed, professional lighting, wide view",
                "about1": "luxury sports car in showroom, red ferrari, professional photography",
                "about2": "business sedan in elegant showroom, BMW or Mercedes, side view",
                "about3": "SUV car in modern showroom, premium interior visible",
                "review1": "happy businessman in suit near luxury car, smiling, professional photo",
                "review2": "young woman with keys of new car, joy expression, car dealership background",
                "review3": "family of three near new SUV, satisfied customers, dealership setting",
                "favicon": "simple car icon, modern design, vector style, clean minimalist"
            },
            "–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å": {
                "main": "modern real estate office, elegant interior, property photos on walls",
                "about1": "luxury apartment interior, modern design, living room with city view",
                "about2": "beautiful house exterior, contemporary architecture, garden landscape",
                "about3": "commercial office building, glass facade, professional photography",
                "review1": "happy couple with house keys, new homeowners, smiling portrait",
                "review2": "businessman in suit holding property documents, satisfied client",
                "review3": "young family in front of new house, joyful expression, real estate success",
                "favicon": "house icon, simple modern design, real estate symbol, minimalist"
            },
            "—Ñ–∏—Ç–Ω–µ—Å": {
                "main": "modern fitness gym interior, equipment visible, bright lighting, spacious",
                "about1": "professional gym equipment, dumbbells and machines, clean modern design",
                "about2": "group fitness class, people exercising, energetic atmosphere",
                "about3": "personal trainer working with client, professional fitness coaching",
                "review1": "fit athletic man after workout, happy expression, gym background",
                "review2": "athletic woman in sportswear, successful fitness transformation, confident pose",
                "review3": "group of people celebrating fitness goals, happy healthy lifestyle",
                "favicon": "dumbbell icon, fitness symbol, simple modern design, vector style"
            },
            "—Ä–µ—Å—Ç–æ—Ä–∞–Ω": {
                "main": "elegant restaurant interior, dining tables, warm ambient lighting",
                "about1": "gourmet dish presentation, fine dining, professional food photography",
                "about2": "chef cooking in professional kitchen, culinary expertise, action shot",
                "about3": "wine collection and bar area, premium beverages, elegant atmosphere",
                "review1": "satisfied customer enjoying meal, happy dining experience, restaurant setting",
                "review2": "couple on romantic dinner, elegant restaurant ambiance, joyful moment",
                "review3": "family dinner celebration, happy customers, restaurant atmosphere",
                "favicon": "fork and knife icon, restaurant symbol, elegant design, minimalist"
            },
            "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": {
                "main": "modern classroom or lecture hall, students and teacher, educational environment",
                "about1": "professional teacher explaining lesson, whiteboard, educational setting",
                "about2": "students studying together, collaborative learning, modern classroom",
                "about3": "graduation ceremony, academic success, celebration of education",
                "review1": "successful graduate with diploma, proud achievement, academic attire",
                "review2": "happy student with books, educational success, confident expression",
                "review3": "group of successful students, teamwork in education, celebration",
                "favicon": "graduation cap icon, education symbol, academic design, simple"
            },
            "–º–µ–¥–∏—Ü–∏–Ω–∞": {
                "main": "modern medical clinic interior, clean professional environment, medical equipment",
                "about1": "professional doctor in white coat, medical expertise, confident portrait",
                "about2": "modern medical equipment, healthcare technology, clinical setting",
                "about3": "medical consultation room, doctor-patient interaction, professional care",
                "review1": "recovered patient with doctor, successful treatment, grateful expression",
                "review2": "healthy family after medical care, satisfied patients, medical success",
                "review3": "elderly patient with caring doctor, medical compassion, healthcare quality",
                "favicon": "medical cross icon, healthcare symbol, clean design, professional"
            },
            "–∫—Ä–∞—Å–æ—Ç–∞": {
                "main": "luxury beauty salon interior, elegant design, professional atmosphere",
                "about1": "professional makeup artist working, beauty transformation, artistic process",
                "about2": "spa treatment room, relaxing atmosphere, wellness and beauty",
                "about3": "hairstyling session, professional hairdresser, beauty salon environment",
                "review1": "beautiful woman after salon treatment, glowing skin, satisfied client",
                "review2": "elegant lady with new hairstyle, confident and happy, beauty success",
                "review3": "group of women enjoying beauty services, friendship and self-care",
                "favicon": "lipstick icon, beauty symbol, elegant design, feminine style"
            },
            "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": {
                "main": "modern tech office, computers and gadgets, innovative workspace environment",
                "about1": "cutting-edge technology devices, smartphones and laptops, tech innovation",
                "about2": "software development team working, coding and collaboration, tech environment",
                "about3": "server room or data center, technology infrastructure, digital innovation",
                "review1": "satisfied tech professional, successful IT specialist, confident expression",
                "review2": "entrepreneur with tech startup success, innovation achievement, modern office",
                "review3": "team of developers celebrating project success, tech collaboration",
                "favicon": "gear or chip icon, technology symbol, modern design, digital style"
            }
        }

    def detect_theme_from_input(self, user_input):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–º–∞—Ç–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
        user_input_lower = user_input.lower()
        
        theme_keywords = {
            "–∞–≤—Ç–æ—Å–∞–ª–æ–Ω": ["–∞–≤—Ç–æ—Å–∞–ª–æ–Ω", "–º–∞—à–∏–Ω–∞", "–∞–≤—Ç–æ–º–æ–±–∏–ª—å", "–¥–∏–ª–µ—Ä", "–∞–≤—Ç–æ", "car", "auto"],
            "–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å": ["–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", "–¥–æ–º", "–∫–≤–∞—Ä—Ç–∏—Ä–∞", "—Ä–∏—ç–ª—Ç–æ—Ä", "–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ", "real estate"],
            "—Ñ–∏—Ç–Ω–µ—Å": ["—Ñ–∏—Ç–Ω–µ—Å", "—Å–ø–æ—Ä—Ç", "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", "–∑–∞–ª", "fitness", "gym", "—Å–ø–æ—Ä—Ç–∑–∞–ª"],
            "—Ä–µ—Å—Ç–æ—Ä–∞–Ω": ["—Ä–µ—Å—Ç–æ—Ä–∞–Ω", "–∫–∞—Ñ–µ", "–µ–¥–∞", "–∫—É—Ö–Ω—è", "–ø–æ–≤–∞—Ä", "restaurant", "food"],
            "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": ["–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "—à–∫–æ–ª–∞", "—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç", "–∫—É—Ä—Å—ã", "–æ–±—É—á–µ–Ω–∏–µ", "education"],
            "–º–µ–¥–∏—Ü–∏–Ω–∞": ["–º–µ–¥–∏—Ü–∏–Ω–∞", "–∫–ª–∏–Ω–∏–∫–∞", "–≤—Ä–∞—á", "–ª–µ—á–µ–Ω–∏–µ", "–∑–¥–æ—Ä–æ–≤—å–µ", "medical", "doctor"],
            "–∫—Ä–∞—Å–æ—Ç–∞": ["–∫—Ä–∞—Å–æ—Ç–∞", "—Å–∞–ª–æ–Ω", "–∫–æ—Å–º–µ—Ç–∏–∫–∞", "–º–∞–∫–∏—è–∂", "beauty", "salon", "spa"],
            "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": ["—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "IT", "—Å–æ—Ñ—Ç", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "tech"]
        }
        
        for theme, keywords in theme_keywords.items():
            if any(keyword in user_input_lower for keyword in keywords):
                return theme
        
        return "–æ–±—â–∏–π –±–∏–∑–Ω–µ—Å"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

    def generate_custom_prompts(self, theme_description):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–∏"""
        base_prompts = {
            "main": f"professional {theme_description} business interior, modern design, overview shot",
            "about1": f"{theme_description} professional service, high quality, detailed view",
            "about2": f"{theme_description} equipment or products, professional presentation",
            "about3": f"{theme_description} workspace or environment, business setting",
            "review1": f"satisfied customer of {theme_description} service, happy expression, professional photo",
            "review2": f"successful client using {theme_description} service, positive experience",
            "review3": f"group of happy customers, {theme_description} business success story",
            "favicon": f"{theme_description} icon, simple modern design, business symbol, minimalist"
        }
        return base_prompts

    def get_theme_prompts(self, theme_input):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–∏"""
        detected_theme = self.detect_theme_from_input(theme_input)
        
        if detected_theme in self.theme_prompts:
            if not self.silent_mode:
                print(f"üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ç–µ–º–∞—Ç–∏–∫–∞: {detected_theme}")
            return self.theme_prompts[detected_theme], detected_theme
        else:
            if not self.silent_mode:
                print(f"üéØ –°–æ–∑–¥–∞—é –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ç–µ–º–∞—Ç–∏–∫–∏: {theme_input}")
            custom_prompts = self.generate_custom_prompts(theme_input)
            return custom_prompts, theme_input

class ImageGenerator:
    def __init__(self, silent_mode=False):
        """
        –ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–æ–≤
        
        Args:
            silent_mode (bool): –ï—Å–ª–∏ True, –Ω–µ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å
        """
        self.silent_mode = silent_mode
        
        if not silent_mode:
            print("üé® AI –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            print("=" * 50)
            print("‚ú® –í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–æ–≤")
        
    def remove_watermark(self, image):
        """–£–¥–∞–ª—è–µ—Ç –≤–æ—Ç–µ—Ä–º–∞—Ä–∫ —Å–Ω–∏–∑—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            width, height = image.size
            
            # –û–±—Ä–µ–∑–∞–µ–º –Ω–∏–∂–Ω–∏–µ 30 –ø–∏–∫—Å–µ–ª–µ–π –≥–¥–µ –æ–±—ã—á–Ω–æ –≤–æ—Ç–µ—Ä–º–∞—Ä–∫
            cropped_height = height - 30
            cropped_image = image.crop((0, 0, width, cropped_height))
            
            # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –¥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            final_image = cropped_image.resize((width, height), Image.Resampling.LANCZOS)
            
            return final_image
        except:
            return image
        
    def translate_prompt(self, russian_prompt: str):
        """–ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–æ–º–ø—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"""
        translations = {
            "–∫–æ—Ç": "cat", "–∫–æ—Ç–µ–Ω–æ–∫": "kitten", "–∫–æ—Ç–µ–Ω–æ—á–µ–∫": "cute kitten",
            "—Å–æ–±–∞–∫–∞": "dog", "—â–µ–Ω–æ–∫": "puppy", "–ø–µ—Å–∏–∫": "dog",
            "–∑–∞–∫–∞—Ç": "sunset", "–≥–æ—Ä—ã": "mountains", "–ª–µ—Å": "forest",
            "–º–æ—Ä–µ": "ocean", "–ø–ª—è–∂": "beach", "–¥–æ–º": "house", 
            "–≥–æ—Ä–æ–¥": "city", "–∞–≤—Ç–æ–º–æ–±–∏–ª—å": "car", "–º–∞—à–∏–Ω–∞": "car",
            "—Ü–≤–µ—Ç—ã": "flowers", "—Ä–æ–∑–∞": "rose", "—Ç—é–ª—å–ø–∞–Ω": "tulip",
            "–¥–µ–≤—É—à–∫–∞": "woman", "–∂–µ–Ω—â–∏–Ω–∞": "woman", "–¥–µ–≤–æ—á–∫–∞": "girl",
            "–º—É–∂—á–∏–Ω–∞": "man", "–ø–∞—Ä–µ–Ω—å": "young man", "–º–∞–ª—å—á–∏–∫": "boy",
            "—Ä–µ–±–µ–Ω–æ–∫": "child", "–¥–µ—Ç–∏": "children",
            "–∫—Ä–∞—Å–∏–≤—ã–π": "beautiful", "–∫—Ä–∞—Å–∏–≤–∞—è": "beautiful",
            "—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π": "realistic", "—Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π": "photorealistic",
            "–ø–æ—Ä—Ç—Ä–µ—Ç": "portrait", "–ø–µ–π–∑–∞–∂": "landscape",
            "–ø—Ä–∏—Ä–æ–¥–∞": "nature", "–≤–µ—Å–Ω–∞": "spring", "–ª–µ—Ç–æ": "summer",
            "–æ—Å–µ–Ω—å": "autumn", "–∑–∏–º–∞": "winter",
            "–¥–æ–∂–¥—å": "rain", "—Å–Ω–µ–≥": "snow", "—Å–æ–ª–Ω—Ü–µ": "sun",
            "–Ω–µ–±–æ": "sky", "–æ–±–ª–∞–∫–∞": "clouds", "–∑–≤–µ–∑–¥—ã": "stars",
            "–µ–¥–∞": "food", "—Ç–æ—Ä—Ç": "cake", "–ø–∏—Ü—Ü–∞": "pizza"
        }
        
        english_prompt = russian_prompt.lower()
        for ru, en in translations.items():
            english_prompt = english_prompt.replace(ru, en)
        
        return english_prompt
    
    def generate_via_pollinations_clean(self, prompt):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Pollinations AI —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–∞"""
        try:
            enhanced_prompt = f"{prompt}, high quality, detailed, masterpiece, 8k, professional photography"
            
            base_url = "https://image.pollinations.ai/prompt/"
            
            import urllib.parse
            encoded_prompt = urllib.parse.quote(enhanced_prompt)
            
            params = "?width=1024&height=1024&model=flux&enhance=true&nologo=true"
            
            image_url = base_url + encoded_prompt + params
            
            if not self.silent_mode:
                print(f"üìù –ü—Ä–æ–º–ø—Ç: {enhanced_prompt}")
                print("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–∞...")
            
            response = requests.get(image_url, timeout=120)
            
            if response.status_code == 200:
                image = Image.open(BytesIO(response.content))
                
                # –£–¥–∞–ª—è–µ–º –≤–æ—Ç–µ—Ä–º–∞—Ä–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
                clean_image = self.remove_watermark(image)
                
                return clean_image
            else:
                if not self.silent_mode:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                return None
                
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return None
    
    def generate_via_dezgo(self, prompt):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ DezGO API - –±–µ–∑ –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–æ–≤"""
        try:
            enhanced_prompt = f"{prompt}, high quality, detailed, masterpiece"
            
            if not self.silent_mode:
                print(f"üìù –ü—Ä–æ–º–ø—Ç: {enhanced_prompt}")
                print("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ DezGO (–±–µ–∑ –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–æ–≤)...")
            
            api_url = "https://api.dezgo.com/text2image"
            
            data = {
                'prompt': enhanced_prompt,
                'model': 'epic_realism',
                'width': 1024,
                'height': 1024,
                'guidance': 7.5,
                'steps': 25,
                'format': 'png'
            }
            
            response = requests.post(api_url, data=data, timeout=120)
            
            if response.status_code == 200:
                image = Image.open(BytesIO(response.content))
                return image
            else:
                if not self.silent_mode:
                    print(f"‚ùå DezGO –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                return None
                
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå –û—à–∏–±–∫–∞ DezGO: {e}")
            return None
    
    def generate_via_huggingface_clean(self, prompt):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ HF –±–µ–∑ –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–æ–≤"""
        try:
            enhanced_prompt = f"{prompt}, high quality, detailed, masterpiece, professional photography"
            
            if not self.silent_mode:
                print(f"üìù –ü—Ä–æ–º–ø—Ç: {enhanced_prompt}")
                print("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Hugging Face...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
            api_url = "https://api-inference.huggingface.co/models/stabilityai/stable-diffusion-xl-base-1.0"
            
            headers = {"Content-Type": "application/json"}
            data = {
                "inputs": enhanced_prompt,
                "parameters": {
                    "negative_prompt": "watermark, text, logo, signature, blurry, low quality",
                    "num_inference_steps": 25,
                    "guidance_scale": 7.5,
                    "width": 1024,
                    "height": 1024
                }
            }
            
            response = requests.post(api_url, headers=headers, json=data, timeout=120)
            
            if response.status_code == 200:
                image = Image.open(BytesIO(response.content))
                return image
            elif response.status_code == 503:
                if not self.silent_mode:
                    print("‚è≥ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É")
                return None
            else:
                if not self.silent_mode:
                    print(f"‚ùå HF –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                return None
                
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå –û—à–∏–±–∫–∞ HF: {e}")
            return None

    def generate_thematic_set(self, theme_input, media_dir, method="1", progress_callback=None):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –∏–∑ 8 —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        
        Args:
            theme_input (str): –¢–µ–º–∞—Ç–∏–∫–∞ –±–∏–∑–Ω–µ—Å–∞
            media_dir (str): –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ media
            method (str): –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (1, 2, 3)
            progress_callback (callable): –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {–∏–º—è_—Ñ–∞–π–ª–∞: –ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É –∏–ª–∏ None}
        """
        thematic_gen = ThematicImageGenerator(silent_mode=self.silent_mode)
        prompts, detected_theme = thematic_gen.get_theme_prompts(theme_input)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É media –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(media_dir, exist_ok=True)
        
        if not self.silent_mode:
            print(f"\nüé® –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é 8 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ–º–∞—Ç–∏–∫–∏: {detected_theme}")
            print("=" * 60)
        
        if progress_callback:
            progress_callback(f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ–º–∞—Ç–∏–∫–∏: {detected_theme}")
        
        image_names = ["main", "about1", "about2", "about3", "review1", "review2", "review3", "favicon"]
        results = {}
        
        for i, image_name in enumerate(image_names, 1):
            if not self.silent_mode:
                print(f"\nüñºÔ∏è  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {i}/8: {image_name}")
                print("-" * 40)
            
            if progress_callback:
                progress_callback(f"üñºÔ∏è  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {i}/8: {image_name}")
            
            prompt = prompts[image_name]
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏
            if image_name == "favicon":
                prompt += ", 32x32 pixels, icon design, simple, clean"
            
            # –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            if method == "2":
                image = self.generate_via_dezgo(prompt)
            elif method == "3":
                image = self.generate_via_huggingface_clean(prompt)
            else:
                image = self.generate_via_pollinations_clean(prompt)
            
            if image:
                # –î–ª—è —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏ –¥–µ–ª–∞–µ–º —Ä–∞–∑–º–µ—Ä 512x512 (–ø–æ—Ç–æ–º –º–æ–∂–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å)
                if image_name == "favicon":
                    image = image.resize((512, 512), Image.Resampling.LANCZOS)
                
                filename = os.path.join(media_dir, f"{image_name}.png")
                image.save(filename)
                results[image_name] = filename
                
                if not self.silent_mode:
                    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                time.sleep(2)
            else:
                if not self.silent_mode:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å {image_name}")
                results[image_name] = None
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if not self.silent_mode:
            print(f"\nüéâ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
            print("=" * 60)
            print(f"üìÅ –ü–∞–ø–∫–∞: {media_dir}")
            print(f"üéØ –¢–µ–º–∞—Ç–∏–∫–∞: {detected_theme}")
            print("\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
            
            for name, filename in results.items():
                if filename:
                    print(f"  ‚úÖ {name}: {filename}")
                else:
                    print(f"  ‚ùå {name}: –ù–ï –°–û–ó–î–ê–ù")
        
        if progress_callback:
            successful_count = len([f for f in results.values() if f is not None])
            progress_callback(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {successful_count}/8 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        return results

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    generator = ImageGenerator()
    
    print("\nüåü –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:")
    print("1. –û–¥–∏–Ω–æ—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    print("2. –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –Ω–∞–±–æ—Ä –¥–ª—è –ª–µ–Ω–¥–∏–Ω–≥–∞ (8 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)")
    print()
    
    mode = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (1-2): ").strip()
    
    if mode == "2":
        # –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
        print("\nüéØ –†–ï–ñ–ò–ú: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–±–æ—Ä–∞")
        print("=" * 50)
        print("–ü—Ä–∏–º–µ—Ä—ã —Ç–µ–º–∞—Ç–∏–∫:")
        print("  ‚Ä¢ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω, –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å, —Ñ–∏—Ç–Ω–µ—Å")
        print("  ‚Ä¢ —Ä–µ—Å—Ç–æ—Ä–∞–Ω, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, –º–µ–¥–∏—Ü–∏–Ω–∞")
        print("  ‚Ä¢ –∫—Ä–∞—Å–æ—Ç–∞, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –∏–ª–∏ –ª—é–±–∞—è –¥—Ä—É–≥–∞—è")
        print()
        
        theme_input = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞: ").strip()
        
        if not theme_input:
            print("‚ùå –¢–µ–º–∞—Ç–∏–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞!")
            return
        
        print("\nüé® –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
        print("1. Pollinations + —É–¥–∞–ª–µ–Ω–∏–µ –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
        print("2. DezGO (—á–∏—Å—Ç—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)")
        print("3. Hugging Face SDXL")
        
        method_choice = input("–í—ã–±–æ—Ä (1-3 –∏–ª–∏ Enter –¥–ª—è –º–µ—Ç–æ–¥–∞ 1): ").strip()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–±–æ—Ä
        results = generator.generate_thematic_set(theme_input, "media", method_choice)
        
        print(f"\nüí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–≤–æ–µ–º –ª–µ–Ω–¥–∏–Ω–≥–µ!")
        print("   –ü—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–∞–ø–∫—É 'media' –≤ –≤–∞—à –ø—Ä–æ–µ–∫—Ç.")
        
    else:
        # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º (–æ–¥–∏–Ω–æ—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è)
        print("\nüé® –†–ï–ñ–ò–ú: –û–¥–∏–Ω–æ—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è")
        print("=" * 40)
        
        while True:
            print("\nüìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
            prompt = input("–ü—Ä–æ–º–ø—Ç (–∏–ª–∏ '–≤—ã—Ö–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è): ").strip()
            
            if prompt.lower() in ['–≤—ã—Ö–æ–¥', 'exit', 'quit']:
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
                
            if not prompt:
                continue
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if any(ord(char) > 127 for char in prompt):
                english_prompt = generator.translate_prompt(prompt)
                print(f"üîÑ –ü–µ—Ä–µ–≤–æ–¥: {english_prompt}")
            else:
                english_prompt = prompt
            
            # –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞
            print("\nüé® –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥:")
            print("1. Pollinations + —É–¥–∞–ª–µ–Ω–∏–µ –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
            print("2. DezGO (—á–∏—Å—Ç—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)")
            print("3. Hugging Face SDXL")
            
            method_choice = input("–í—ã–±–æ—Ä (1-3 –∏–ª–∏ Enter –¥–ª—è –º–µ—Ç–æ–¥–∞ 1): ").strip()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º
            if method_choice == "2":
                image = generator.generate_via_dezgo(english_prompt)
            elif method_choice == "3":
                image = generator.generate_via_huggingface_clean(english_prompt)
            else:
                image = generator.generate_via_pollinations_clean(english_prompt)
            
            if image:
                os.makedirs("generated_images", exist_ok=True)
                timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"generated_images/image_{timestamp}.png"
                image.save(filename)
                
                print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
                
                # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                continue_choice = input("\n–°–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ? (y/n): ").strip().lower()
                if continue_choice in ['n', 'no', '–Ω–µ—Ç']:
                    break
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

if __name__ == "__main__":
    main()