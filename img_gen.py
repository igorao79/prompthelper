import requests
import datetime
import os
from PIL import Image, ImageDraw
from io import BytesIO
import json
import time
import random
import uuid
import re
from urllib.parse import quote
from pathlib import Path

class IntelligentContextAnalyzer:
    """–£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–∏–∑–Ω–µ—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"""
    
    def __init__(self, silent_mode=False):
        self.silent_mode = silent_mode
        self.cache = {}  # –ö—ç—à –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        
    def search_business_context(self, query):
        """–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏–∑–Ω–µ—Å–µ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ"""
        try:
            if not self.silent_mode:
                print(f"üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ: {query}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if query in self.cache:
                if not self.silent_mode:
                    print("üìã –ò—Å–ø–æ–ª—å–∑—É—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                return self.cache[query]
            
            # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            search_queries = [
                f"{query} —É—Å–ª—É–≥–∏ –±–∏–∑–Ω–µ—Å",
                f"{query} –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
                f"{query} —á—Ç–æ —ç—Ç–æ",
                query  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            ]
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            best_context = None
            for search_query in search_queries:
                context_data = self._multi_source_search(search_query)
                
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if context_data and context_data.get('confidence', 0) > 0.5:
                    best_context = context_data
                    break
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ö–æ—Ä–æ—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
            if not best_context:
                best_context = self._multi_source_search(search_queries[0])
            
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            if not best_context:
                best_context = self._dynamic_fallback_analysis(query)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            self.cache[query] = best_context
            
            return best_context
            
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            return self._dynamic_fallback_analysis(query)
    
    def _multi_source_search(self, query):
        """–ü–æ–∏—Å–∫ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º"""
        sources_data = []
        
        # 1. –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DuckDuckGo
        duckduck_data = self._search_duckduckgo(query)
        if duckduck_data:
            sources_data.extend(duckduck_data)
        
        # 2. –ü–æ–∏—Å–∫ –≤ Wikipedia
        wiki_data = self._search_wikipedia(query)
        if wiki_data:
            sources_data.append(wiki_data)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        return self._analyze_search_results(sources_data, query)
    
    def _search_duckduckgo(self, query):
        """–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DuckDuckGo API"""
        try:
            url = "https://api.duckduckgo.com/"
            params = {
                'q': query,
                'format': 'json',
                'no_html': '1',
                'skip_disambig': '1'
            }
            
            response = requests.get(url, params=params, timeout=10)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º 200 –∏ 202 —Å—Ç–∞—Ç—É—Å—ã
            if response.status_code in [200, 202]:
                data = response.json()
                
                results = []
                
                # –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç
                if data.get('Abstract'):
                    results.append({
                        'title': data.get('Heading', ''),
                        'description': data.get('Abstract', ''),
                        'source': 'DuckDuckGo Abstract'
                    })
                
                # –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–º—ã
                for topic in data.get('RelatedTopics', [])[:3]:
                    if isinstance(topic, dict) and topic.get('Text'):
                        results.append({
                            'title': topic.get('FirstURL', '').split('/')[-1],
                            'description': topic.get('Text', ''),
                            'source': 'DuckDuckGo Related'
                        })
                
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑ Answer
                if data.get('Answer'):
                    results.append({
                        'title': 'Definition',
                        'description': data.get('Answer', ''),
                        'source': 'DuckDuckGo Answer'
                    })
                
                if not self.silent_mode and results:
                    print(f"‚úÖ DuckDuckGo –Ω–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                elif not self.silent_mode:
                    print(f"‚ö†Ô∏è DuckDuckGo –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã—Ö (—Å—Ç–∞—Ç—É—Å {response.status_code})")
                
                return results if results else None
                
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ DuckDuckGo: {e}")
            return None
    
    def _search_wikipedia(self, query):
        """–ü–æ–∏—Å–∫ –≤ Wikipedia"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å—Ç–∞—Ç—å–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É
            search_url = "https://ru.wikipedia.org/w/api.php"
            search_params = {
                'action': 'query',
                'format': 'json',
                'list': 'search',
                'srsearch': query,
                'srlimit': 3,
                'srprop': 'snippet'
            }
            
            search_response = requests.get(search_url, params=search_params, timeout=10)
            
            if search_response.status_code == 200:
                search_data = search_response.json()
                search_results = search_data.get('query', {}).get('search', [])
                
                if search_results:
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    first_result = search_results[0]
                    page_title = first_result.get('title', '')
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    content_url = "https://ru.wikipedia.org/api/rest_v1/page/summary/" + quote(page_title)
                    content_response = requests.get(content_url, timeout=10)
                    
                    if content_response.status_code == 200:
                        content_data = content_response.json()
                        
                        if not self.silent_mode:
                            print(f"‚úÖ Wikipedia –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç–∞—Ç—å—è: {page_title}")
                        
                        return {
                            'title': content_data.get('title', page_title),
                            'description': content_data.get('extract', first_result.get('snippet', '').replace('<span class="searchmatch">', '').replace('</span>', '')),
                            'source': 'Wikipedia'
                        }
                    else:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º snippet
                        if not self.silent_mode:
                            print(f"‚ö†Ô∏è Wikipedia: –∏—Å–ø–æ–ª—å–∑—É—é snippet –¥–ª—è {page_title}")
                        
                        return {
                            'title': page_title,
                            'description': first_result.get('snippet', '').replace('<span class="searchmatch">', '').replace('</span>', ''),
                            'source': 'Wikipedia'
                        }
                else:
                    if not self.silent_mode:
                        print(f"‚ö†Ô∏è Wikipedia: —Å—Ç–∞—Ç—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è '{query}'")
                    return None
            else:
                if not self.silent_mode:
                    print(f"‚ö†Ô∏è Wikipedia –ø–æ–∏—Å–∫ –æ—à–∏–±–∫–∞: {search_response.status_code}")
                return None
                
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Wikipedia: {e}")
            return None
    
    def _analyze_search_results(self, sources_data, original_query):
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        if not sources_data:
            return self._dynamic_fallback_analysis(original_query)
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        combined_text = ""
        for source in sources_data:
            combined_text += f" {source.get('title', '')} {source.get('description', '')}"
        
        # –ü–†–û–í–ï–†–Ø–ï–ú –†–ï–õ–ï–í–ê–ù–¢–ù–û–°–¢–¨ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        relevance_score = self._check_content_relevance(combined_text, original_query)
        
        if relevance_score < 0.3:  # –ï—Å–ª–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è
            if not self.silent_mode:
                print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞ (score: {relevance_score:.2f})")
                print(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
            return self._dynamic_fallback_analysis(original_query)
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        context = self._dynamic_context_extraction(combined_text, original_query)
        
        # –ü–æ–≤—ã—à–∞–µ–º confidence –µ—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞
        context['confidence'] = min(context['confidence'] + (relevance_score * 0.3), 0.9)
        
        if not self.silent_mode:
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(sources_data)}")
            print(f"‚úÖ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {relevance_score:.2f}")
            print(f"üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞: {context['business_type']}")
            print(f"üè¢ –°—Ä–µ–¥–∞: {context['environment']}")
        
        return context
    
    def _check_content_relevance(self, found_text, original_query):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É"""
        found_text_lower = found_text.lower()
        query_words = original_query.lower().split()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ –Ω–∞–π–¥–µ–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
        found_words = 0
        total_query_words = len([w for w in query_words if len(w) > 2])  # –°–ª–æ–≤–∞ –¥–ª–∏–Ω–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤
        
        for word in query_words:
            if len(word) > 2 and word in found_text_lower:
                found_words += 1
        
        # –ë–∞–∑–æ–≤–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ —Å–ª–æ–≤–∞–º
        word_relevance = found_words / max(total_query_words, 1) if total_query_words > 0 else 0
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ä—ã
        theme_markers = {
            '–∫—É–ª–∏–Ω–∞—Ä': ['–∫—É–ª–∏–Ω–∞—Ä', '–ø–æ–≤–∞—Ä', '–≥–æ—Ç–æ–≤–∫', '–µ–¥–∞', '–±–ª—é–¥', '—Ä–µ—Ü–µ–ø—Ç', '–∫—É—Ö–Ω'],
            '–∞–≤—Ç–æ': ['–∞–≤—Ç–æ', '–º–∞—à–∏–Ω', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–¥–≤–∏–≥–∞—Ç–µ–ª', '—Ä–µ–º–æ–Ω—Ç', '–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞'],
            '—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥': ['—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥', '–∑—É–±', '—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è', '–º–µ–¥–∏—Ü–∏–Ω', '–≤—Ä–∞—á'],
            '–¥–µ—Ç—Å–∫': ['–¥–µ—Ç—Å–∫', '–¥–µ—Ç–∏', '—Ä–µ–±–µ–Ω', '–≤–æ—Å–ø–∏—Ç–∞–Ω', '–∏–≥—Ä'],
            '—Ñ–æ—Ç–æ': ['—Ñ–æ—Ç–æ', '—Å—ä–µ–º–∫', '–∫–∞–º–µ—Ä', '–∏–∑–æ–±—Ä–∞–∂–µ–Ω'],
            '–∫—É—Ä—Å': ['–∫—É—Ä—Å', '–æ–±—É—á–µ–Ω', '—É—á–µ–±', '–æ–±—Ä–∞–∑–æ–≤–∞–Ω', '—à–∫–æ–ª']
        }
        
        theme_bonus = 0
        for key_word in query_words:
            if key_word in theme_markers:
                theme_words = theme_markers[key_word]
                theme_matches = sum(1 for theme_word in theme_words if theme_word in found_text_lower)
                if theme_matches > 0:
                    theme_bonus += 0.2
        
        final_relevance = min(word_relevance + theme_bonus, 1.0)
        return final_relevance
    
    def _dynamic_context_extraction(self, text, query):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        text_lower = text.lower()
        query_lower = query.lower()
        combined_text = f"{text_lower} {query_lower}".strip()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        activity_indicators = {
            'education': ['–∫—É—Ä—Å—ã', '–æ–±—É—á–µ–Ω–∏–µ', '—à–∫–æ–ª–∞', '—É—á–µ–±–∞', '–ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏–µ', '–∏–∑—É—á–µ–Ω–∏–µ', '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '—É—á–∏—Ç–µ–ª—å', '—É—á–µ–Ω–∏–∫'],
            'service': ['—É—Å–ª—É–≥–∏', '—Å–µ—Ä–≤–∏—Å', '–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', '–ø–æ–º–æ—â—å', '—Ä–µ–º–æ–Ω—Ç', '–º–∞—Å—Ç–µ—Ä', '–ø–æ—á–∏–Ω–∫–∞'],
            'medical': ['–º–µ–¥–∏—Ü–∏–Ω', '–∑–¥–æ—Ä–æ–≤—å–µ', '–ª–µ—á–µ–Ω–∏–µ', '–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', '–∫–ª–∏–Ω–∏–∫–∞', '–≤—Ä–∞—á', '—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥', '–∑—É–±—ã', '–±–æ–ª—å–Ω'],
            'automotive': ['–∞–≤—Ç–æ', '–º–∞—à–∏–Ω', '–∞–≤—Ç–æ–º–æ–±–∏–ª', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å', '–¥–≤–∏–≥–∞—Ç–µ–ª'],
            'food': ['–∫—É–ª–∏–Ω–∞—Ä', '–µ–¥–∞', '–≥–æ—Ç–æ–≤–∫', '–ø–æ–≤–∞—Ä', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–∫–∞—Ñ–µ', '–ø–∏—Ç–∞–Ω–∏–µ', '–±–ª—é–¥', '–∫—É—Ö–Ω'],
            'beauty': ['–∫—Ä–∞—Å–æ—Ç–∞', '—Å–∞–ª–æ–Ω', '–∫–æ—Å–º–µ—Ç–æ–ª', '–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä', '–º–∞–Ω–∏–∫—é—Ä', '—Å—Ç—Ä–∏–∂–∫', '–ø—Ä–∏—á–µ—Å–∫'],
            'fitness': ['—Ñ–∏—Ç–Ω–µ—Å', '—Å–ø–æ—Ä—Ç', '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫', '—Ç—Ä–µ–Ω–µ—Ä', '—Å–ø–æ—Ä—Ç–∑–∞–ª', '—Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä'],
            'tech': ['—Ç–µ—Ö–Ω–æ–ª–æ–≥', '–∫–æ–º–ø—å—é—Ç–µ—Ä', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä', '—Å–∞–π—Ç', '–≤–µ–±', 'it', '—Å–æ—Ñ—Ç'],
            'art': ['–∏—Å–∫—É—Å—Å—Ç–≤', '—Ç–≤–æ—Ä—á–µ—Å—Ç–≤', '—Ö—É–¥–æ–∂–µ—Å—Ç–≤', '–¥–∏–∑–∞–π–Ω', '—Ä–∏—Å–æ–≤–∞–Ω', '–∫–∞—Ä—Ç–∏–Ω'],
            'music': ['–º—É–∑—ã–∫', '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç', '–ø–µ—Å–Ω', '–∫–æ–Ω—Ü–µ—Ä—Ç', '–ø–∏–∞–Ω–∏', '–≥–∏—Ç–∞—Ä'],
            'photography': ['—Ñ–æ—Ç–æ', '—Å—ä–µ–º–∫', '–∫–∞–º–µ—Ä', '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ'],
            'construction': ['—Å—Ç—Ä–æ–∏—Ç–µ–ª', '—Å—Ç—Ä–æ–π–∫', '–æ—Ç–¥–µ–ª–∫', '–º–æ–Ω—Ç–∞–∂'],
            'childcare': ['–¥–µ—Ç—Å–∫', '—Å–∞–¥', '–¥–µ—Ç–∏', '—Ä–µ–±–µ–Ω–æ–∫', '–≤–æ—Å–ø–∏—Ç–∞–Ω', '–∏–≥—Ä–æ–≤–∞—è'],
            'appliance_repair': ['—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫', '—Å—Ç–∏—Ä–∞–ª—å–Ω', '—Ç–µ—Ö–Ω–∏–∫', '–±—ã—Ç–æ–≤–∞—è', '—ç–ª–µ–∫—Ç—Ä–æ–ø—Ä–∏–±–æ—Ä']
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∏–ø –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        activity_scores = {}
        for activity, keywords in activity_indicators.items():
            score = sum(1 for keyword in keywords if keyword in combined_text)
            if score > 0:
                activity_scores[activity] = score
        
        main_activity = max(activity_scores.keys(), key=lambda k: activity_scores[k]) if activity_scores else 'general'
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        details = self._extract_dynamic_details(combined_text, query_lower)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–µ–¥—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        environment = self._determine_dynamic_environment(main_activity, details, query_lower)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç—å —Ç–µ–º—ã
        specificity = self._calculate_specificity(query_lower, details)
        
        return {
            'category': 'dynamic_business',  # –ï–¥–∏–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            'business_type': main_activity,
            'confidence': min(0.3 + specificity * 0.4, 0.9),
            'details': details[:5],
            'keywords': self._extract_smart_keywords(combined_text, query_lower),
            'environment': environment,
            'theme_description': self._generate_theme_description(main_activity, details, query_lower)
        }
    
    def _extract_dynamic_details(self, text, query):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –∑–∞–ø—Ä–æ—Å–∞"""
        import re
        
        # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–∏–º—ã—Ö —Å–ª–æ–≤
        words = re.findall(r'\b[–∞-—è—ë]{3,}\b', text + " " + query)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞
        stop_words = {
            '—É—Å–ª—É–≥–∏', '—Å–µ—Ä–≤–∏—Å', '–∫–æ–º–ø–∞–Ω–∏—è', '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', '–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ', 
            '–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '—Ä–∞–±–æ—Ç–∞', '–±–∏–∑–Ω–µ—Å', '—Ü–µ–Ω—Ç—Ä', '–≥—Ä—É–ø–ø–∞'
        }
        
        meaningful_words = [w for w in words if w not in stop_words]
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ –∏ –¥–ª–∏–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
        word_scores = {}
        for word in meaningful_words:
            score = len(word) + meaningful_words.count(word) * 2
            word_scores[word] = score
        
        return sorted(word_scores.keys(), key=lambda w: word_scores[w], reverse=True)[:5]
    
    def _determine_dynamic_environment(self, activity, details, query):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ä–µ–¥—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        # –ë–∞–∑–æ–≤—ã–µ —Å—Ä–µ–¥—ã –¥–ª—è —Ç–∏–ø–æ–≤ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        base_environments = {
            'education': 'educational facility',
            'service': 'service center',
            'medical': 'medical facility', 
            'automotive': 'automotive facility',
            'food': 'culinary environment',
            'beauty': 'beauty salon',
            'fitness': 'fitness facility',
            'tech': 'modern office',
            'art': 'creative studio',
            'music': 'music studio',
            'photography': 'photography studio',
            'construction': 'construction site',
            'childcare': 'kindergarten classroom',
            'appliance_repair': 'technical service workshop'
        }
        
        base_env = base_environments.get(activity, 'professional office')
        
        # –£—Ç–æ—á–Ω—è–µ–º —Å—Ä–µ–¥—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ—Ç–∞–ª–µ–π
        if '–∫—É–ª–∏–Ω–∞—Ä' in query and '–∫—É—Ä—Å' in query:
            return 'professional culinary school kitchen'
        elif '—Ñ–æ—Ç–æ' in query and ('–∫—É—Ä—Å' in query or '–æ–±—É—á–µ–Ω' in query):
            return 'photography studio with professional equipment'
        elif '–º—É–∑—ã–∫' in query and '–∫—É—Ä—Å' in query:
            return 'music studio with instruments'
        elif '–∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å' in query or '—Ä–µ–º–æ–Ω—Ç –∞–≤—Ç–æ' in query:
            return 'automotive service garage'
        elif '–∞–≤—Ç–æ—Å–∞–ª–æ–Ω' in query:
            return 'car dealership showroom'
        
        return base_env
    
    def _calculate_specificity(self, query, details):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç—å —Ç–µ–º—ã"""
        # –ß–µ–º –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –∏ –¥–ª–∏–Ω–Ω–µ–µ –∑–∞–ø—Ä–æ—Å, —Ç–µ–º –≤—ã—à–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç—å
        query_words = len(query.split())
        detail_count = len([d for d in details if len(d) > 3])
        
        specificity = (query_words * 0.1) + (detail_count * 0.15)
        return min(specificity, 1.0)
    
    def _extract_smart_keywords(self, text, query):
        """–£–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
        import re
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∑–∞–ø—Ä–æ—Å
        all_text = f"{text} {query}"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–∞ –¥–ª–∏–Ω–æ–π –æ—Ç 3 —Å–∏–º–≤–æ–ª–æ–≤
        words = re.findall(r'\b[–∞-—è—ë]{3,}\b', all_text.lower())
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É
        word_freq = {}
        for word in words:
            word_freq[word] = word_freq.get(word, 0) + 1
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ —Å–ª–æ–≤–∞
        sorted_words = sorted(word_freq.items(), key=lambda x: x[1], reverse=True)
        return [word for word, freq in sorted_words[:8]]
    
    def _generate_theme_description(self, activity, details, query):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤"""
        if not details:
            return query
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ—Ç–∞–ª–µ–π
        main_detail = details[0] if details else activity
        secondary_details = details[1:3] if len(details) > 1 else []
        
        if secondary_details:
            return f"{main_detail} {' '.join(secondary_details)}"
        else:
            return main_detail
    
    def _dynamic_fallback_analysis(self, query):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π fallback –∞–Ω–∞–ª–∏–∑ –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"""
        query_lower = query.lower()
        
        if not self.silent_mode:
            print(f"üí™ –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (—Ç–æ—á–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)")
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        details = self._extract_fallback_details(query_lower)
        
        # –¢–û–ß–ù–û–ï –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º–∞—Ç–∏–∫–∏ –∏ —Å—Ä–µ–¥—ã
        activity, environment = self._precise_theme_detection(query_lower)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã
        theme_description = self._generate_precise_description(query_lower, activity)
        
        return {
            'category': 'dynamic_business',
            'business_type': activity,
            'confidence': 0.8,  # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            'details': details,
            'keywords': query.split()[:5],
            'environment': environment,
            'theme_description': theme_description
        }
    
    def _precise_theme_detection(self, query_lower):
        """–¢–æ—á–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º–∞—Ç–∏–∫–∏ –∏ —Å—Ä–µ–¥—ã"""
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        if '–∫—É–ª–∏–Ω–∞—Ä' in query_lower and '–∫—É—Ä—Å' in query_lower:
            return 'food', 'professional culinary school kitchen'
        elif '—Ñ–æ—Ç–æ' in query_lower and '–∫—É—Ä—Å' in query_lower:
            return 'photography', 'photography studio classroom'
        elif '–º—É–∑—ã–∫' in query_lower and '–∫—É—Ä—Å' in query_lower:
            return 'music', 'music education studio'
        elif '–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞' in query_lower and '–∞–≤—Ç–æ' in query_lower:
            return 'automotive', 'automotive diagnostic center'
        elif '—Ä–µ–º–æ–Ω—Ç' in query_lower and '–∞–≤—Ç–æ' in query_lower:
            return 'automotive', 'automotive repair workshop'
        elif '–¥–µ—Ç—Å–∫' in query_lower and '—Å–∞–¥' in query_lower:
            return 'childcare', 'bright kindergarten classroom'
        elif '—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥' in query_lower or '—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è' in query_lower:
            return 'medical', 'modern dental clinic'
        elif '—Ä–µ–º–æ–Ω—Ç' in query_lower and '—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫' in query_lower:
            return 'appliance_repair', 'appliance repair workshop'
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        elif any(word in query_lower for word in ['–∫—É–ª–∏–Ω–∞—Ä', '–ø–æ–≤–∞—Ä', '–≥–æ—Ç–æ–≤–∫', '–∫—É—Ö–Ω']):
            return 'food', 'professional kitchen'
        elif any(word in query_lower for word in ['—Ñ–æ—Ç–æ', '—Å—ä–µ–º–∫', '–∫–∞–º–µ—Ä']):
            return 'photography', 'photography studio'
        elif any(word in query_lower for word in ['–º—É–∑—ã–∫', '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç']):
            return 'music', 'music studio'
        elif any(word in query_lower for word in ['–∞–≤—Ç–æ', '–∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å', '–º–∞—à–∏–Ω']):
            return 'automotive', 'automotive service center'
        elif any(word in query_lower for word in ['—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥', '–∑—É–±—ã']):
            return 'medical', 'dental office'
        elif any(word in query_lower for word in ['–¥–µ—Ç—Å–∫', '–¥–µ—Ç–∏', '—Ä–µ–±–µ–Ω']):
            return 'childcare', 'children activity center'
        elif any(word in query_lower for word in ['–∫—É—Ä—Å', '–æ–±—É—á–µ–Ω', '—à–∫–æ–ª–∞', '—É—á–µ–±']):
            return 'education', 'modern classroom'
        elif any(word in query_lower for word in ['—Ä–µ–º–æ–Ω—Ç', '–º–∞—Å—Ç–µ—Ä', '–ø–æ—á–∏–Ω–∫–∞']):
            return 'service', 'professional service workshop'
        elif any(word in query_lower for word in ['–∫—Ä–∞—Å–æ—Ç–∞', '—Å–∞–ª–æ–Ω', '–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä']):
            return 'beauty', 'modern beauty salon'
        elif any(word in query_lower for word in ['—Ñ–∏—Ç–Ω–µ—Å', '—Å–ø–æ—Ä—Ç', '—Ç—Ä–µ–Ω–µ—Ä']):
            return 'fitness', 'modern fitness center'
        else:
            return 'service', 'professional business office'
    
    def _generate_precise_description(self, query_lower, activity):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ—á–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã"""
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        words = query_lower.split()
        main_words = [w for w in words if len(w) > 3][:2]
        
        if main_words:
            return ' '.join(main_words)
        else:
            # –ë–∞–∑–æ–≤—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ —Ç–∏–ø—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            descriptions = {
                'food': '–∫—É–ª–∏–Ω–∞—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏',
                'photography': '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏', 
                'music': '–º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è',
                'automotive': '–∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏',
                'medical': '–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏',
                'childcare': '–¥–µ—Ç—Å–∫–∏–µ —É—Å–ª—É–≥–∏',
                'education': '–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏',
                'service': '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏',
                'beauty': '–∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏',
                'fitness': '—Ñ–∏—Ç–Ω–µ—Å —É—Å–ª—É–≥–∏'
            }
            return descriptions.get(activity, '–±–∏–∑–Ω–µ—Å —É—Å–ª—É–≥–∏')
    
    def _extract_fallback_details(self, query):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è fallback –∞–Ω–∞–ª–∏–∑–∞"""
        import re
        
        # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–∏–º—ã—Ö —Å–ª–æ–≤
        words = re.findall(r'\b[–∞-—è—ë]{3,}\b', query)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞
        stop_words = {
            '—É—Å–ª—É–≥–∏', '—Å–µ—Ä–≤–∏—Å', '–∫–æ–º–ø–∞–Ω–∏—è', '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', '–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ', 
            '–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '—Ä–∞–±–æ—Ç–∞', '–±–∏–∑–Ω–µ—Å', '—Ü–µ–Ω—Ç—Ä', '–≥—Ä—É–ø–ø–∞', '–æ–ø–∏—Å–∞–Ω–∏–µ'
        }
        
        meaningful_words = [w for w in words if w not in stop_words]
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
        return sorted(meaningful_words, key=len, reverse=True)[:3]

class ThematicImageGenerator:
    def __init__(self, silent_mode=False):
        """
        –£–º–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ª–µ–Ω–¥–∏–Ω–≥–æ–≤
        
        Args:
            silent_mode (bool): –ï—Å–ª–∏ True, –Ω–µ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å
        """
        self.silent_mode = silent_mode
        self.context_analyzer = IntelligentContextAnalyzer(silent_mode)
        
        if not self.silent_mode:
            print("üé® AI –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –õ–µ–Ω–¥–∏–Ω–≥–æ–≤")
            print("=" * 60)
            print("‚ú® –£–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç")

    def detect_theme_from_input(self, user_input):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–º–∞—Ç–∏–∫—É —Å –ø–æ–º–æ—â—å—é –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ–∏—Å–∫–∞"""
        context_data = self.context_analyzer.search_business_context(user_input)
        return context_data['business_type'], context_data

    def generate_intelligent_prompts(self, context_data, original_input):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∞–Ω–∞–ª–∏–∑–∞"""
        
        business_type = context_data.get('business_type', 'general')
        environment = context_data['environment']
        details = context_data['details']
        keywords = context_data['keywords']
        theme_description = context_data.get('theme_description', original_input)
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å—Ä–µ–¥—ã
        return self._generate_dynamic_prompts(business_type, environment, details, keywords, theme_description, original_input)
    
    def _generate_dynamic_prompts(self, business_type, environment, details, keywords, theme_description, original_input):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤
        clean_theme = theme_description if theme_description else original_input
        
        # –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–µ–º–∞—Ç–∏–∫
        if '–∫—É–ª–∏–Ω–∞—Ä' in original_input.lower() and '–∫—É—Ä—Å' in original_input.lower():
            return self._generate_culinary_course_prompts()
        elif '—Ñ–æ—Ç–æ' in original_input.lower() and '–∫—É—Ä—Å' in original_input.lower():
            return self._generate_photography_course_prompts()
        elif '–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞' in original_input.lower() and '–∞–≤—Ç–æ' in original_input.lower():
            return self._generate_auto_diagnostic_prompts()
        elif '—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥' in original_input.lower() or '—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è' in original_input.lower():
            return self._generate_dental_prompts()
        elif '–¥–µ—Ç—Å–∫' in original_input.lower() and '—Å–∞–¥' in original_input.lower():
            return self._generate_kindergarten_prompts()
        
        # –û–ë–©–ò–ï –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–º–∞—Ç–∏–∫
        return self._generate_general_business_prompts(business_type, environment, clean_theme)
    
    def _generate_culinary_course_prompts(self):
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –∫—É–ª–∏–Ω–∞—Ä–Ω—ã—Ö –∫—É—Ä—Å–æ–≤"""
        return {
            "main": "professional culinary school kitchen, chef instructor teaching cooking techniques, students learning culinary arts",
            "about1": "professional chef demonstrating cooking techniques, culinary education in action, hands-on cooking instruction",
            "about2": "modern culinary school kitchen equipment, professional cooking tools and appliances, culinary training facility",
            "about3": "culinary consultation and course planning, chef discussing recipes with students, cooking class planning",
            "review1": "satisfied student after completing cooking course, successful culinary education experience, happy cook",
            "review2": "professional culinary instructor, expert cooking teacher, satisfied cooking course graduate",
            "review3": "group of happy cooking course graduates, successful culinary education stories, cooking skills achievement",
            "favicon": "chef hat icon, culinary education symbol, cooking course logo, professional culinary design"
        }
    
    def _generate_photography_course_prompts(self):
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ñ–æ—Ç–æ–∫—É—Ä—Å–æ–≤"""
        return {
            "main": "photography studio classroom, professional photographer teaching camera techniques, students learning photography",
            "about1": "photography instructor demonstrating camera settings, hands-on photography education, professional photo training",
            "about2": "professional photography studio equipment, cameras and lighting setup, photography education facility",
            "about3": "photography consultation and course planning, instructor discussing techniques with students, photo class planning",
            "review1": "satisfied student after photography course completion, successful photo education experience, happy photographer",
            "review2": "professional photography instructor, expert photo teacher, satisfied photography course graduate",
            "review3": "group of happy photography graduates, successful photo education stories, photography skills achievement",
            "favicon": "camera icon, photography education symbol, photo course logo, professional photography design"
        }
    
    def _generate_auto_diagnostic_prompts(self):
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –∞–≤—Ç–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        return {
            "main": "professional automotive diagnostic center, mechanic using diagnostic equipment, car engine analysis",
            "about1": "automotive technician performing car diagnostics, professional vehicle inspection, expert mechanic at work",
            "about2": "modern automotive diagnostic equipment, professional car diagnostic tools, auto service facility",
            "about3": "automotive consultation and diagnosis explanation, mechanic discussing car issues with client, vehicle service planning",
            "review1": "satisfied customer after car diagnostic service, successful vehicle repair experience, happy car owner",
            "review2": "professional automotive diagnostic specialist, expert car mechanic, satisfied auto service client",
            "review3": "group of satisfied auto service customers, successful car repair stories, automotive service satisfaction",
            "favicon": "car diagnostic icon, automotive service symbol, vehicle inspection logo, professional auto design"
        }
    
    def _generate_dental_prompts(self):
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏"""
        return {
            "main": "modern dental clinic, professional dentist examining patient, clean dental office environment",
            "about1": "dentist performing dental examination, professional dental care, expert dentist at work",
            "about2": "modern dental equipment and tools, professional dental office setup, dental clinic facility",
            "about3": "dental consultation and treatment planning, dentist discussing treatment with patient, dental care planning",
            "review1": "satisfied patient after dental treatment, successful dental care experience, happy smile",
            "review2": "professional dentist, expert dental specialist, satisfied dental patient",
            "review3": "group of satisfied dental patients, successful dental treatment stories, dental care satisfaction",
            "favicon": "tooth icon, dental care symbol, dentist logo, professional dental design"
        }
    
    def _generate_kindergarten_prompts(self):
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –¥–µ—Ç—Å–∫–æ–≥–æ —Å–∞–¥–∞"""
        return {
            "main": "bright kindergarten classroom, children playing and learning, professional childcare environment",
            "about1": "kindergarten teacher with children, educational play activities, professional childcare in action",
            "about2": "colorful kindergarten classroom with toys and learning materials, children's educational environment",
            "about3": "parent consultation at kindergarten, discussing child development with teachers, childcare planning",
            "review1": "happy child enjoying kindergarten activities, successful early education experience, joyful learning",
            "review2": "satisfied parent and happy child, professional kindergarten teacher, quality childcare service",
            "review3": "group of happy children and parents, successful kindergarten stories, quality early education",
            "favicon": "children icon, kindergarten symbol, childcare logo, professional early education design"
        }
    
    def _generate_general_business_prompts(self, business_type, environment, theme):
        """–û–±—â–∏–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –ª—é–±–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞"""
        return {
            "main": f"{environment}, professional {business_type} service, expert specialist at work",
            "about1": f"professional {business_type} specialist providing service, expert working with client, quality service delivery",
            "about2": f"{environment} with professional equipment, {business_type} workspace setup, service facility",
            "about3": f"{theme} consultation area, client meeting with specialist, professional service planning",
            "review1": f"satisfied customer after {business_type} service, successful {theme} experience, happy client",
            "review2": f"professional {business_type} specialist, expert service provider, satisfied customer testimonial",
            "review3": f"group of happy customers, successful {theme} stories, positive service reviews",
            "favicon": f"{business_type} icon, professional service symbol, business logo design"
        }

    def get_theme_prompts(self, theme_input):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–º–ø—Ç—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∞–Ω–∞–ª–∏–∑–∞"""
        detected_theme, context_data = self.detect_theme_from_input(theme_input)
        
        if not self.silent_mode:
            print(f"üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {detected_theme}")
            print(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {context_data['confidence']:.2f}")
            print(f"üîç –î–µ—Ç–∞–ª–∏: {', '.join(context_data['details'])}")
            print(f"üè¢ –°—Ä–µ–¥–∞: {context_data['environment']}")
        
        prompts = self.generate_intelligent_prompts(context_data, theme_input)
        return prompts, detected_theme

    def add_randomization(self, prompt):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫ –ø—Ä–æ–º–ø—Ç—É –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏"""
        
        # –°–ª—É—á–∞–π–Ω—ã–µ —Å—Ç–∏–ª–∏ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        styles = [
            "natural lighting", "soft lighting", "bright ambient", "professional lighting"
        ]
        
        # –°–ª—É—á–∞–π–Ω—ã–µ —Ä–∞–∫—É—Ä—Å—ã
        angles = [
            "wide angle shot", "medium shot", "close-up view", "establishing shot", 
            "straight on", "professional angle"
        ]
        
        # –°–ª—É—á–∞–π–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞/—ç–∫—Å—Ç–µ—Ä—å–µ—Ä–∞
        details = [
            "modern furniture", "elegant decor", "contemporary design", "minimalist style",
            "professional setup", "clean lines", "stylish arrangement"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (—É–±—Ä–∞–ª–∏ —Ü–≤–µ—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã)
        selected_style = random.choice(styles)
        selected_angle = random.choice(angles)
        selected_detail = random.choice(details)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π seed –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏
        unique_seed = str(uuid.uuid4())[:8]
        
        enhanced_prompt = f"{prompt}, {selected_style}, {selected_angle}, {selected_detail}, seed:{unique_seed}"
        
        return enhanced_prompt

    def add_favicon_randomization(self, prompt):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—é –¥–ª—è —Ñ–∞–≤–∏–∫–æ–Ω–æ–∫"""
        
        # –°—Ç–∏–ª–∏ –∏–∫–æ–Ω–æ–∫
        icon_styles = [
            "minimalist icon", "modern flat icon", "geometric icon", "abstract icon",
            "stylized icon", "contemporary icon", "sleek icon", "professional icon"
        ]
        
        # –í–∞—Ä–∏–∞–Ω—Ç—ã –¥–∏–∑–∞–π–Ω–∞
        design_variants = [
            "circular design", "square design", "rounded square", "hexagonal shape",
            "shield shape", "badge style", "emblem style", "logo mark"
        ]
        
        # –í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –∏–∫–æ–Ω–æ–∫
        visual_effects = [
            "subtle gradient", "solid colors", "duo-tone", "monochrome",
            "outlined style", "filled style", "negative space", "geometric patterns"
        ]
        
        # –ö–æ–º–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        compositions = [
            "centered composition", "balanced layout", "symmetrical design", "dynamic arrangement",
            "focused element", "simplified form", "clean structure", "bold design"
        ]
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        selected_style = random.choice(icon_styles)
        selected_design = random.choice(design_variants)
        selected_effect = random.choice(visual_effects)
        selected_composition = random.choice(compositions)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π seed
        unique_seed = str(uuid.uuid4())[:8]
        
        enhanced_prompt = f"{prompt}, {selected_style}, {selected_design}, {selected_effect}, {selected_composition}, seed:{unique_seed}"
        
        return enhanced_prompt

class ImageGenerator:
    def __init__(self, silent_mode=False, use_icons8_for_favicons=True):
        """
        –ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–æ–≤
        
        Args:
            silent_mode (bool): –ï—Å–ª–∏ True, –Ω–µ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å
            use_icons8_for_favicons (bool): –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Icons8 –¥–ª—è —Ñ–∞–≤–∏–∫–æ–Ω–æ–∫
        """
        self.silent_mode = silent_mode
        self.use_icons8_for_favicons = use_icons8_for_favicons
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Icons8 Manager –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        self.icons8_manager = None
        if self.use_icons8_for_favicons:
            try:
                from icons8_api import Icons8Manager
                self.icons8_manager = Icons8Manager(silent_mode=True)
                if not silent_mode:
                    print("üéØ Icons8 Manager –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è —Ñ–∞–≤–∏–∫–æ–Ω–æ–∫")
            except ImportError:
                if not silent_mode:
                    print("‚ö†Ô∏è Icons8 API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è")
                self.use_icons8_for_favicons = False
        
        if not silent_mode:
            print("üé® AI –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            print("=" * 50)
            print("‚ú® –í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–æ–≤")
            if self.use_icons8_for_favicons:
                print("üéØ Icons8 –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ñ–∞–≤–∏–∫–æ–Ω–æ–∫")
        
    def remove_watermark(self, image):
        """–£–¥–∞–ª—è–µ—Ç –≤–æ—Ç–µ—Ä–º–∞—Ä–∫ —Å–Ω–∏–∑—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            width, height = image.size
            
            # –û–±—Ä–µ–∑–∞–µ–º –Ω–∏–∂–Ω–∏–µ 30 –ø–∏–∫—Å–µ–ª–µ–π –≥–¥–µ –æ–±—ã—á–Ω–æ –≤–æ—Ç–µ—Ä–º–∞—Ä–∫
            cropped_height = height - 30
            cropped_image = image.crop((0, 0, width, cropped_height))
            
            # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –¥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            final_image = cropped_image.resize((width, height), Image.Resampling.LANCZOS)
            
            return final_image
        except:
            return image
    
    def make_favicon_transparent(self, image):
        """–î–µ–ª–∞–µ—Ç —Ñ–∞–≤–∏–∫–æ–Ω–∫—É –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
            try:
                from favicon_processor import AdvancedFaviconProcessor
                processor = AdvancedFaviconProcessor(silent_mode=True)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ
                import tempfile
                with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as temp_file:
                    image.save(temp_file.name)
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
                    processed = processor._advanced_background_removal(image)
                    if processed:
                        if not self.silent_mode:
                            print("üé® –ü—Ä–∏–º–µ–Ω–µ–Ω –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞")
                        return processed
                    
            except ImportError:
                if not self.silent_mode:
                    print("‚ö†Ô∏è –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º")
            
            # –ë–∞–∑–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º (—É–ª—É—á—à–µ–Ω–Ω—ã–π)
            return self._basic_background_removal(image)
            
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏: {e}")
            return image
    
    def _basic_background_removal(self, image):
        """–ë–∞–∑–æ–≤—ã–π —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGBA –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if image.mode != 'RGBA':
                image = image.convert('RGBA')
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∏–∫—Å–µ–ª–µ–π
            data = image.getdata()
            width, height = image.size
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—Ä–∞—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–æ–ª–µ–µ —Ç—â–∞—Ç–µ–ª—å–Ω–æ
            edge_pixels = []
            
            # –°–æ–±–∏—Ä–∞–µ–º –±–æ–ª—å—à–µ –ø–∏–∫—Å–µ–ª–µ–π —Å –∫—Ä–∞–µ–≤
            edge_sample_size = max(5, min(width, height) // 20)
            
            # –í–µ—Ä—Ö–Ω–∏–π –∏ –Ω–∏–∂–Ω–∏–π –∫—Ä–∞—è
            for x in range(0, width, max(1, width//edge_sample_size)):
                edge_pixels.append(image.getpixel((x, 0)))
                edge_pixels.append(image.getpixel((x, height-1)))
            
            # –õ–µ–≤—ã–π –∏ –ø—Ä–∞–≤—ã–π –∫—Ä–∞—è  
            for y in range(0, height, max(1, height//edge_sample_size)):
                edge_pixels.append(image.getpixel((0, y)))
                edge_pixels.append(image.getpixel((width-1, y)))
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–π —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
            bg_color = self._find_background_color(edge_pixels)
            
            if not bg_color:
                if not self.silent_mode:
                    print("üé® –§–æ–Ω –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")
                return image
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º
            new_data = []
            pixels_made_transparent = 0
            
            for item in data:
                if self._is_background_pixel_improved(item, bg_color):
                    new_data.append((255, 255, 255, 0))  # –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π
                    pixels_made_transparent += 1
                else:
                    new_data.append(item)  # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è
            total_pixels = len(data)
            transparency_ratio = pixels_made_transparent / total_pixels
            
            if transparency_ratio > 0.8:  # –ü–æ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç
                if not self.silent_mode:
                    print(f"üö´ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è ({transparency_ratio:.1%}), –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")
                return image
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            image.putdata(new_data)
            
            if not self.silent_mode:
                print(f"üé® –£–¥–∞–ª–µ–Ω —Ñ–æ–Ω RGB{bg_color}, –ø—Ä–æ–∑—Ä–∞—á–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π: {transparency_ratio:.1%}")
            
            return image
            
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞: {e}")
            return image
    
    def _find_background_color(self, pixels):
        """–ù–∞—Ö–æ–¥–∏—Ç —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –∏–∑ –ø–∏–∫—Å–µ–ª–µ–π –∫—Ä–∞–µ–≤"""
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–µ—Ç–ª—ã–µ –ø–∏–∫—Å–µ–ª–∏
        light_pixels = []
        for pixel in pixels:
            if len(pixel) >= 3:
                r, g, b = pixel[0], pixel[1], pixel[2]
                # –†–∞—Å—à–∏—Ä–∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                if r > 220 and g > 220 and b > 220:
                    light_pixels.append((r, g, b))
        
        if not light_pixels:
            return None
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ü–≤–µ—Ç–∞
        color_groups = {}
        for color in light_pixels:
            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –≥—Ä—É–ø–ø –ø–æ 15
            group_key = (
                (color[0] // 15) * 15,
                (color[1] // 15) * 15,
                (color[2] // 15) * 15
            )
            color_groups[group_key] = color_groups.get(group_key, 0) + 1
        
        if not color_groups:
            return None
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—É—é —á–∞—Å—Ç—É—é –≥—Ä—É–ø–ø—É
        return max(color_groups.keys(), key=lambda k: color_groups[k])
    
    def _is_background_pixel_improved(self, pixel, bg_color, tolerance=30):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–∏–∫—Å–µ–ª—è"""
        if len(pixel) < 3 or not bg_color:
            return False
        
        r, g, b = pixel[0], pixel[1], pixel[2]
        bg_r, bg_g, bg_b = bg_color[0], bg_color[1], bg_color[2]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–∏–∑–æ—Å—Ç—å —Ü–≤–µ—Ç–æ–≤
        distance = ((r - bg_r) ** 2 + (g - bg_g) ** 2 + (b - bg_b) ** 2) ** 0.5
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–≤–µ—Ç–ª–æ—Å—Ç—å
        is_light = r > 210 and g > 210 and b > 210
        
        return distance <= tolerance and is_light
        
    def translate_prompt(self, russian_prompt: str):
        """–ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–æ–º–ø—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"""
        translations = {
            "–∫–æ—Ç": "cat", "–∫–æ—Ç–µ–Ω–æ–∫": "kitten", "–∫–æ—Ç–µ–Ω–æ—á–µ–∫": "cute kitten",
            "—Å–æ–±–∞–∫–∞": "dog", "—â–µ–Ω–æ–∫": "puppy", "–ø–µ—Å–∏–∫": "dog",
            "–∑–∞–∫–∞—Ç": "sunset", "–≥–æ—Ä—ã": "mountains", "–ª–µ—Å": "forest",
            "–º–æ—Ä–µ": "ocean", "–ø–ª—è–∂": "beach", "–¥–æ–º": "house", 
            "–≥–æ—Ä–æ–¥": "city", "–∞–≤—Ç–æ–º–æ–±–∏–ª—å": "car", "–º–∞—à–∏–Ω–∞": "car",
            "—Ü–≤–µ—Ç—ã": "flowers", "—Ä–æ–∑–∞": "rose", "—Ç—é–ª—å–ø–∞–Ω": "tulip",
            "–¥–µ–≤—É—à–∫–∞": "woman", "–∂–µ–Ω—â–∏–Ω–∞": "woman", "–¥–µ–≤–æ—á–∫–∞": "girl",
            "–º—É–∂—á–∏–Ω–∞": "man", "–ø–∞—Ä–µ–Ω—å": "young man", "–º–∞–ª—å—á–∏–∫": "boy",
            "—Ä–µ–±–µ–Ω–æ–∫": "child", "–¥–µ—Ç–∏": "children",
            "–∫—Ä–∞—Å–∏–≤—ã–π": "beautiful", "–∫—Ä–∞—Å–∏–≤–∞—è": "beautiful",
            "—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π": "realistic", "—Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π": "photorealistic",
            "–ø–æ—Ä—Ç—Ä–µ—Ç": "portrait", "–ø–µ–π–∑–∞–∂": "landscape",
            "–ø—Ä–∏—Ä–æ–¥–∞": "nature", "–≤–µ—Å–Ω–∞": "spring", "–ª–µ—Ç–æ": "summer",
            "–æ—Å–µ–Ω—å": "autumn", "–∑–∏–º–∞": "winter",
            "–¥–æ–∂–¥—å": "rain", "—Å–Ω–µ–≥": "snow", "—Å–æ–ª–Ω—Ü–µ": "sun",
            "–Ω–µ–±–æ": "sky", "–æ–±–ª–∞–∫–∞": "clouds", "–∑–≤–µ–∑–¥—ã": "stars",
            "–µ–¥–∞": "food", "—Ç–æ—Ä—Ç": "cake", "–ø–∏—Ü—Ü–∞": "pizza"
        }
        
        english_prompt = russian_prompt.lower()
        for ru, en in translations.items():
            english_prompt = english_prompt.replace(ru, en)
        
        return english_prompt
    
    def generate_via_pollinations_clean(self, prompt):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Pollinations AI —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–∞"""
        try:
            enhanced_prompt = f"{prompt}, high quality, detailed, masterpiece, 8k, professional photography"
            
            base_url = "https://image.pollinations.ai/prompt/"
            
            import urllib.parse
            encoded_prompt = urllib.parse.quote(enhanced_prompt)
            
            params = "?width=1024&height=1024&model=flux&enhance=true&nologo=true"
            
            image_url = base_url + encoded_prompt + params
            
            if not self.silent_mode:
                print(f"üìù –ü—Ä–æ–º–ø—Ç: {enhanced_prompt}")
                print("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–∞...")
            
            response = requests.get(image_url, timeout=120)
            
            if response.status_code == 200:
                image = Image.open(BytesIO(response.content))
                
                # –£–¥–∞–ª—è–µ–º –≤–æ—Ç–µ—Ä–º–∞—Ä–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
                clean_image = self.remove_watermark(image)
                
                return clean_image
            else:
                if not self.silent_mode:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                return None
                
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return None

    def compress_image(self, image, target_size_kb=150, quality=85):
        """
        –°–∂–∏–º–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –≤ –∫–∏–ª–æ–±–∞–π—Ç–∞—Ö
        
        Args:
            image: PIL Image –æ–±—ä–µ–∫—Ç
            target_size_kb: –¶–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä –≤ –∫–∏–ª–æ–±–∞–π—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 150–∫–±)
            quality: –ö–∞—á–µ—Å—Ç–≤–æ JPEG (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 85)
        
        Returns:
            PIL Image: –°–∂–∞—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        """
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
            original_width, original_height = image.size
            
            # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, —É–º–µ–Ω—å—à–∞–µ–º –µ–≥–æ
            max_dimension = 1200  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å—Ç–æ—Ä–æ–Ω—ã
            if original_width > max_dimension or original_height > max_dimension:
                # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
                if original_width > original_height:
                    new_width = max_dimension
                    new_height = int((original_height * max_dimension) / original_width)
                else:
                    new_height = max_dimension
                    new_width = int((original_width * max_dimension) / original_height)
                
                image = image.resize((new_width, new_height), Image.Resampling.LANCZOS)
                
                if not self.silent_mode:
                    print(f"üîÑ –†–∞–∑–º–µ—Ä –∏–∑–º–µ–Ω–µ–Ω —Å {original_width}x{original_height} –Ω–∞ {new_width}x{new_height}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–∂–∞—Ç–∏—è
            has_transparency = False
            if image.mode in ('RGBA', 'LA') or 'transparency' in image.info:
                has_transparency = True
            
            # –°–∂–∞—Ç–∏–µ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é (PNG)
            if has_transparency:
                return self._compress_png(image, target_size_kb)
            else:
                # –°–∂–∞—Ç–∏–µ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (JPEG)
                return self._compress_jpeg(image, target_size_kb, quality)
                
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è: {e}")
            return image
    
    def _compress_jpeg(self, image, target_size_kb, initial_quality=85):
        """–°–∂–∏–º–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ JPEG —Ñ–æ—Ä–º–∞—Ç–µ"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if image.mode in ('RGBA', 'LA'):
                # –°–æ–∑–¥–∞–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω
                background = Image.new('RGB', image.size, (255, 255, 255))
                if image.mode == 'RGBA':
                    background.paste(image, mask=image.split()[-1])
                else:
                    background.paste(image, mask=image.split()[-1])
                image = background
            elif image.mode != 'RGB':
                image = image.convert('RGB')
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–∞
            for quality in range(initial_quality, 20, -5):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
                import io
                buffer = io.BytesIO()
                image.save(buffer, format='JPEG', quality=quality, optimize=True)
                size_kb = len(buffer.getvalue()) / 1024
                
                if size_kb <= target_size_kb:
                    if not self.silent_mode:
                        print(f"üì¶ –°–∂–∞—Ç–æ –¥–æ {size_kb:.1f}–∫–± (–∫–∞—á–µ—Å—Ç–≤–æ: {quality})")
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –±—É—Ñ–µ—Ä–∞
                    buffer.seek(0)
                    return Image.open(buffer)
                    
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
            if not self.silent_mode:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∏—á—å {target_size_kb}–∫–±, —Å–∂–∞—Ç–æ —Å –∫–∞—á–µ—Å—Ç–≤–æ–º 25")
            
            buffer = io.BytesIO()
            image.save(buffer, format='JPEG', quality=25, optimize=True)
            buffer.seek(0)
            return Image.open(buffer)
            
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ JPEG —Å–∂–∞—Ç–∏—è: {e}")
            return image
    
    def _compress_png(self, image, target_size_kb):
        """–°–∂–∏–º–∞–µ—Ç PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏"""
        try:
            # –ü—Ä–æ–±—É–µ–º —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–≤–µ—Ç–æ–≤
            original_mode = image.mode
            
            # –î–ª—è PNG –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            import io
            
            # –ü—Ä–æ–±—É–µ–º —Å optimize=True
            buffer = io.BytesIO()
            image.save(buffer, format='PNG', optimize=True)
            size_kb = len(buffer.getvalue()) / 1024
            
            if size_kb <= target_size_kb:
                if not self.silent_mode:
                    print(f"üì¶ PNG —Å–∂–∞—Ç –¥–æ {size_kb:.1f}–∫–± (optimize)")
                buffer.seek(0)
                return Image.open(buffer)
            
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –≤—Å—ë –µ—â—ë –±–æ–ª—å—à–æ–π, –ø—Ä–æ–±—É–µ–º —É–º–µ–Ω—å—à–∏—Ç—å —Ü–≤–µ—Ç–∞
            if original_mode == 'RGBA':
                # –ö–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
                quantized = image.quantize(colors=256, method=Image.Quantize.MEDIANCUT)
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ RGBA —Ä–µ–∂–∏–º
                quantized = quantized.convert('RGBA')
                
                buffer = io.BytesIO()
                quantized.save(buffer, format='PNG', optimize=True)
                size_kb = len(buffer.getvalue()) / 1024
                
                if size_kb <= target_size_kb:
                    if not self.silent_mode:
                        print(f"üì¶ PNG —Å–∂–∞—Ç –¥–æ {size_kb:.1f}–∫–± (–∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è)")
                    buffer.seek(0)
                    return Image.open(buffer)
            
            # –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –±–æ–ª—å—à–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
            buffer = io.BytesIO()
            image.save(buffer, format='PNG', optimize=True)
            final_size_kb = len(buffer.getvalue()) / 1024
            
            if not self.silent_mode:
                print(f"üì¶ PNG —Å–∂–∞—Ç –¥–æ {final_size_kb:.1f}–∫–± (–ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)")
            
            buffer.seek(0)
            return Image.open(buffer)
            
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ PNG —Å–∂–∞—Ç–∏—è: {e}")
            return image
    
    def save_compressed_image(self, image, filepath, target_size_kb=150):
        """
        –°–∂–∏–º–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        
        Args:
            image: PIL Image –æ–±—ä–µ–∫—Ç
            filepath: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            target_size_kb: –¶–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä –≤ –∫–∏–ª–æ–±–∞–π—Ç–∞—Ö
        """
        try:
            # –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            compressed_image = self.compress_image(image, target_size_kb)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞
            file_path = Path(filepath)
            extension = file_path.suffix.lower()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–∂–∞—Ç–∏—è
            has_transparency = False
            if compressed_image.mode in ('RGBA', 'LA') or 'transparency' in compressed_image.info:
                has_transparency = True
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ
            if extension == '.png' and has_transparency:
                # PNG —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
                compressed_image.save(filepath, format='PNG', optimize=True)
            elif extension == '.png' and not has_transparency:
                # PNG –±–µ–∑ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JPEG –¥–ª—è –ª—É—á—à–µ–≥–æ —Å–∂–∞—Ç–∏—è
                jpeg_path = str(file_path).replace('.png', '.jpg')
                if compressed_image.mode in ('RGBA', 'LA'):
                    background = Image.new('RGB', compressed_image.size, (255, 255, 255))
                    if compressed_image.mode == 'RGBA':
                        background.paste(compressed_image, mask=compressed_image.split()[-1])
                    compressed_image = background
                elif compressed_image.mode != 'RGB':
                    compressed_image = compressed_image.convert('RGB')
                
                compressed_image.save(jpeg_path, format='JPEG', quality=85, optimize=True)
                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ PNG –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                os.rename(jpeg_path, filepath)
            elif extension in ['.jpg', '.jpeg']:
                # JPEG —Ñ–æ—Ä–º–∞—Ç
                if compressed_image.mode in ('RGBA', 'LA'):
                    background = Image.new('RGB', compressed_image.size, (255, 255, 255))
                    if compressed_image.mode == 'RGBA':
                        background.paste(compressed_image, mask=compressed_image.split()[-1])
                    compressed_image = background
                elif compressed_image.mode != 'RGB':
                    compressed_image = compressed_image.convert('RGB')
                
                compressed_image.save(filepath, format='JPEG', quality=85, optimize=True)
            else:
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–æ—Ä–º–∞—Ç
                if has_transparency:
                    compressed_image.save(filepath, format='PNG', optimize=True)
                else:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ JPEG –¥–ª—è –ª—É—á—à–µ–≥–æ —Å–∂–∞—Ç–∏—è
                    if compressed_image.mode in ('RGBA', 'LA'):
                        background = Image.new('RGB', compressed_image.size, (255, 255, 255))
                        if compressed_image.mode == 'RGBA':
                            background.paste(compressed_image, mask=compressed_image.split()[-1])
                        compressed_image = background
                    elif compressed_image.mode != 'RGB':
                        compressed_image = compressed_image.convert('RGB')
                    
                    jpeg_path = str(file_path).replace(extension, '.jpg')
                    compressed_image.save(jpeg_path, format='JPEG', quality=85, optimize=True)
                    os.rename(jpeg_path, filepath)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä
            final_size_kb = Path(filepath).stat().st_size / 1024
            if not self.silent_mode:
                print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filepath} ({final_size_kb:.1f}–∫–±)")
            
            return True
            
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False

    def generate_thematic_set(self, theme_input, media_dir, method="1", progress_callback=None):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –∏–∑ 8 —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        
        Args:
            theme_input (str): –¢–µ–º–∞—Ç–∏–∫–∞ –±–∏–∑–Ω–µ—Å–∞
            media_dir (str): –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ media
            method (str): –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (1, 2, 3)
            progress_callback (callable): –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {–∏–º—è_—Ñ–∞–π–ª–∞: –ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É –∏–ª–∏ None}
        """
        thematic_gen = ThematicImageGenerator(silent_mode=self.silent_mode)
        prompts, detected_theme = thematic_gen.get_theme_prompts(theme_input)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É media –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(media_dir, exist_ok=True)
        
        if not self.silent_mode:
            print(f"\nüé® –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é 8 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ–º–∞—Ç–∏–∫–∏: {detected_theme}")
            print("=" * 60)
        
        if progress_callback:
            progress_callback(f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ–º–∞—Ç–∏–∫–∏: {detected_theme}")
        
        image_names = ["main", "about1", "about2", "about3", "review1", "review2", "review3", "favicon"]
        results = {}
        
        for i, image_name in enumerate(image_names, 1):
            if not self.silent_mode:
                print(f"\nüñºÔ∏è  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {i}/8: {image_name}")
                print("-" * 40)
            
            if progress_callback:
                progress_callback(f"üñºÔ∏è  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {i}/8: {image_name}")
            
            prompt = prompts[image_name]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—é –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
            if image_name == "favicon":
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—è –¥–ª—è —Ñ–∞–≤–∏–∫–æ–Ω–æ–∫
                prompt = thematic_gen.add_favicon_randomization(prompt)
                prompt += ", TRANSPARENT BACKGROUND, icon design, vector style, flat design, simple logo, no background, white cutout, isolated on transparent, PNG with alpha channel, clear background, cutout style, logo without background"
            else:
                # –û–±—ã—á–Ω–∞—è —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                prompt = thematic_gen.add_randomization(prompt)
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏
            if image_name == "favicon" and self.use_icons8_for_favicons and self.icons8_manager:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º Icons8 –¥–ª—è —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏
                filename = os.path.join(media_dir, f"{image_name}.png")
                favicon_success = self.icons8_manager.create_favicon_from_theme(theme_input, filename, 512)
                
                if favicon_success:
                    results[image_name] = filename
                    if not self.silent_mode:
                        print(f"‚úÖ –§–∞–≤–∏–∫–æ–Ω–∫–∞ Icons8 —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filename}")
                else:
                    if not self.silent_mode:
                        print("‚ö†Ô∏è Icons8 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—é")
                    # Fallback –Ω–∞ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
                    image = self.generate_via_pollinations_clean(prompt)
                    if image:
                        image = image.resize((512, 512), Image.Resampling.LANCZOS)
                        image = self.make_favicon_transparent(image)
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∂–∞—Ç–∏–µ –¥–ª—è AI —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏ (—Ü–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä 50–∫–±)
                        filename = os.path.join(media_dir, f"{image_name}.png")
                        if self.save_compressed_image(image, filename, target_size_kb=50):
                            results[image_name] = filename
                            if not self.silent_mode:
                                print(f"‚úÖ AI —Ñ–∞–≤–∏–∫–æ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filename}")
                        else:
                            results[image_name] = None
                    else:
                        results[image_name] = None
            else:
                # –û–±—ã—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                image = self.generate_via_pollinations_clean(prompt)
                
                if image:
                    filename = os.path.join(media_dir, f"{image_name}.png")
                    
                    # –î–ª—è AI —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏ –¥–µ–ª–∞–µ–º —Ä–∞–∑–º–µ—Ä 512x512 –∏ —É–±–∏—Ä–∞–µ–º —Ñ–æ–Ω
                    if image_name == "favicon":
                        image = image.resize((512, 512), Image.Resampling.LANCZOS)
                        image = self.make_favicon_transparent(image)
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∂–∞—Ç–∏–µ –¥–ª—è AI —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏ (—Ü–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä 50–∫–±)
                        if self.save_compressed_image(image, filename, target_size_kb=50):
                            results[image_name] = filename
                            if not self.silent_mode:
                                print(f"‚úÖ AI —Ñ–∞–≤–∏–∫–æ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å —Å–∂–∞—Ç–∏–µ–º: {filename}")
                        else:
                            results[image_name] = None
                    else:
                        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∂–∞—Ç–∏–µ –¥–æ 150–∫–±
                        if self.save_compressed_image(image, filename, target_size_kb=150):
                            results[image_name] = filename
                            if not self.silent_mode:
                                print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å —Å–∂–∞—Ç–∏–µ–º: {filename}")
                        else:
                            results[image_name] = None
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–Ω–µ –Ω—É–∂–Ω–∞ –¥–ª—è Icons8)
                    if image_name != "favicon" or not self.use_icons8_for_favicons:
                        time.sleep(2)
                else:
                    if not self.silent_mode:
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å {image_name}")
                    results[image_name] = None
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if not self.silent_mode:
            print(f"\nüéâ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
            print("=" * 60)
            print(f"üìÅ –ü–∞–ø–∫–∞: {media_dir}")
            print(f"üéØ –¢–µ–º–∞—Ç–∏–∫–∞: {detected_theme}")
            print("\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
            
            for name, filename in results.items():
                if filename:
                    print(f"  ‚úÖ {name}: {filename}")
                else:
                    print(f"  ‚ùå {name}: –ù–ï –°–û–ó–î–ê–ù")
        
        if progress_callback:
            successful_count = len([f for f in results.values() if f is not None])
            progress_callback(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {successful_count}/8 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        return results

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    generator = ImageGenerator()
    
    print("\nüåü –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π AI-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ª—é–±—ã—Ö —Ç–µ–º–∞—Ç–∏–∫!")
    print("=" * 60)
    print("üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç")
    print("üé® –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –ª—é–±—É—é —Ç–µ–º–∞—Ç–∏–∫—É")
    print()
    
    while True:
        theme_input = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É –±–∏–∑–Ω–µ—Å–∞ (–∏–ª–∏ '–≤—ã—Ö–æ–¥'): ").strip()
        
        if theme_input.lower() in ['–≤—ã—Ö–æ–¥', 'exit', 'quit']:
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
            
        if not theme_input:
            continue
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–±–æ—Ä
            results = generator.generate_thematic_set(theme_input, "media", "1")
            
            print(f"\nüí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–≤–æ–µ–º –ª–µ–Ω–¥–∏–Ω–≥–µ!")
            print("   –ü—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–∞–ø–∫—É 'media' –≤ –≤–∞—à –ø—Ä–æ–µ–∫—Ç.")
            
            continue_choice = input("\n–°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –¥—Ä—É–≥–æ–π —Ç–µ–º–∞—Ç–∏–∫–∏? (y/n): ").strip().lower()
            if continue_choice in ['n', 'no', '–Ω–µ—Ç']:
                break
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main() 