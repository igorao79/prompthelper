import requests
import datetime
import os
from PIL import Image, ImageDraw
from io import BytesIO
import json
import time
import random
import uuid
import re
from urllib.parse import quote
from pathlib import Path

class IntelligentContextAnalyzer_DEPRECATED_DO_NOT_USE:
    """–£–ú–ù–´–ô –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ª—é–±—ã—Ö —Ç–µ–º–∞—Ç–∏–∫ –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"""
    
    def __init__(self, silent_mode=False):
        self.silent_mode = silent_mode
        
        # –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        self.translations = {
            # –¢–∏–ø—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            '–ø—Ä–æ–¥–∞–∂–∞': 'sales', '–ø—Ä–æ–¥–∞–∂': 'sales', '–ø—Ä–æ–¥–∞–µ–º': 'sales',
            '–ø–æ–∫—É–ø–∫–∞': 'purchase', '–ø–æ–∫—É–ø–∞–µ–º': 'purchase',
            '–∞—Ä–µ–Ω–¥–∞': 'rental', '–∞—Ä–µ–Ω–¥—É–µ–º': 'rental', '—Å–¥–∞–µ–º': 'rental',
            '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ': 'manufacturing', '–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º': 'manufacturing',
            '–∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ': 'manufacturing', '–∏–∑–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º': 'manufacturing',
            '—Ä–µ–º–æ–Ω—Ç': 'repair', '—Ä–µ–º–æ–Ω—Ç–∏—Ä—É–µ–º': 'repair', '–ø–æ—á–∏–Ω–∫–∞': 'repair',
            '—É—Å—Ç–∞–Ω–æ–≤–∫–∞': 'installation', '—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º': 'installation',
            '–º–æ–Ω—Ç–∞–∂': 'installation', '–º–æ–Ω—Ç–∏—Ä—É–µ–º': 'installation',
            '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ': 'construction', '—Å—Ç—Ä–æ–∏–º': 'construction',
            '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è': 'consulting', '–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ–º': 'consulting',
            '–æ–±—É—á–µ–Ω–∏–µ': 'training', '–æ–±—É—á–∞–µ–º': 'training', '–∫—É—Ä—Å—ã': 'training',
            '–¥–æ—Å—Ç–∞–≤–∫–∞': 'delivery', '–¥–æ—Å—Ç–∞–≤–ª—è–µ–º': 'delivery',
            '–ø–µ—Ä–µ–≤–æ–∑–∫–∞': 'transportation', '–ø–µ—Ä–µ–≤–æ–∑–∏–º': 'transportation',
            '–¥–∏–∑–∞–π–Ω': 'design', '–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ': 'design',
            
            # –ü—Ä–µ–¥–º–µ—Ç—ã –∏ —Ç–æ–≤–∞—Ä—ã
            '–ª–µ—Å—Ç–Ω–∏—Ü': 'stairs', '–ª–µ—Å—Ç–Ω–∏—Ü—ã': 'stairs', '–ª–µ—Å—Ç–Ω–∏—Ü–∞': 'stairs',
            '–æ–∫–Ω': 'windows', '–æ–∫–Ω–∞': 'windows', '–æ–∫–Ω–æ': 'windows',
            '–¥–≤–µ—Ä': 'doors', '–¥–≤–µ—Ä—å': 'doors', '–¥–≤–µ—Ä–∏': 'doors',
            '–º–µ–±–µ–ª': 'furniture', '–º–µ–±–µ–ª—å': 'furniture',
            '–∞–≤—Ç–æ–º–æ–±–∏–ª': 'cars', '–º–∞—à–∏–Ω': 'cars', '–∞–≤—Ç–æ': 'cars',
            '—Ç–µ–ª–µ—Ñ–æ–Ω': 'phones', '—Å–º–∞—Ä—Ç—Ñ–æ–Ω': 'smartphones',
            '–∫–æ–º–ø—å—é—Ç–µ—Ä': 'computers', '–Ω–æ—É—Ç–±—É–∫': 'laptops',
            '–æ–¥–µ–∂–¥': 'clothing', '–æ–¥–µ–∂–¥–∞': 'clothing',
            '–æ–±—É–≤': 'shoes', '–æ–±—É–≤—å': 'shoes',
            '—Å—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª': 'building materials', '–º–∞—Ç–µ—Ä–∏–∞–ª': 'materials',
            '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç': 'tools', '–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ': 'equipment',
            '—Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫': 'plumbing', '—Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞': 'plumbing',
            '—ç–ª–µ–∫—Ç—Ä–∏–∫': 'electrical', '—ç–ª–µ–∫—Ç—Ä–∏–∫–∞': 'electrical',
            '–∫—Ä–æ–≤–ª': 'roofing', '–∫—Ä—ã—à': 'roofing', '–∫—Ä–æ–≤–ª—è': 'roofing',
            '—Ñ—É–Ω–¥–∞–º–µ–Ω—Ç': 'foundation', '–ø–æ–¥–≤–∞–ª': 'basement',
            '–∫—É—Ö–Ω': 'kitchen', '–∫—É—Ö–Ω—è': 'kitchen', '–∫—É—Ö–Ω–∏': 'kitchen',
            '–≤–∞–Ω–Ω': 'bathroom', '–≤–∞–Ω–Ω–∞—è': 'bathroom',
            '–ø–ª–∏—Ç–∫': 'tiles', '–ø–ª–∏—Ç–∫–∞': 'tiles',
            '–æ–±–æ–∏': 'wallpaper', '–∫—Ä–∞—Å–∫': 'paint', '–ø–æ–∫—Ä–∞—Å–∫': 'painting',
            
            # –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
            '–≥—Ä—É–∑–æ–≤–∏–∫': 'trucks', '—Ñ—É—Ä': 'trucks', '—Ñ—É—Ä–∞': 'trucks',
            '–ø—Ä–∏—Ü–µ–ø': 'trailers', '–ø–æ–ª—É–ø—Ä–∏—Ü–µ–ø': 'semi-trailers',
            '–º–æ—Ç–æ—Ü–∏–∫–ª': 'motorcycles', '—Å–∫—É—Ç–µ—Ä': 'scooters',
            '–≤–µ–ª–æ—Å–∏–ø–µ–¥': 'bicycles', '—Å–∞–º–æ–∫–∞—Ç': 'scooters',
            '–ª–æ–¥–∫': 'boats', '—è—Ö—Ç': 'yachts', '–∫–∞—Ç–µ—Ä': 'boats',
            
            # –ï–¥–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∏  
            '—Ö–ª–µ–±': 'bread', '–≤—ã–ø–µ—á–∫–∞': 'bakery', '—Ç–æ—Ä—Ç': 'cakes',
            '–º—è—Å': 'meat', '–∫–æ–ª–±–∞—Å': 'sausages',
            '–º–æ–ª–æ–∫': 'milk', '—Å—ã—Ä': 'cheese', '—Ç–≤–æ—Ä–æ–≥': 'cottage cheese',
            '–æ–≤–æ—â': 'vegetables', '—Ñ—Ä—É–∫—Ç': 'fruits',
            '–∫–æ—Ñ–µ': 'coffee', '—á–∞–π': 'tea', '–Ω–∞–ø–∏—Ç–∫': 'beverages',
            '–ø–∏—Ü': 'pizza', '–±—É—Ä–≥–µ—Ä': 'burgers', '—Å—É—à': 'sushi',
            '—Ä–µ—Å—Ç–æ—Ä–∞–Ω': 'restaurant', '–∫–∞—Ñ–µ': 'cafe', '–±–∞—Ä': 'bar',
            
            # –£—Å–ª—É–≥–∏
            '—Å—Ç—Ä–∏–∂–∫': 'haircut', '–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä': 'barbershop',
            '–º–∞–Ω–∏–∫—é—Ä': 'manicure', '–ø–µ–¥–∏–∫—é—Ä': 'pedicure',
            '–º–∞—Å—Å–∞–∂': 'massage', '–∫–æ—Å–º–µ—Ç–æ–ª–æ–≥': 'cosmetology',
            '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ': 'photography', '–≤–∏–¥–µ–æ—Å—ä–µ–º–∫': 'videography',
            '—É–±–æ—Ä–∫': 'cleaning', '–∫–ª–∏–Ω–∏–Ω–≥': 'cleaning',
            '—Å—Ç–∏—Ä–∫': 'laundry', '—Ö–∏–º—á–∏—Å—Ç–∫': 'dry cleaning',
            '–æ—Ö—Ä–∞–Ω': 'security', '—Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü': 'alarm systems',
            
            # –ú–µ–¥–∏—Ü–∏–Ω–∞
            '—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥': 'dentistry', '–∑—É–±–Ω': 'dental',
            '—Ç–µ—Ä–∞–ø–µ–≤—Ç': 'therapy', '—Ö–∏—Ä—É—Ä–≥': 'surgery',
            '–ø–µ–¥–∏–∞—Ç—Ä': 'pediatrics', '–≥–∏–Ω–µ–∫–æ–ª–æ–≥': 'gynecology',
            '–∫–∞—Ä–¥–∏–æ–ª–æ–≥': 'cardiology', '–Ω–µ–≤—Ä–æ–ª–æ–≥': 'neurology',
            '–æ—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥': 'ophthalmology', '–ª–æ—Ä': 'ENT',
            '–º–∞—Å—Å–∞–∂–∏—Å—Ç': 'massage therapist',
            
            # –ñ–∏–≤–æ—Ç–Ω—ã–µ
            '–≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä': 'veterinary', '–≥—Ä—É–º–∏–Ω–≥': 'pet grooming',
            '–∑–æ–æ–º–∞–≥–∞–∑–∏–Ω': 'pet store', '–∫–æ—Ä–º': 'pet food',
            '—Å–æ–±–∞–∫': 'dogs', '–∫–æ—à–∫': 'cats', '–ø—Ç–∏—Ü': 'birds',
            
            # –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
            '—à–∫–æ–ª': 'school', '—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç': 'university',
            '–¥–µ—Ç—Å–∫–∏–π —Å–∞–¥': 'kindergarten', '—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä': 'tutoring',
            '—è–∑—ã–∫–æ–≤': 'language courses', '–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω': 'computer courses',
            
            # –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
            '–∏–≥—Ä': 'games', '—Ä–∞–∑–≤–ª–µ—á–µ–Ω': 'entertainment',
            '–∫–≤–µ—Å—Ç': 'escape room', '–±–æ—É–ª–∏–Ω–≥': 'bowling',
            '–∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä': 'cinema', '—Ç–µ–∞—Ç—Ä': 'theater',
            '–∫–æ–Ω—Ü–µ—Ä—Ç': 'concerts', '–ø—Ä–∞–∑–¥–Ω–∏–∫': 'events',
            
            # –°–ø–æ—Ä—Ç –∏ —Ñ–∏—Ç–Ω–µ—Å
            '—Å–ø–æ—Ä—Ç–∑–∞–ª': 'gym', '—Ñ–∏—Ç–Ω–µ—Å': 'fitness',
            '–π–æ–≥': 'yoga', '–ø–∏–ª–∞—Ç–µ—Å': 'pilates',
            '—Ç—Ä–µ–Ω–µ—Ä': 'trainer', '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫': 'training',
            '–ø–ª–∞–≤–∞–Ω': 'swimming', '–±–æ–∫—Å': 'boxing',
            '–∫–∞—Ä–∞—Ç–µ': 'karate', '–¥–∑—é–¥–æ': 'judo',
            
            # –ö—Ä–∞—Å–æ—Ç–∞
            '—Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã': 'beauty salon', '–±–∞—Ä–±–µ—Ä—à–æ–ø': 'barbershop',
            '–∫–æ—Å–º–µ—Ç–∏–∫–∞': 'cosmetics', '–ø–∞—Ä—Ñ—é–º': 'perfume',
            '—Ç–∞—Ç—É–∏—Ä–æ–≤–∫': 'tattoo', '–ø–∏—Ä—Å–∏–Ω–≥': 'piercing',
            
            # –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å
            '–∫–≤–∞—Ä—Ç–∏—Ä': 'apartments', '–¥–æ–º': 'houses', '–∫–æ—Ç—Ç–µ–¥–∂': 'cottages',
            '–æ—Ñ–∏—Å': 'offices', '—Å–∫–ª–∞–¥': 'warehouses', '–≥–∞—Ä–∞–∂': 'garages',
            '—É—á–∞—Å—Ç–æ–∫': 'land plots', '–¥–∞—á': 'country houses',
            
            # –§–∏–Ω–∞–Ω—Å—ã
            '–±–∞–Ω–∫': 'banking', '–∫—Ä–µ–¥–∏—Ç': 'loans', '–∏–ø–æ—Ç–µ–∫': 'mortgage',
            '—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω': 'insurance', '–∏–Ω–≤–µ—Å—Ç–∏—Ü': 'investments',
            
            # –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ
            '—é—Ä–∏—Å—Ç': 'legal services', '–∞–¥–≤–æ–∫–∞—Ç': 'lawyer',
            '–Ω–æ—Ç–∞—Ä–∏—É—Å': 'notary', '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü': 'registration',
            
            # IT
            '—Å–∞–π—Ç': 'website', '–ø—Ä–∏–ª–æ–∂–µ–Ω': 'mobile app',
            '–ø—Ä–æ–≥—Ä–∞–º': 'software', '–¥–∏–∑–∞–π–Ω': 'design',
            '—Ä–µ–∫–ª–∞–º': 'advertising', '–º–∞—Ä–∫–µ—Ç–∏–Ω–≥': 'marketing',
        }
        
        # –¢–∏–ø—ã –±–∏–∑–Ω–µ—Å-–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.business_types = {
            'retail': ['–ø—Ä–æ–¥–∞–∂–∞', '–º–∞–≥–∞–∑–∏–Ω', '—Ç–æ—Ä–≥–æ–≤–ª—è', '–ø–æ–∫—É–ø–∫–∞'],
            'manufacturing': ['–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', '–∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ', '–∑–∞–≤–æ–¥', '—Ñ–∞–±—Ä–∏–∫–∞'],
            'service': ['—É—Å–ª—É–≥–∏', '—Å–µ—Ä–≤–∏—Å', '–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', '–ø–æ–º–æ—â—å'],
            'repair': ['—Ä–µ–º–æ–Ω—Ç', '–ø–æ—á–∏–Ω–∫–∞', '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', '–∑–∞–º–µ–Ω–∞'],
            'installation': ['—É—Å—Ç–∞–Ω–æ–≤–∫–∞', '–º–æ–Ω—Ç–∞–∂', '–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ'],
            'construction': ['—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ', '—Å—Ç—Ä–æ–π–∫–∞', '–≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ'],
            'consulting': ['–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', '—Å–æ–≤–µ—Ç', '–ø–æ–º–æ—â—å', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞'],
            'training': ['–æ–±—É—á–µ–Ω–∏–µ', '–∫—É—Ä—Å—ã', '—Ç—Ä–µ–Ω–∏–Ω–≥', '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'],
            'healthcare': ['–º–µ–¥–∏—Ü–∏–Ω', '–ª–µ—á–µ–Ω–∏–µ', '–∑–¥–æ—Ä–æ–≤—å–µ', '—Ç–µ—Ä–∞–ø–∏—è'],
            'beauty': ['–∫—Ä–∞—Å–æ—Ç–∞', '—Å–∞–ª–æ–Ω', '—Å—Ç—Ä–∏–∂–∫–∞', '–º–∞–Ω–∏–∫—é—Ä'],
            'food': ['–µ–¥–∞', '–ø–∏—Ç–∞–Ω–∏–µ', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–∫–∞—Ñ–µ', '–≥–æ—Ç–æ–≤–∫–∞'],
            'transportation': ['–ø–µ—Ä–µ–≤–æ–∑–∫–∞', '–¥–æ—Å—Ç–∞–≤–∫–∞', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–ª–æ–≥–∏—Å—Ç–∏–∫–∞'],
        }
    
    def search_business_context(self, query):
        """–£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª—é–±–æ–π —Ç–µ–º–∞—Ç–∏–∫–∏ –ë–ï–ó –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"""
        if not self.silent_mode:
            print(f"üß† –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–º–∞—Ç–∏–∫–∏: {query}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        analysis = self._analyze_keywords(query)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        business_category = self._determine_business_category(query, analysis)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = {
            'category': 'smart_analysis',
            'business_type': analysis['main_topic'],
            'activity_type': analysis['activity_type'],
            'english_terms': analysis['english_terms'],
            'business_category': business_category,
            'confidence': 0.8,
            'keywords': analysis['english_terms'][:3],
            'environment': f"professional {analysis['main_topic']} {business_category}"
        }
        
        if not self.silent_mode:
            print(f"üéØ –¢–∏–ø –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {analysis['activity_type']}")
            print(f"üè¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {business_category}")
            print(f"üî§ –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã: {', '.join(analysis['english_terms'][:3])}")
        
        return context
    
    def _analyze_keywords(self, query):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –∏—Ö"""
        query_lower = query.lower()
        
        # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º
        found_translations = []
        activity_type = 'service'  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        for ru_word, en_translation in self.translations.items():
            if ru_word in query_lower:
                found_translations.append(en_translation)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –ø–µ—Ä–≤–æ–º—É –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É —Å–ª–æ–≤—É
                if ru_word in ['–ø—Ä–æ–¥–∞–∂–∞', '–ø—Ä–æ–¥–∞–∂', '–ø—Ä–æ–¥–∞–µ–º', '–º–∞–≥–∞–∑–∏–Ω', '—Ç–æ—Ä–≥–æ–≤–ª—è']:
                    activity_type = 'sales'
                elif ru_word in ['–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', '–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º', '–∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ', '–∏–∑–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º']:
                    activity_type = 'manufacturing'
                elif ru_word in ['—Ä–µ–º–æ–Ω—Ç', '—Ä–µ–º–æ–Ω—Ç–∏—Ä—É–µ–º', '–ø–æ—á–∏–Ω–∫–∞']:
                    activity_type = 'repair'
                elif ru_word in ['—É—Å—Ç–∞–Ω–æ–≤–∫–∞', '—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º', '–º–æ–Ω—Ç–∞–∂', '–º–æ–Ω—Ç–∏—Ä—É–µ–º']:
                    activity_type = 'installation'
                elif ru_word in ['—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ', '—Å—Ç—Ä–æ–∏–º']:
                    activity_type = 'construction'
                elif ru_word in ['–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', '–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ–º']:
                    activity_type = 'consulting'
                elif ru_word in ['–æ–±—É—á–µ–Ω–∏–µ', '–æ–±—É—á–∞–µ–º', '–∫—É—Ä—Å—ã']:
                    activity_type = 'training'
                elif ru_word in ['–¥–æ—Å—Ç–∞–≤–∫–∞', '–¥–æ—Å—Ç–∞–≤–ª—è–µ–º', '–ø–µ—Ä–µ–≤–æ–∑–∫–∞', '–ø–µ—Ä–µ–≤–æ–∑–∏–º']:
                    activity_type = 'delivery'
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤, —Å–æ–∑–¥–∞–µ–º –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π —Ç–µ–º—ã
        if not found_translations:
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–µ–¥–º–µ—Ç
            words = query_lower.split()
            if words:
                main_topic = words[-1]  # –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ –æ–±—ã—á–Ω–æ –ø—Ä–µ–¥–º–µ—Ç
                found_translations = [main_topic]
            else:
                found_translations = [query_lower]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–∞–≤–Ω—É—é —Ç–µ–º—É (–æ–±—ã—á–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –∏–ª–∏ –ø—Ä–µ–¥–º–µ—Ç)
        main_topic = found_translations[-1] if found_translations else query_lower
        
        return {
            'activity_type': activity_type,
            'main_topic': main_topic,
            'english_terms': found_translations,
            'original_query': query
        }
    
    def _determine_business_category(self, query, analysis):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–∏–∑–Ω–µ—Å–∞"""
        query_lower = query.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        for category, keywords in self.business_types.items():
            for keyword in keywords:
                if keyword in query_lower:
                    return category
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
        activity_map = {
            'sales': 'retail',
            'manufacturing': 'manufacturing', 
            'repair': 'service',
            'installation': 'service',
            'construction': 'construction',
            'consulting': 'consulting',
            'training': 'training',
            'delivery': 'transportation'
        }
        
        return activity_map.get(analysis['activity_type'], 'service')
    
    def _multi_source_search(self, query):
        """–ü–æ–∏—Å–∫ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º"""
        sources_data = []
        
        # 1. –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DuckDuckGo
        duckduck_data = self._search_duckduckgo(query)
        if duckduck_data:
            sources_data.extend(duckduck_data)
        
        # 2. –ü–æ–∏—Å–∫ –≤ Wikipedia
        wiki_data = self._search_wikipedia(query)
        if wiki_data:
            sources_data.append(wiki_data)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        return self._analyze_search_results(sources_data, query)
    
    def _search_duckduckgo(self, query):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DuckDuckGo API"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤
            url = "https://api.duckduckgo.com/"
            params = {
                'q': query,
                'format': 'json',
                'no_html': '1',
                'skip_disambig': '1',
                'no_redirect': '1'
            }
            
            response = requests.get(url, params=params, timeout=15)
            
            # 202 —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è DuckDuckGo
            if response.status_code in [200, 202]:
                data = response.json()
                results = []
                
                # –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç (Abstract)
                if data.get('Abstract') and len(data.get('Abstract', '')) > 20:
                    results.append({
                        'title': data.get('Heading', query),
                        'description': data.get('Abstract', ''),
                        'source': 'DuckDuckGo Abstract',
                        'relevance': 'high'
                    })
                
                # –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã (Answer) - —á–∞—Å—Ç–æ —Å–∞–º—ã–µ —Ç–æ—á–Ω—ã–µ
                if data.get('Answer') and len(data.get('Answer', '')) > 10:
                    results.append({
                        'title': '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ',
                        'description': data.get('Answer', ''),
                        'source': 'DuckDuckGo Answer',
                        'relevance': 'high'
                    })
                
                # –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–º—ã - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞
                for topic in data.get('RelatedTopics', [])[:5]:
                    if isinstance(topic, dict) and topic.get('Text'):
                        text = topic.get('Text', '')
                        if len(text) > 30:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å - –ª–∏–±–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞, –ª–∏–±–æ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                            query_words = query.lower().split()
                            is_relevant = any(word in text.lower() for word in query_words if len(word) > 2)
                            
                            if is_relevant or len(results) == 0:  # –ë–µ—Ä–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∏–ª–∏ –ø–µ—Ä–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö
                                results.append({
                                    'title': topic.get('FirstURL', '').split('/')[-1].replace('_', ' ') if topic.get('FirstURL') else query,
                                    'description': text,
                                    'source': 'DuckDuckGo Related',
                                    'relevance': 'medium'
                                })
                
                # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ (Results) - –µ—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                if not results and data.get('Results'):
                    for result in data.get('Results', [])[:3]:
                        if result.get('Text'):
                            results.append({
                                'title': result.get('Text', ''),
                                'description': result.get('Text', ''),
                                'source': 'DuckDuckGo Results',
                                'relevance': 'low'
                            })
                
                if not self.silent_mode:
                    if results:
                        print(f"‚úÖ DuckDuckGo –Ω–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                    else:
                        print(f"‚ö†Ô∏è DuckDuckGo: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è '{query}'")
                
                return results if results else None
                
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ DuckDuckGo: {e}")
            return None
    
    def _search_wikipedia(self, query):
        """–£–õ–£–ß–®–ï–ù–ù–´–ô –ø–æ–∏—Å–∫ –≤ Wikipedia —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            search_variants = [
                query,  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                f"{query} —É—Å–ª—É–≥–∏",  # + —É—Å–ª—É–≥–∏ 
                f"{query} –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å",  # + –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                f"{query} –±–∏–∑–Ω–µ—Å",  # + –±–∏–∑–Ω–µ—Å
                query.replace('–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', '–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ'),  # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∑–∞–º–µ–Ω—ã
                query.replace('–∞–≤—Ç–æ', '–∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å')
            ]
            
            best_result = None
            best_relevance = 0
            
            for search_query in search_variants:
                result = self._single_wikipedia_search(search_query, query)
                if result:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
                    relevance = self._calculate_wikipedia_relevance(result['description'], query)
                    if relevance > best_relevance:
                        best_relevance = relevance
                        best_result = result
                        best_result['relevance_score'] = relevance
                        
                    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –æ—á–µ–Ω—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                    if relevance > 0.7:
                        break
            
            if best_result:
                if not self.silent_mode:
                    print(f"‚úÖ Wikipedia –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {best_result['title']} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {best_relevance:.2f})")
                return best_result
            else:
                if not self.silent_mode:
                    print(f"‚ö†Ô∏è Wikipedia: —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è '{query}'")
                return None
                
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Wikipedia: {e}")
            return None
            
    def _single_wikipedia_search(self, search_query, original_query):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –≤ Wikipedia"""
        try:
            search_url = "https://ru.wikipedia.org/w/api.php"
            search_params = {
                'action': 'query',
                'format': 'json',
                'list': 'search',
                'srsearch': search_query,
                'srlimit': 5,  # –£–≤–µ–ª–∏—á–∏–ª–∏ –ª–∏–º–∏—Ç
                'srprop': 'snippet|titlesnippet'
            }
            
            search_response = requests.get(search_url, params=search_params, timeout=12)
            
            if search_response.status_code == 200:
                search_data = search_response.json()
                search_results = search_data.get('query', {}).get('search', [])
                
                # –ò—â–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–µ–¥–∏ –ø–µ—Ä–≤—ã—Ö 5
                for result in search_results:
                    page_title = result.get('title', '')
                    snippet = result.get('snippet', '').replace('<span class="searchmatch">', '').replace('</span>', '')
                    
                    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É –∏ snippet
                    title_relevance = self._calculate_wikipedia_relevance(page_title, original_query)
                    snippet_relevance = self._calculate_wikipedia_relevance(snippet, original_query)
                    
                    if title_relevance > 0.3 or snippet_relevance > 0.2:
                        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
                        content_url = "https://ru.wikipedia.org/api/rest_v1/page/summary/" + quote(page_title)
                        try:
                            content_response = requests.get(content_url, timeout=8)
                            if content_response.status_code == 200:
                                content_data = content_response.json()
                                return {
                                    'title': content_data.get('title', page_title),
                                    'description': content_data.get('extract', snippet),
                                    'source': 'Wikipedia'
                                }
                        except:
                            pass
                        
                        # Fallback –Ω–∞ snippet
                        return {
                            'title': page_title,
                            'description': snippet,
                            'source': 'Wikipedia'
                        }
                
                    return None
            else:
                return None
                
        except Exception:
            return None
    
    def _calculate_wikipedia_relevance(self, text, query):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –∫ –∑–∞–ø—Ä–æ—Å—É"""
        if not text or not query:
            return 0
        
        text_lower = text.lower()
        query_words = query.lower().split()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–ª–æ–≤
        matches = sum(1 for word in query_words if word in text_lower)
        
        # –ë–æ–Ω—É—Å—ã –∑–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        bonus = 0
        if query.lower() in text_lower:
            bonus += 0.3
        
        # –®—Ç—Ä–∞—Ñ—ã –∑–∞ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å–ª–æ–≤–∞
        penalty = 0
        irrelevant_words = ['—Å—Ç–∞—Ç—å—è', '–∫–∞—Ç–µ–≥–æ—Ä–∏—è', '—à–∞–±–ª–æ–Ω', '—Ñ–∞–π–ª', '–æ–±—Å—É–∂–¥–µ–Ω–∏–µ']
        if any(word in text_lower for word in irrelevant_words):
            penalty = 0.2
        
        base_score = matches / max(len(query_words), 1)
        final_score = min(1.0, base_score + bonus - penalty)
        
        return final_score
    
    def _analyze_search_results(self, sources_data, original_query):
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        if not sources_data:
            return self._dynamic_fallback_analysis(original_query)
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        combined_text = ""
        for source in sources_data:
            combined_text += f" {source.get('title', '')} {source.get('description', '')}"
        
        # –ü–†–û–í–ï–†–Ø–ï–ú –†–ï–õ–ï–í–ê–ù–¢–ù–û–°–¢–¨ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        relevance_score = self._check_content_relevance(combined_text, original_query)
        
        if relevance_score < 0.3:  # –ï—Å–ª–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è
            if not self.silent_mode:
                print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞ (score: {relevance_score:.2f})")
                print(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
            return self._dynamic_fallback_analysis(original_query)
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        context = self._dynamic_context_extraction(combined_text, original_query)
        
        # –ü–æ–≤—ã—à–∞–µ–º confidence –µ—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞
        context['confidence'] = min(context['confidence'] + (relevance_score * 0.3), 0.9)
        
        if not self.silent_mode:
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(sources_data)}")
            print(f"‚úÖ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {relevance_score:.2f}")
            print(f"üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞: {context['business_type']}")
            print(f"üè¢ –°—Ä–µ–¥–∞: {context['environment']}")
        
        return context
    
    def _check_content_relevance(self, found_text, original_query):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –ë–ï–ó —Ö–∞—Ä–¥–∫–æ–¥–∞"""
        found_text_lower = found_text.lower()
        query_words = original_query.lower().split()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ –Ω–∞–π–¥–µ–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
        found_words = 0
        total_query_words = len([w for w in query_words if len(w) > 2])  # –°–ª–æ–≤–∞ –¥–ª–∏–Ω–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤
        
        for word in query_words:
            if len(word) > 2 and word in found_text_lower:
                found_words += 1
        
        # –ë–∞–∑–æ–≤–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ —Å–ª–æ–≤–∞–º - –¢–û–õ–¨–ö–û –≠–¢–û, –Ω–∏–∫–∞–∫–∏—Ö —Ö–∞—Ä–¥–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–º–∞—Ç–∏–∫
        word_relevance = found_words / max(total_query_words, 1) if total_query_words > 0 else 0
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        exact_match_bonus = 0
        if original_query.lower() in found_text_lower:
            exact_match_bonus = 0.3
        
        final_relevance = min(word_relevance + exact_match_bonus, 1.0)
        return final_relevance
    
    def _dynamic_context_extraction(self, text, query):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ë–ï–ó –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        text_lower = text.lower()
        query_lower = query.lower()
        combined_text = f"{text_lower} {query_lower}".strip()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¢–û–õ–¨–ö–û –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        meaningful_words = self._extract_dynamic_details(combined_text, query_lower)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∏–ø –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¢–û–õ–¨–ö–û –∏–∑ —Ç–µ–∫—Å—Ç–∞
        main_activity = meaningful_words[0] if meaningful_words else query_lower.split()[0]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–µ–¥—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        environment = self._determine_dynamic_environment(main_activity, meaningful_words, query_lower)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç—å —Ç–µ–º—ã
        specificity = self._calculate_specificity(query_lower, meaningful_words)
        
        return {
            'category': 'internet_search_based',  # –ï–¥–∏–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            'business_type': main_activity,
            'confidence': min(0.4 + specificity * 0.3, 0.8),
            'details': meaningful_words[:5],
            'keywords': self._extract_smart_keywords(combined_text, query_lower),
            'environment': environment,
            'theme_description': self._generate_theme_description(main_activity, meaningful_words, query_lower)
        }
    
    def _extract_dynamic_details(self, text, query):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –∑–∞–ø—Ä–æ—Å–∞"""
        import re
        
        # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–∏–º—ã—Ö —Å–ª–æ–≤
        words = re.findall(r'\b[–∞-—è—ë]{3,}\b', text + " " + query)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞
        stop_words = {
            '—É—Å–ª—É–≥–∏', '—Å–µ—Ä–≤–∏—Å', '–∫–æ–º–ø–∞–Ω–∏—è', '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', '–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ', 
            '–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '—Ä–∞–±–æ—Ç–∞', '–±–∏–∑–Ω–µ—Å', '—Ü–µ–Ω—Ç—Ä', '–≥—Ä—É–ø–ø–∞'
        }
        
        meaningful_words = [w for w in words if w not in stop_words]
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ –∏ –¥–ª–∏–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
        word_scores = {}
        for word in meaningful_words:
            score = len(word) + meaningful_words.count(word) * 2
            word_scores[word] = score
        
        return sorted(word_scores.keys(), key=lambda w: word_scores[w], reverse=True)[:5]
    
    def _determine_dynamic_environment(self, activity, details, query):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ä–µ–¥—É –¢–û–õ–¨–ö–û –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        # –°–æ–∑–¥–∞–µ–º —Å—Ä–µ–¥—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –ø–æ–∏—Å–∫–∞
        environment_words = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        environment_words.extend([activity] + details[:2])
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—ã –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if len(environment_words) >= 2:
            return f"professional {environment_words[0]} {environment_words[1]} workplace"
        else:
            return f"professional {activity} workplace"
    
    def _calculate_specificity(self, query, details):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç—å —Ç–µ–º—ã"""
        # –ß–µ–º –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –∏ –¥–ª–∏–Ω–Ω–µ–µ –∑–∞–ø—Ä–æ—Å, —Ç–µ–º –≤—ã—à–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç—å
        query_words = len(query.split())
        detail_count = len([d for d in details if len(d) > 3])
        
        specificity = (query_words * 0.1) + (detail_count * 0.15)
        return min(specificity, 1.0)
    
    def _extract_smart_keywords(self, text, query):
        """–£–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
        import re
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∑–∞–ø—Ä–æ—Å
        all_text = f"{text} {query}"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–∞ –¥–ª–∏–Ω–æ–π –æ—Ç 3 —Å–∏–º–≤–æ–ª–æ–≤
        words = re.findall(r'\b[–∞-—è—ë]{3,}\b', all_text.lower())
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É
        word_freq = {}
        for word in words:
            word_freq[word] = word_freq.get(word, 0) + 1
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ —Å–ª–æ–≤–∞
        sorted_words = sorted(word_freq.items(), key=lambda x: x[1], reverse=True)
        return [word for word, freq in sorted_words[:8]]
    
    def _generate_theme_description(self, activity, details, query):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤"""
        if not details:
            return query
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ—Ç–∞–ª–µ–π
        main_detail = details[0] if details else activity
        secondary_details = details[1:3] if len(details) > 1 else []
        
        if secondary_details:
            return f"{main_detail} {' '.join(secondary_details)}"
        else:
            return main_detail
    
    def _dynamic_fallback_analysis(self, query):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π fallback –∞–Ω–∞–ª–∏–∑ - –¢–û–õ–¨–ö–û –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞"""
        query_lower = query.lower()
        
        if not self.silent_mode:
            print(f"üí™ –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (—á–∏—Å—Ç—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º)")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
        words = query_lower.split()
        meaningful_words = [w for w in words if len(w) > 2][:5]
        
        # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –¢–û–õ–¨–ö–û –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
        main_keyword = meaningful_words[0] if meaningful_words else query_lower.split()[0]
        
        return {
            'category': 'internet_search_based',
            'business_type': main_keyword,
            'confidence': 0.6,  # –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å - –ª—É—á—à–µ –∏—Å–∫–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
            'details': meaningful_words,
            'keywords': meaningful_words,
            'environment': f"professional {main_keyword} workplace",
            'theme_description': f"—É—Å–ª—É–≥–∏ {main_keyword}"
        }

    def _compress_png(self, image, target_size_kb):
        """–°–∂–∏–º–∞–µ—Ç PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏"""
        try:
            # –ü—Ä–æ–±—É–µ–º —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–≤–µ—Ç–æ–≤
            original_mode = image.mode
            
            # –î–ª—è PNG –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            import io
            
            # –ü—Ä–æ–±—É–µ–º —Å optimize=True
            buffer = io.BytesIO()
            image.save(buffer, format='PNG', optimize=True)
            size_kb = len(buffer.getvalue()) / 1024
            
            if size_kb <= target_size_kb:
                if not self.silent_mode:
                    print(f"üì¶ PNG —Å–∂–∞—Ç –¥–æ {size_kb:.1f}–∫–± (optimize)")
                buffer.seek(0)
                return Image.open(buffer)
            
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –≤—Å—ë –µ—â—ë –±–æ–ª—å—à–æ–π, –ø—Ä–æ–±—É–µ–º —É–º–µ–Ω—å—à–∏—Ç—å —Ü–≤–µ—Ç–∞
            if original_mode == 'RGBA':
                # –ö–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
                quantized = image.quantize(colors=256, method=Image.Quantize.MEDIANCUT)
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ RGBA —Ä–µ–∂–∏–º
                quantized = quantized.convert('RGBA')
                
                buffer = io.BytesIO()
                quantized.save(buffer, format='PNG', optimize=True)
                size_kb = len(buffer.getvalue()) / 1024
                
                if size_kb <= target_size_kb:
                    if not self.silent_mode:
                        print(f"üì¶ PNG —Å–∂–∞—Ç –¥–æ {size_kb:.1f}–∫–± (–∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è)")
                    buffer.seek(0)
                    return Image.open(buffer)
            
            # –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –±–æ–ª—å—à–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
            buffer = io.BytesIO()
            image.save(buffer, format='PNG', optimize=True)
            final_size_kb = len(buffer.getvalue()) / 1024
            
            if not self.silent_mode:
                print(f"üì¶ PNG —Å–∂–∞—Ç –¥–æ {final_size_kb:.1f}–∫–± (–ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)")
            
            buffer.seek(0)
            return Image.open(buffer)
            
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ PNG —Å–∂–∞—Ç–∏—è: {e}")
            return image

# ===== –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –ö–õ–ê–°–°–´ –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò =====

class ImageGenerator:
    """–ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    def __init__(self, silent_mode=False, use_icons8_for_favicons=True):
        self.silent_mode = silent_mode
        self.use_icons8_for_favicons = use_icons8_for_favicons
        # –°—Ç–∞—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º SmartPromptGenerator
        
        # –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        try:
            from icons8_api import Icons8API
            self.icons8_api = Icons8API()
            self.icons8_manager = self.icons8_api  # –ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å GUI
        except ImportError:
            self.icons8_api = None
            self.icons8_manager = None
            if not silent_mode:
                print("‚ö†Ô∏è Icons8 API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        try:
            from modern_favicon_gen import ModernFaviconGenerator
            self.favicon_generator = ModernFaviconGenerator()
        except ImportError:
            self.favicon_generator = None
            if not silent_mode:
                print("‚ö†Ô∏è ModernFaviconGenerator –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    def generate_thematic_set(self, theme_input, media_dir, method="1", progress_callback=None):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        
        Args:
            theme_input (str): –¢–µ–º–∞—Ç–∏–∫–∞ 
            media_dir (str): –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ media
            method (str): –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            progress_callback (callable): –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
            
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        """
        if not self.silent_mode:
            print(f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è: {theme_input}")
        
        # –ü–æ–ª—É—á–∞–µ–º —É–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –Ω–∞–ø—Ä—è–º—É—é (–ë–ï–ó —Å—Ç–∞—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞)
        prompts, theme_data = self._generate_prompts(theme_input)
        
        results = {}
        image_names = ['main', 'about1', 'about2', 'about3', 'review1', 'review2', 'review3', 'favicon']
        
        for i, image_name in enumerate(image_names):
            if progress_callback:
                progress_callback(f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {image_name} ({i+1}/8)...")
            
            try:
                if image_name == 'favicon' and self.use_icons8_for_favicons and self.icons8_api:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–≤–∏–∫–æ–Ω —á–µ—Ä–µ–∑ Icons8
                    result = self._generate_favicon_via_icons8(theme_input, media_dir, theme_data)
                else:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—ã—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    result = self._generate_image_via_pollinations(
                        prompts.get(image_name, theme_input), 
                        image_name, 
                        media_dir
                    )
                
                results[image_name] = result
                
                if not self.silent_mode:
                    status = "‚úÖ" if result else "‚ùå"
                    print(f"{status} {image_name}: {'–£—Å–ø–µ—à–Ω–æ' if result else '–û—à–∏–±–∫–∞'}")
                    
            except Exception as e:
                if not self.silent_mode:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {image_name}: {e}")
                results[image_name] = None
        
        return results
    
    def _generate_favicon_via_icons8(self, theme, media_dir, theme_data):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∞–≤–∏–∫–æ–Ω —á–µ—Ä–µ–∑ Icons8"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –∏–∫–æ–Ω–∫–∏
            business_type = theme_data.get('business_type', theme)
            icon_path = self.icons8_api.download_icon(
                business_type,
                str(media_dir),
                'favicon'
            )
            return icon_path
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ö†Ô∏è Icons8 –æ—à–∏–±–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º Pollinations: {e}")
            # Fallback –Ω–∞ Pollinations
            return self._generate_image_via_pollinations(theme, 'favicon', media_dir)
    
    def _generate_image_via_pollinations(self, prompt, image_name, media_dir):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π API —Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ–º"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π API –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
            from modern_image_api import ModernImageAPI
            modern_api = ModernImageAPI(silent_mode=self.silent_mode)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä
            size = '512x512' if image_name == 'favicon' else '1024x768'
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ–º
            result = modern_api.generate_image(
                prompt=prompt,
                image_name=image_name,
                output_dir=media_dir,
                size=size
            )
            
            return result
            
        except ImportError:
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –µ—Å–ª–∏ –Ω–æ–≤—ã–π API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            if not self.silent_mode:
                print("‚ö†Ô∏è –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤—ã–π")
            return self._generate_image_fallback(prompt, image_name, media_dir)
        
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ API: {e}")
            return self._generate_image_fallback(prompt, image_name, media_dir)

    def _generate_image_fallback(self, prompt, image_name, media_dir):
        """Fallback –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        try:
            import requests
            from pathlib import Path
            from PIL import Image
            
            # API Pollinations
            api_url = "https://image.pollinations.ai/prompt/"
            full_prompt = f"{prompt}, high quality, professional"
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if image_name == 'favicon':
                params = "?width=512&height=512&model=flux"
                target_size_kb = 50  # –§–∞–≤–∏–∫–æ–Ω—ã –¥–æ 50–∫–±
                output_path = Path(media_dir) / f"{image_name}.png"  # PNG –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
            else:
                params = "?width=1024&height=768&model=flux"
                target_size_kb = 150  # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ 150–∫–±
                output_path = Path(media_dir) / f"{image_name}.jpg"  # JPEG –¥–ª—è –ª—É—á—à–µ–≥–æ —Å–∂–∞—Ç–∏—è
            
            url = f"{api_url}{full_prompt}{params}"
            
            response = requests.get(url, timeout=30)
            if response.status_code == 200:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ PIL Image –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                import io
                image = Image.open(io.BytesIO(response.content))
                
                # –û–±—Ä–µ–∑–∞–µ–º –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫
                cropped_image = self._remove_pollinations_watermark_from_image(image)
                
                # –°–∂–∏–º–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Ä–∞–∑–º–µ—Ä–∞
                if self.save_compressed_image(cropped_image, str(output_path), target_size_kb=target_size_kb):
                    if not self.silent_mode:
                        final_size_kb = output_path.stat().st_size / 1024
                        print(f"üé® {image_name}: –°–æ–∑–¥–∞–Ω–æ –∏ —Å–∂–∞—Ç–æ –¥–æ {final_size_kb:.1f}–∫–±")
                    return str(output_path)
                else:
                    if not self.silent_mode:
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å {image_name}")
            
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå Fallback –æ—à–∏–±–∫–∞: {e}")
        
        return None

    def generate_via_pollinations_clean(self, prompt):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Pollinations –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç PIL Image –æ–±—ä–µ–∫—Ç"""
        try:
            import requests
            from PIL import Image
            import io
            
            # API Pollinations
            api_url = "https://image.pollinations.ai/prompt/"
            full_prompt = f"{prompt}, high quality, professional"
            params = "?width=1024&height=768&model=flux"
            
            url = f"{api_url}{full_prompt}{params}"
            
            response = requests.get(url, timeout=30)
            if response.status_code == 200:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ PIL Image
                image = Image.open(io.BytesIO(response.content))
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—Ä–µ–∑–∫—É –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
                cropped_image = self._remove_pollinations_watermark_from_image(image)
                
                if not self.silent_mode:
                    print(f"üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ –æ–±—Ä–µ–∑–∞–Ω–æ")
                
                return cropped_image
            
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        
        return None

    def make_favicon_transparent(self, image):
        """–î–µ–ª–∞–µ—Ç —Ñ–æ–Ω —Ñ–∞–≤–∏–∫–æ–Ω–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º"""
        try:
            from PIL import Image
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGBA –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if image.mode != 'RGBA':
                image = image.convert('RGBA')
            
            # –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º —É–¥–∞–ª–µ–Ω–∏—è –±–µ–ª–æ–≥–æ —Ñ–æ–Ω–∞
            data = image.getdata()
            new_data = []
            
            for item in data:
                # –ï—Å–ª–∏ –ø–∏–∫—Å–µ–ª—å –±–µ–ª—ã–π –∏–ª–∏ –±–ª–∏–∑–∫–∏–π –∫ –±–µ–ª–æ–º—É - –¥–µ–ª–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º
                if item[0] > 240 and item[1] > 240 and item[2] > 240:
                    new_data.append((255, 255, 255, 0))  # –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
                else:
                    new_data.append(item)
            
            image.putdata(new_data)
            
            if not self.silent_mode:
                print("üîç –§–æ–Ω —Ñ–∞–≤–∏–∫–æ–Ω–∞ —Å–¥–µ–ª–∞–Ω –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º")
            
            return image
            
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏: {e}")
            return image

    def save_compressed_image(self, image, filepath, target_size_kb=150):
        """–£–õ–£–ß–®–ï–ù–ù–û–ï —Å–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–∞—á–µ—Å—Ç–≤–∞"""
        try:
            from PIL import Image
            import io
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞
            if filepath.lower().endswith('.png'):
                format_type = 'PNG'
            else:
                format_type = 'JPEG'
            
            # –î–ª—è PNG - –±–æ–ª–µ–µ –¥–µ–ª–∏–∫–∞—Ç–Ω–æ–µ —Å–∂–∞—Ç–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–∞—á–µ—Å—Ç–≤–∞
            if format_type == 'PNG':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                buffer = io.BytesIO()
                image.save(buffer, format='PNG', optimize=True)
                size_kb = len(buffer.getvalue()) / 1024
                
                if size_kb <= target_size_kb:
                    # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä —É–∂–µ –ø–æ–¥—Ö–æ–¥–∏—Ç - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                    with open(filepath, 'wb') as f:
                        f.write(buffer.getvalue())
                    
                    if not self.silent_mode:
                        print(f"üì¶ PNG —Å–æ—Ö—Ä–∞–Ω–µ–Ω {size_kb:.1f}–∫–± (–±–µ–∑ —Å–∂–∞—Ç–∏—è)")
                    return True
                
                # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –õ–µ–≥–∫–æ–µ —Ä–µ—Å–∞–π–∑ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–∞—á–µ—Å—Ç–≤–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∏–ª—å–Ω–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç)
                if size_kb > target_size_kb * 1.5:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –≤ 1.5 —Ä–∞–∑–∞
                    for scale in [0.95, 0.9, 0.85, 0.8]:  # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π —Ä–µ—Å–∞–π–∑
                        new_width = int(image.width * scale)
                        new_height = int(image.height * scale)
                        
                        # –í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ—Å–∞–π–∑
                        resized = image.resize((new_width, new_height), Image.LANCZOS)
                        
                        buffer = io.BytesIO()
                        resized.save(buffer, format='PNG', optimize=True)
                        size_kb = len(buffer.getvalue()) / 1024
                        
                        if size_kb <= target_size_kb:
                            with open(filepath, 'wb') as f:
                                f.write(buffer.getvalue())
                            
                            if not self.silent_mode:
                                print(f"üì¶ PNG —Å–∂–∞—Ç –¥–æ {size_kb:.1f}–∫–± (–ª–µ–≥–∫–∏–π —Ä–µ—Å–∞–π–∑ {scale:.2f}x)")
                            return True
                
                # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –î–µ–ª–∏–∫–∞—Ç–Ω–∞—è –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ü–≤–µ—Ç–æ–≤
                if image.mode == 'RGBA':
                    # –î–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –±–æ–ª—å—à–µ —Ü–≤–µ—Ç–æ–≤
                    quantized = image.quantize(colors=256, method=Image.Quantize.MEDIANCUT)
                    quantized = quantized.convert('RGBA')
                else:
                    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - —Ç–æ–∂–µ –±–æ–ª—å—à–µ —Ü–≤–µ—Ç–æ–≤
                    quantized = image.quantize(colors=256, method=Image.Quantize.MEDIANCUT)
                
                buffer = io.BytesIO()
                quantized.save(buffer, format='PNG', optimize=True)
                size_kb = len(buffer.getvalue()) / 1024
                
                if size_kb <= target_size_kb:
                    with open(filepath, 'wb') as f:
                        f.write(buffer.getvalue())
                    
                    if not self.silent_mode:
                        print(f"üì¶ PNG —Å–∂–∞—Ç –¥–æ {size_kb:.1f}–∫–± (–¥–µ–ª–∏–∫–∞—Ç–Ω–∞—è –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è 256 —Ü–≤–µ—Ç–æ–≤)")
                    return True
                
                # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è - –ª–µ–≥–∫–∏–π —Ä–µ—Å–∞–π–∑ + –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è
                for scale in [0.9, 0.85, 0.8]:
                    new_width = int(image.width * scale)
                    new_height = int(image.height * scale)
                    resized = image.resize((new_width, new_height), Image.LANCZOS)
                    
                    if resized.mode == 'RGBA':
                        final_image = resized.quantize(colors=256, method=Image.Quantize.MEDIANCUT)
                        final_image = final_image.convert('RGBA')
                    else:
                        final_image = resized.quantize(colors=256, method=Image.Quantize.MEDIANCUT)
                    
                    buffer = io.BytesIO()
                    final_image.save(buffer, format='PNG', optimize=True)
                    size_kb = len(buffer.getvalue()) / 1024
                    
                    if size_kb <= target_size_kb:
                        with open(filepath, 'wb') as f:
                            f.write(buffer.getvalue())
                        
                        if not self.silent_mode:
                            print(f"üì¶ PNG —Å–∂–∞—Ç –¥–æ {size_kb:.1f}–∫–± (—Ä–µ—Å–∞–π–∑ {scale:.2f}x + 256 —Ü–≤–µ—Ç–æ–≤)")
                        return True
                
                # –ö—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
                buffer = io.BytesIO()
                image.save(buffer, format='PNG', optimize=True)
                size_kb = len(buffer.getvalue()) / 1024
                
                with open(filepath, 'wb') as f:
                    f.write(buffer.getvalue())
                
                if not self.silent_mode:
                    print(f"‚ö†Ô∏è PNG —Å–æ—Ö—Ä–∞–Ω–µ–Ω {size_kb:.1f}–∫–± (–ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç, –Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ)")
                return True
            
            else:
                # –î–ª—è JPEG - –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–∂–∞—Ç–∏–µ
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (JPEG –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å)
                if image.mode in ('RGBA', 'LA'):
                    # –°–æ–∑–¥–∞–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω
                    rgb_image = Image.new('RGB', image.size, (255, 255, 255))
                    if image.mode == 'RGBA':
                        rgb_image.paste(image, mask=image.split()[-1])
                    else:
                        rgb_image.paste(image)
                    image = rgb_image
                elif image.mode not in ('RGB', 'L'):
                    image = image.convert('RGB')
                
                # –ü—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–µ —É—Ä–æ–≤–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è JPEG
                for quality in [95, 90, 85, 80, 75, 70, 65, 60]:  # –ù–∞—á–∏–Ω–∞–µ–º —Å –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                    buffer = io.BytesIO()
                    image.save(buffer, format='JPEG', quality=quality, optimize=True)
                    size_kb = len(buffer.getvalue()) / 1024
                    
                    if size_kb <= target_size_kb:
                        with open(filepath, 'wb') as f:
                            f.write(buffer.getvalue())
                        
                        if not self.silent_mode:
                            print(f"üì¶ JPEG —Å–∂–∞—Ç –¥–æ {size_kb:.1f}–∫–± (–∫–∞—á–µ—Å—Ç–≤–æ {quality}%)")
                        return True
                
                # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è - –ª–µ–≥–∫–∏–π —Ä–µ—Å–∞–π–∑ —Å —Ö–æ—Ä–æ—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
                for scale in [0.95, 0.9, 0.85]:
                    new_width = int(image.width * scale)
                    new_height = int(image.height * scale)
                    resized = image.resize((new_width, new_height), Image.LANCZOS)
                    
                    for quality in [85, 80, 75, 70]:  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                        buffer = io.BytesIO()
                        resized.save(buffer, format='JPEG', quality=quality, optimize=True)
                        size_kb = len(buffer.getvalue()) / 1024
                        
                        if size_kb <= target_size_kb:
                            with open(filepath, 'wb') as f:
                                f.write(buffer.getvalue())
                            
                            if not self.silent_mode:
                                print(f"üì¶ JPEG —Å–∂–∞—Ç –¥–æ {size_kb:.1f}–∫–± (—Ä–µ—Å–∞–π–∑ {scale:.2f}x, –∫–∞—á–µ—Å—Ç–≤–æ {quality}%)")
                            return True
                
                # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –ø—Ä–∏–µ–º–ª–µ–º—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
                buffer = io.BytesIO()
                image.save(buffer, format='JPEG', quality=65, optimize=True)
                size_kb = len(buffer.getvalue()) / 1024
                
                with open(filepath, 'wb') as f:
                    f.write(buffer.getvalue())
                
                if not self.silent_mode:
                    if size_kb <= target_size_kb:
                        print(f"üì¶ JPEG —Å–∂–∞—Ç –¥–æ {size_kb:.1f}–∫–± (–∫–∞—á–µ—Å—Ç–≤–æ 65%)")
                    else:
                        print(f"‚ö†Ô∏è JPEG —Å–æ—Ö—Ä–∞–Ω–µ–Ω {size_kb:.1f}–∫–± (–ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç, –Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ)")
                return True
                
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è: {e}")
            return False

    def _remove_pollinations_watermark_from_image(self, image):
        """–£–¥–∞–ª—è–µ—Ç –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ —Å PIL Image –æ–±—ä–µ–∫—Ç–∞"""
        try:
            width, height = image.size
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –æ–±—Ä–µ–∑–∫–∏
            if width >= 1024 and height >= 768:
                crop_box = (0, 0, width - 80, height - 60)
            elif width >= 512 and height >= 512:
                crop_box = (0, 0, width - 50, height - 40)
            else:
                crop_box = (0, 0, width - 30, height - 25)
            
            # –û–±—Ä–µ–∑–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            cropped_img = image.crop(crop_box)
            
            if not self.silent_mode:
                new_width, new_height = cropped_img.size
                print(f"‚úÇÔ∏è –û–±—Ä–µ–∑–∞–Ω–æ —Å {width}x{height} –¥–æ {new_width}x{new_height}")
            
            return cropped_img
            
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–µ–∑–∫–∏: {e}")
            return image

    def _generate_prompts(self, theme_input):
        """–£–ú–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –õ–Æ–ë–´–• —Ç–µ–º–∞—Ç–∏–∫"""
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–º–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        try:
            from smart_prompt_generator import SmartPromptGenerator
            smart_gen = SmartPromptGenerator()
            prompts, analysis = smart_gen.generate_prompts(theme_input, silent_mode=self.silent_mode)
            
            theme_data = {
                'business_type': analysis['main_product'],
                'activity_type': analysis['activity_type'],
                'analysis': analysis
            }
            
            return prompts, theme_data
            
        except ImportError:
            # –§–æ–ª–ª–±—ç–∫ –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É, –µ—Å–ª–∏ —É–º–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            if not self.silent_mode:
                print("‚ö†Ô∏è –£–º–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞")
            return self._generate_fallback_prompts(theme_input)
    
    def _generate_fallback_prompts(self, theme_input):
        """–ü—Ä–æ—Å—Ç–∞—è —Ñ–æ–ª–ª–±—ç–∫ —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤"""
        business_type = theme_input.lower()
        
        prompts = {
            'main': f"professional {business_type} business exterior, modern commercial building",
            'about1': f"{business_type} interior, professional workspace, modern facilities",
            'about2': f"professional working with {business_type}, quality service delivery",
            'about3': f"excellent {business_type} results, professional quality work",
            'review1': f"satisfied {business_type} customer, happy client experience",
            'review2': f"{business_type} consultation, professional service meeting",
            'review3': f"professional {business_type} team, experienced staff",
            'favicon': f"{business_type} icon, business symbol, professional logo"
        }
        
        theme_data = {
            'business_type': business_type,
            'activity_type': 'service'
        }
        
        return prompts, theme_data

    def _generate_auto_prompts(self, business_type):
        """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –∞–≤—Ç–æ–±–∏–∑–Ω–µ—Å–∞"""
        prompts = {}
        
        main_variants = [
            f"modern car dealership exterior, glass showroom windows, luxury cars displayed",
            f"professional auto service garage, clean workshop, modern equipment",
            f"car showroom interior, shiny new vehicles, professional lighting",
            f"auto repair shop front view, service bay doors, professional signage"
        ]
        prompts['main'] = self._select_random_variant(main_variants)
        
        about1_variants = [
            f"car showroom interior, luxury vehicles on display, modern dealership design",
            f"auto service workshop, mechanic tools, clean organized garage",
            f"car repair bay, hydraulic lifts, professional automotive equipment",
            f"vehicle inspection area, diagnostic equipment, modern auto service"
        ]
        prompts['about1'] = self._select_random_variant(about1_variants)
        
        about2_variants = [
            f"professional mechanic working on car engine, automotive repair process",
            f"car salesman showing vehicle features to customers, professional consultation",
            f"automotive technician using diagnostic equipment, precision work",
            f"expert mechanic servicing car, professional automotive maintenance"
        ]
        prompts['about2'] = self._select_random_variant(about2_variants)
        
        about3_variants = [
            f"perfectly serviced car, high quality automotive repair results",
            f"luxury car in showroom, premium vehicle sales offering",
            f"satisfied customer receiving car keys, successful automotive service",
            f"restored vehicle, professional auto body work, excellent results"
        ]
        prompts['about3'] = self._select_random_variant(about3_variants)
        
        review1_variants = [
            f"happy customer receiving car keys, satisfied smile, successful car purchase",
            f"pleased client with serviced vehicle, automotive satisfaction, thumbs up",
            f"delighted car owner, professional automotive service experience"
        ]
        prompts['review1'] = self._select_random_variant(review1_variants)
        
        review2_variants = [
            f"car consultation meeting, salesman explaining vehicle features",
            f"automotive service advisor discussing repair options with customer",
            f"professional car buying consultation, expert automotive guidance"
        ]
        prompts['review2'] = self._select_random_variant(review2_variants)
        
        review3_variants = [
            f"professional automotive team, skilled mechanics, excellent car service",
            f"car dealership staff, experienced automotive professionals, quality service",
            f"auto service team, qualified technicians, professional uniforms"
        ]
        prompts['review3'] = self._select_random_variant(review3_variants)
        
        prompts['favicon'] = "car icon, automotive symbol, simple vehicle logo design"
        
        return prompts
    
    def _generate_medical_prompts(self, business_type):
        """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—ã"""
        prompts = {}
        
        main_variants = [
            f"modern dental clinic exterior, medical center building, professional healthcare",
            f"medical office entrance, clean professional healthcare facility",
            f"dental practice front view, modern medical building design"
        ]
        prompts['main'] = self._select_random_variant(main_variants)
        
        about1_variants = [
            f"dental office interior, modern dental chair, professional medical equipment",
            f"medical consultation room, clean healthcare environment, modern facilities",
            f"dental clinic waiting area, comfortable medical office design"
        ]
        prompts['about1'] = self._select_random_variant(about1_variants)
        
        about2_variants = [
            f"dentist working with patient, professional dental care, medical precision",
            f"medical consultation process, healthcare professional examining patient",
            f"dental treatment procedure, skilled dentist, professional healthcare"
        ]
        prompts['about2'] = self._select_random_variant(about2_variants)
        
        about3_variants = [
            f"perfect dental results, healthy smile, professional dental care outcome",
            f"successful medical treatment, patient health improvement, quality healthcare",
            f"excellent dental work, satisfied patient, professional medical results"
        ]
        prompts['about3'] = self._select_random_variant(about3_variants)
        
        review1_variants = [
            f"happy patient after dental treatment, satisfied smile, quality healthcare",
            f"pleased medical patient, successful treatment results, healthcare satisfaction",
            f"grateful patient, excellent medical care experience, positive outcome"
        ]
        prompts['review1'] = self._select_random_variant(review1_variants)
        
        review2_variants = [
            f"medical consultation, doctor explaining treatment options to patient",
            f"dental consultation meeting, professional healthcare advice, patient care",
            f"healthcare professional consultation, medical expertise, patient guidance"
        ]
        prompts['review2'] = self._select_random_variant(review2_variants)
        
        review3_variants = [
            f"medical team, professional healthcare staff, quality patient care",
            f"dental clinic team, experienced medical professionals, healthcare excellence",
            f"healthcare specialists, qualified medical staff, professional medical service"
        ]
        prompts['review3'] = self._select_random_variant(review3_variants)
        
        prompts['favicon'] = "medical cross icon, healthcare symbol, dental logo design"
        
        return prompts
    
    def _generate_food_prompts(self, business_type):
        """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –æ–±—â–µ–ø–∏—Ç–∞"""
        prompts = {}
        
        main_variants = [
            f"cozy coffee shop exterior, cafe storefront, welcoming entrance",
            f"modern restaurant facade, elegant dining establishment, attractive exterior",
            f"charming cafe building, coffee shop front view, inviting atmosphere"
        ]
        prompts['main'] = self._select_random_variant(main_variants)
        
        about1_variants = [
            f"coffee shop interior, cozy seating area, warm cafe atmosphere",
            f"restaurant dining room, elegant table setting, comfortable dining space",
            f"cafe interior design, modern coffee bar, relaxing environment"
        ]
        prompts['about1'] = self._select_random_variant(about1_variants)
        
        about2_variants = [
            f"barista making coffee, professional coffee preparation, skilled brewing",
            f"chef cooking in restaurant kitchen, culinary expertise, food preparation",
            f"cafe staff serving customers, professional food service, hospitality"
        ]
        prompts['about2'] = self._select_random_variant(about2_variants)
        
        about3_variants = [
            f"delicious coffee and pastries, high quality cafe offerings, food presentation",
            f"gourmet restaurant dishes, culinary excellence, fine dining presentation",
            f"artisan coffee drinks, premium cafe products, beautiful food styling"
        ]
        prompts['about3'] = self._select_random_variant(about3_variants)
        
        review1_variants = [
            f"happy cafe customer enjoying coffee, satisfied dining experience",
            f"pleased restaurant guest, excellent meal experience, culinary satisfaction",
            f"delighted coffee shop visitor, positive cafe experience, customer joy"
        ]
        prompts['review1'] = self._select_random_variant(review1_variants)
        
        review2_variants = [
            f"friendly cafe service, barista recommending drinks, personalized attention",
            f"restaurant consultation, waiter explaining menu, professional food service",
            f"coffee shop consultation, expert coffee recommendations, customer guidance"
        ]
        prompts['review2'] = self._select_random_variant(review2_variants)
        
        review3_variants = [
            f"professional cafe team, skilled baristas, excellent coffee service",
            f"restaurant staff, experienced culinary team, quality food service",
            f"coffee shop employees, friendly service team, hospitality professionals"
        ]
        prompts['review3'] = self._select_random_variant(review3_variants)
        
        prompts['favicon'] = "coffee cup icon, cafe symbol, restaurant logo design"
        
        return prompts
    
    def _generate_beauty_prompts(self, business_type):
        """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Å–∞–ª–æ–Ω–æ–≤ –∫—Ä–∞—Å–æ—Ç—ã"""
        prompts = {}
        
        main_variants = [
            f"modern beauty salon exterior, stylish salon front, professional beauty services",
            f"barbershop storefront, classic barber pole, traditional grooming establishment",
            f"elegant beauty spa entrance, luxury salon design, premium beauty services"
        ]
        prompts['main'] = self._select_random_variant(main_variants)
        
        about1_variants = [
            f"beauty salon interior, modern styling stations, elegant salon design",
            f"barbershop interior, classic barber chairs, traditional grooming atmosphere",
            f"spa treatment room, relaxing beauty environment, luxurious salon space"
        ]
        prompts['about1'] = self._select_random_variant(about1_variants)
        
        about2_variants = [
            f"hairstylist cutting hair, professional beauty service, skilled styling",
            f"barber grooming client, traditional barbering techniques, expert grooming",
            f"beauty treatment process, professional cosmetologist, quality beauty care"
        ]
        prompts['about2'] = self._select_random_variant(about2_variants)
        
        about3_variants = [
            f"perfect hairstyle result, beautiful styling outcome, professional beauty work",
            f"satisfied grooming results, excellent barbering, quality men's grooming",
            f"stunning beauty transformation, professional salon results, beauty excellence"
        ]
        prompts['about3'] = self._select_random_variant(about3_variants)
        
        review1_variants = [
            f"happy salon client, satisfied with new hairstyle, beauty service satisfaction",
            f"pleased barbershop customer, excellent grooming experience, men's satisfaction",
            f"delighted beauty client, transformation satisfaction, positive beauty experience"
        ]
        prompts['review1'] = self._select_random_variant(review1_variants)
        
        review2_variants = [
            f"beauty consultation, stylist discussing hair options with client",
            f"barbershop consultation, barber explaining grooming services, professional advice",
            f"salon consultation meeting, beauty expert guidance, personalized beauty care"
        ]
        prompts['review2'] = self._select_random_variant(review2_variants)
        
        review3_variants = [
            f"professional salon team, skilled stylists, excellent beauty service",
            f"barbershop staff, experienced barbers, quality grooming professionals",
            f"beauty salon specialists, qualified cosmetologists, professional beauty care"
        ]
        prompts['review3'] = self._select_random_variant(review3_variants)
        
        prompts['favicon'] = "scissors icon, beauty symbol, salon logo design"
        
        return prompts
    
    def _generate_universal_prompts(self, business_type):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –ª—é–±–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞"""
        prompts = {}
        
        main_variants = [
            f"modern {business_type} exterior view, professional building design",
            f"elegant {business_type} entrance, welcoming business atmosphere",
            f"contemporary {business_type} facility, modern commercial architecture"
        ]
        prompts['main'] = self._select_random_variant(main_variants)
        
        about1_variants = [
            f"{business_type} interior design, professional workspace, modern facilities",
            f"inside {business_type}, comfortable customer area, organized layout",
            f"{business_type} working environment, professional equipment, clean design"
        ]
        prompts['about1'] = self._select_random_variant(about1_variants)
        
        about2_variants = [
            f"professional working at {business_type}, high quality service delivery",
            f"{business_type} service process, skilled professional, attention to detail",
            f"expert at work, {business_type} expertise, professional precision"
        ]
        prompts['about2'] = self._select_random_variant(about2_variants)
        
        about3_variants = [
            f"high quality {business_type} results, professional outcome, customer satisfaction",
            f"excellent {business_type} service results, premium quality work",
            f"successful {business_type} project, professional excellence, quality delivery"
        ]
        prompts['about3'] = self._select_random_variant(about3_variants)
        
        review1_variants = [
            f"happy {business_type} customer, satisfied client, positive experience",
            f"pleased customer with {business_type} service, satisfaction and joy",
            f"delighted {business_type} client, excellent service experience"
        ]
        prompts['review1'] = self._select_random_variant(review1_variants)
        
        review2_variants = [
            f"professional {business_type} consultation, expert advice, customer guidance",
            f"{business_type} service consultation, professional recommendations",
            f"customer meeting at {business_type}, personalized professional attention"
        ]
        prompts['review2'] = self._select_random_variant(review2_variants)
        
        review3_variants = [
            f"professional {business_type} team, skilled staff, excellent service",
            f"{business_type} specialists, experienced professionals, quality team",
            f"qualified {business_type} staff, professional service team, customer care"
        ]
        prompts['review3'] = self._select_random_variant(review3_variants)
        
        prompts['favicon'] = f"simple {business_type} icon, professional symbol, business logo"
        
        return prompts
    
    def _select_random_variant(self, variants):
        """–í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞"""
        import random
        return random.choice(variants)


class ThematicImageGenerator:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    
    def __init__(self, silent_mode=False):
        self.silent_mode = silent_mode
        self.image_generator = ImageGenerator(silent_mode=silent_mode)
    
    def generate_single_image(self, prompt, image_name, output_dir):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        return self.image_generator._generate_image_via_pollinations(
            prompt, image_name, output_dir
        )
    
    def get_theme_prompts(self, theme_input):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ç–µ–º—ã - –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å GUI"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –Ω–∞–ø—Ä—è–º—É—é
        prompts, theme_data = self.image_generator._generate_prompts(theme_input)
        
        return prompts, theme_data
    
    def add_randomization(self, prompt):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—é –∫ –ø—Ä–æ–º–ø—Ç—É –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        import random
        
        # –°—Ç–∏–ª–∏ –¥–ª—è —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏
        styles = [
            "professional", "modern", "clean", "elegant", "minimalist",
            "sophisticated", "premium", "high-quality", "detailed"
        ]
        
        # –¶–≤–µ—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã
        colors = [
            "vibrant colors", "soft colors", "natural tones", "warm palette",
            "cool tones", "balanced colors", "harmonious colors"
        ]
        
        # –ö–æ–º–ø–æ–∑–∏—Ü–∏—è
        composition = [
            "well-composed", "balanced composition", "dynamic composition",
            "centered composition", "artistic composition"
        ]
        
        selected_style = random.choice(styles)
        selected_color = random.choice(colors) 
        selected_comp = random.choice(composition)
        
        enhanced_prompt = f"{prompt}, {selected_style}, {selected_color}, {selected_comp}, photorealistic"
        
        return enhanced_prompt
    
    def add_favicon_randomization(self, prompt):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ñ–∞–≤–∏–∫–æ–Ω–æ–≤"""
        import random
        
        # –°—Ç–∏–ª–∏ –¥–ª—è —Ñ–∞–≤–∏–∫–æ–Ω–æ–≤
        favicon_styles = [
            "flat design", "minimal design", "geometric design", "simple icon",
            "clean symbol", "modern icon", "vector style", "logo style"
        ]
        
        # –¶–≤–µ—Ç–∞ –¥–ª—è —Ñ–∞–≤–∏–∫–æ–Ω–æ–≤
        favicon_colors = [
            "bold colors", "single color", "duo-tone", "monochrome",
            "bright accent", "professional colors"
        ]
        
        selected_style = random.choice(favicon_styles)
        selected_color = random.choice(favicon_colors)
        
        enhanced_prompt = f"{prompt}, {selected_style}, {selected_color}, icon, symbol"
        
        return enhanced_prompt