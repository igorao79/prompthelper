# -*- coding: utf-8 -*-

"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Ñ–∞–≤–∏–∫–æ–Ω–æ–∫
–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ PNG
"""

import os
from PIL import Image, ImageFilter, ImageEnhance
from pathlib import Path

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
try:
    import numpy as np
    import cv2
    ADVANCED_FEATURES = True
except ImportError:
    ADVANCED_FEATURES = False
    np = None
    cv2 = None

class AdvancedFaviconProcessor:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Ñ–∞–≤–∏–∫–æ–Ω–æ–∫ —Å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º —Ñ–æ–Ω–∞"""
    
    def __init__(self, silent_mode=False):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        
        Args:
            silent_mode (bool): –†–µ–∂–∏–º –±–µ–∑ –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        self.silent_mode = silent_mode
        
        if not self.silent_mode:
            print("üé® –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Ñ–∞–≤–∏–∫–æ–Ω–æ–∫")
            print("=" * 50)
    
    def process_favicon(self, input_path, output_path=None, size=512):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–≤–∏–∫–æ–Ω–∫—É: —É–¥–∞–ª—è–µ—Ç —Ñ–æ–Ω, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ PNG
        
        Args:
            input_path (str): –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            output_path (str): –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            size (int): –†–∞–∑–º–µ—Ä —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏
            
        Returns:
            PIL.Image: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ None
        """
        try:
            if not self.silent_mode:
                print(f"üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏: {input_path}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image = Image.open(input_path)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ RGBA
            if image.mode != 'RGBA':
                image = image.convert('RGBA')
            
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä
            if image.size != (size, size):
                image = image.resize((size, size), Image.Resampling.LANCZOS)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞
            processed_image = self._advanced_background_removal(image)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
            processed_image = self._enhance_favicon(processed_image)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å
            if output_path:
                processed_image.save(output_path, format='PNG')
                if not self.silent_mode:
                    print(f"‚úÖ –§–∞–≤–∏–∫–æ–Ω–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {output_path}")
                    file_size = os.path.getsize(output_path)
                    print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
            
            return processed_image
            
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏: {e}")
            return None
    
    def _advanced_background_removal(self, image):
        """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤"""
        try:
            # –ú–µ—Ç–æ–¥ 1: –ê–Ω–∞–ª–∏–∑ –∫—Ä–∞–µ–≤ (—É–ª—É—á—à–µ–Ω–Ω—ã–π)
            edge_result = self._edge_based_removal(image)
            
            # –ú–µ—Ç–æ–¥ 2: –¶–≤–µ—Ç–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑
            color_result = self._color_based_removal(image)
            
            # –ú–µ—Ç–æ–¥ 3: –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
            contrast_result = self._contrast_based_removal(image)
            
            # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            final_result = self._combine_removal_methods(edge_result, color_result, contrast_result)
            
            return final_result
            
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞: {e}")
            return image
    
    def _edge_based_removal(self, image):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∞–µ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∏–∫—Å–µ–ª–µ–π
            data = image.getdata()
            width, height = image.size
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±–æ–ª—å—à–µ —Ç–æ—á–µ–∫)
            border_pixels = []
            
            # –í–µ—Ä—Ö–Ω—è—è –∏ –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü—ã
            for x in range(width):
                border_pixels.append(image.getpixel((x, 0)))
                border_pixels.append(image.getpixel((x, height-1)))
            
            # –õ–µ–≤–∞—è –∏ –ø—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü—ã
            for y in range(height):
                border_pixels.append(image.getpixel((0, y)))
                border_pixels.append(image.getpixel((width-1, y)))
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
            bg_color = self._find_dominant_background_color(border_pixels)
            
            if not bg_color:
                return image
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
            new_data = []
            for pixel in data:
                if self._is_background_pixel(pixel, bg_color, tolerance=25):
                    new_data.append((255, 255, 255, 0))  # –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π
                else:
                    new_data.append(pixel)
            
            result = Image.new('RGBA', image.size)
            result.putdata(new_data)
            return result
            
        except Exception as e:
            return image
    
    def _color_based_removal(self, image):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ HSV –¥–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ü–≤–µ—Ç–æ–≤
            hsv_image = image.convert('HSV')
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞ –≤ —É–≥–ª–∞—Ö
            corners = [
                image.getpixel((0, 0)),
                image.getpixel((image.width-1, 0)),
                image.getpixel((0, image.height-1)),
                image.getpixel((image.width-1, image.height-1))
            ]
            
            # –ò—â–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–π —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
            bg_color = self._find_dominant_background_color(corners)
            
            if not bg_color:
                return image
            
            # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞
            mask = self._create_color_mask(image, bg_color)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É
            result = image.copy()
            result.putalpha(mask)
            
            return result
            
        except Exception as e:
            return image
    
    def _contrast_based_removal(self, image):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            if not ADVANCED_FEATURES:
                # Fallback –±–µ–∑ numpy/cv2
                return self._simple_contrast_removal(image)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy array –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            img_array = np.array(image)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç
            gray = np.dot(img_array[...,:3], [0.2989, 0.5870, 0.1140])
            
            # –ù–∞—Ö–æ–¥–∏–º –æ–±–ª–∞—Å—Ç–∏ —Å –Ω–∏–∑–∫–∏–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–æ–º (–≤–µ—Ä–æ—è—Ç–Ω–æ —Ñ–æ–Ω)
            edges = cv2.Canny(gray.astype(np.uint8), 50, 150)
            
            # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—Ä–∞–µ–≤
            mask = np.where(edges > 0, 255, 0).astype(np.uint8)
            
            # –†–∞—Å—à–∏—Ä—è–µ–º –º–∞—Å–∫—É –¥–ª—è –ª—É—á—à–µ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
            kernel = np.ones((3,3), np.uint8)
            mask = cv2.dilate(mask, kernel, iterations=2)
            
            # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å–∫—É –¥–ª—è —Ñ–æ–Ω–∞
            bg_mask = 255 - mask
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            result = image.copy()
            alpha = Image.fromarray(bg_mask, mode='L')
            result.putalpha(alpha)
            
            return result
            
        except Exception as e:
            return image
    
    def _simple_contrast_removal(self, image):
        """–ü—Ä–æ—Å—Ç–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ –±–µ–∑ numpy/cv2"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            result = image.copy()
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∫—Ä–∞–µ–≤
            edges = result.filter(ImageFilter.FIND_EDGES)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∞—Å–∫—É
            mask = edges.convert('L')
            
            # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å–∫—É
            mask = mask.point(lambda x: 255 if x > 30 else 0)
            
            result.putalpha(mask)
            return result
            
        except Exception as e:
            return image
    
    def _find_dominant_background_color(self, pixels):
        """–ù–∞—Ö–æ–¥–∏—Ç –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Ü–≤–µ—Ç —Ñ–æ–Ω–∞"""
        try:
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–µ—Ç–ª—ã–µ –ø–∏–∫—Å–µ–ª–∏ (–≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ–Ω–æ–≤—ã–µ)
            light_pixels = []
            for pixel in pixels:
                if len(pixel) >= 3:
                    r, g, b = pixel[0], pixel[1], pixel[2]
                    # –¢–æ–ª—å–∫–æ –æ—á–µ–Ω—å —Å–≤–µ—Ç–ª—ã–µ –ø–∏–∫—Å–µ–ª–∏
                    if r > 230 and g > 230 and b > 230:
                        light_pixels.append((r, g, b))
            
            if not light_pixels:
                return None
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π —á–∞—Å—Ç—ã–π —Ü–≤–µ—Ç
            color_counts = {}
            for color in light_pixels:
                # –û–∫—Ä—É–≥–ª—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
                rounded_color = (
                    round(color[0] / 10) * 10,
                    round(color[1] / 10) * 10,
                    round(color[2] / 10) * 10
                )
                color_counts[rounded_color] = color_counts.get(rounded_color, 0) + 1
            
            if not color_counts:
                return None
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—ã–π —á–∞—Å—Ç—ã–π —Ü–≤–µ—Ç
            dominant_color = max(color_counts.keys(), key=lambda k: color_counts[k])
            return dominant_color
            
        except Exception as e:
            return None
    
    def _is_background_pixel(self, pixel, bg_color, tolerance=25):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∏–∫—Å–µ–ª—å —Ñ–æ–Ω–æ–≤—ã–º"""
        try:
            if len(pixel) < 3 or not bg_color:
                return False
            
            r, g, b = pixel[0], pixel[1], pixel[2]
            bg_r, bg_g, bg_b = bg_color[0], bg_color[1], bg_color[2]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ü–≤–µ—Ç–∞–º–∏
            distance = ((r - bg_r) ** 2 + (g - bg_g) ** 2 + (b - bg_b) ** 2) ** 0.5
            
            return distance <= tolerance
            
        except Exception as e:
            return False
    
    def _create_color_mask(self, image, bg_color):
        """–°–æ–∑–¥–∞–µ—Ç –º–∞—Å–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞"""
        try:
            mask = Image.new('L', image.size, 255)
            
            for y in range(image.height):
                for x in range(image.width):
                    pixel = image.getpixel((x, y))
                    if self._is_background_pixel(pixel, bg_color, tolerance=30):
                        mask.putpixel((x, y), 0)
            
            return mask
            
        except Exception as e:
            return Image.new('L', image.size, 255)
    
    def _combine_removal_methods(self, edge_result, color_result, contrast_result):
        """–ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –º–∞—Å–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤
            width, height = edge_result.size
            final_mask = Image.new('L', (width, height), 255)
            
            for y in range(height):
                for x in range(width):
                    # –ü–æ–ª—É—á–∞–µ–º –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª –æ—Ç –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞
                    edge_alpha = edge_result.getpixel((x, y))[3] if len(edge_result.getpixel((x, y))) > 3 else 255
                    color_alpha = color_result.getpixel((x, y))[3] if len(color_result.getpixel((x, y))) > 3 else 255
                    contrast_alpha = contrast_result.getpixel((x, y))[3] if len(contrast_result.getpixel((x, y))) > 3 else 255
                    
                    # –ë–µ—Ä–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (—Å–∞–º–æ–µ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–µ)
                    final_alpha = min(edge_alpha, color_alpha, contrast_alpha)
                    
                    # –ï—Å–ª–∏ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –º–µ—Ç–æ–¥–æ–≤ —Å—á–∏—Ç–∞—é—Ç –ø–∏–∫—Å–µ–ª—å —Ñ–æ–Ω–æ–≤—ã–º, –¥–µ–ª–∞–µ–º –µ–≥–æ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º
                    transparent_votes = sum([
                        edge_alpha < 128,
                        color_alpha < 128,
                        contrast_alpha < 128
                    ])
                    
                    if transparent_votes >= 2:
                        final_alpha = 0
                    
                    final_mask.putpixel((x, y), final_alpha)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é –º–∞—Å–∫—É –∫ –ª—É—á—à–µ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            result = edge_result.copy()
            result.putalpha(final_mask)
            
            return result
            
        except Exception as e:
            return edge_result
    
    def _enhance_favicon(self, image):
        """–£–ª—É—á—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏"""
        try:
            # –ü–æ–≤—ã—à–∞–µ–º —Ä–µ–∑–∫–æ—Å—Ç—å
            enhancer = ImageEnhance.Sharpness(image)
            image = enhancer.enhance(1.2)
            
            # –°–ª–µ–≥–∫–∞ –ø–æ–≤—ã—à–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å
            enhancer = ImageEnhance.Contrast(image)
            image = enhancer.enhance(1.1)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–µ–≥–∫—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
            image = image.filter(ImageFilter.SMOOTH_MORE)
            
            return image
            
        except Exception as e:
            return image
    
    def batch_process_favicons(self, input_dir, output_dir=None, size=512):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–≤–∏–∫–æ–Ω–æ–∫ –≤ –ø–∞–ø–∫–µ
        
        Args:
            input_dir (str): –ü–∞–ø–∫–∞ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            output_dir (str): –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            size (int): –†–∞–∑–º–µ—Ä —Ñ–∞–≤–∏–∫–æ–Ω–æ–∫
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        """
        try:
            input_path = Path(input_dir)
            output_path = Path(output_dir) if output_dir else input_path
            
            if not input_path.exists():
                if not self.silent_mode:
                    print(f"‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {input_path}")
                return []
            
            output_path.mkdir(parents=True, exist_ok=True)
            
            # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            supported_formats = ['.png', '.jpg', '.jpeg', '.gif', '.bmp', '.webp']
            
            processed_files = []
            
            for file_path in input_path.iterdir():
                if file_path.is_file() and file_path.suffix.lower() in supported_formats:
                    output_file = output_path / f"{file_path.stem}_processed.png"
                    
                    result = self.process_favicon(str(file_path), str(output_file), size)
                    if result:
                        processed_files.append(str(output_file))
            
            if not self.silent_mode:
                print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(processed_files)} —Ñ–∞–π–ª–æ–≤")
            
            return processed_files
            
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            return []

def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Ñ–∞–≤–∏–∫–æ–Ω–æ–∫"""
    print("üß™ –¢–µ—Å—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Ñ–∞–≤–∏–∫–æ–Ω–æ–∫")
    print("=" * 60)
    
    processor = AdvancedFaviconProcessor()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
    test_image_path = "test_favicon.png"
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not os.path.exists(test_image_path):
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        test_image = Image.new('RGB', (512, 512), color='white')
        from PIL import ImageDraw
        draw = ImageDraw.Draw(test_image)
        draw.ellipse([100, 100, 412, 412], fill='blue', outline='navy', width=5)
        draw.text((200, 220), "TEST", fill='white')
        test_image.save(test_image_path)
        print(f"üìù –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {test_image_path}")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    processed_path = "test_favicon_processed.png"
    result = processor.process_favicon(test_image_path, processed_path)
    
    if result:
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_path}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

if __name__ == "__main__":
    main() 