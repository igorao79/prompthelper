import requests
import datetime
import os
from PIL import Image, ImageDraw
from io import BytesIO
import json
import time
import random
import uuid
import re
from urllib.parse import quote

class IntelligentContextAnalyzer:
    """–£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–∏–∑–Ω–µ—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"""
    
    def __init__(self, silent_mode=False):
        self.silent_mode = silent_mode
        self.cache = {}  # –ö—ç—à –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        
    def search_business_context(self, query):
        """–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏–∑–Ω–µ—Å–µ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            search_query = f"{query} –±–∏–∑–Ω–µ—Å –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"
            
            if not self.silent_mode:
                print(f"üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ: {query}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if query in self.cache:
                if not self.silent_mode:
                    print("üìã –ò—Å–ø–æ–ª—å–∑—É—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                return self.cache[query]
            
            # –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            context_data = self._multi_source_search(search_query)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            self.cache[query] = context_data
            
            return context_data
            
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            return self._dynamic_fallback_analysis(query)
    
    def _multi_source_search(self, query):
        """–ü–æ–∏—Å–∫ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º"""
        sources_data = []
        
        # 1. –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Google (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API)
        google_data = self._search_google_custom(query)
        if google_data:
            sources_data.extend(google_data)
        
        # 2. –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DuckDuckGo
        duckduck_data = self._search_duckduckgo(query)
        if duckduck_data:
            sources_data.extend(duckduck_data)
        
        # 3. –ü–æ–∏—Å–∫ –≤ Wikipedia
        wiki_data = self._search_wikipedia(query)
        if wiki_data:
            sources_data.append(wiki_data)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        return self._analyze_search_results(sources_data, query)
    
    def _search_duckduckgo(self, query):
        """–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DuckDuckGo API"""
        try:
            url = "https://api.duckduckgo.com/"
            params = {
                'q': query,
                'format': 'json',
                'no_html': '1',
                'skip_disambig': '1'
            }
            
            response = requests.get(url, params=params, timeout=10)
            if response.status_code == 200:
                data = response.json()
                
                results = []
                
                # –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç
                if data.get('Abstract'):
                    results.append({
                        'title': data.get('Heading', ''),
                        'description': data.get('Abstract', ''),
                        'source': 'DuckDuckGo Abstract'
                    })
                
                # –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–º—ã
                for topic in data.get('RelatedTopics', [])[:3]:
                    if isinstance(topic, dict) and topic.get('Text'):
                        results.append({
                            'title': topic.get('FirstURL', '').split('/')[-1],
                            'description': topic.get('Text', ''),
                            'source': 'DuckDuckGo Related'
                        })
                
                return results
                
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ DuckDuckGo: {e}")
            return None
    
    def _search_wikipedia(self, query):
        """–ü–æ–∏—Å–∫ –≤ Wikipedia"""
        try:
            # –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π
            search_url = "https://ru.wikipedia.org/api/rest_v1/page/summary/" + quote(query)
            
            response = requests.get(search_url, timeout=10)
            if response.status_code == 200:
                data = response.json()
                return {
                    'title': data.get('title', ''),
                    'description': data.get('extract', ''),
                    'source': 'Wikipedia'
                }
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Wikipedia: {e}")
            return None
    
    def _search_google_custom(self, query):
        """–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Google Custom Search API (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å Google Custom Search API
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥
        return None
    
    def _analyze_search_results(self, sources_data, original_query):
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        if not sources_data:
            return self._dynamic_fallback_analysis(original_query)
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        combined_text = ""
        for source in sources_data:
            combined_text += f" {source.get('title', '')} {source.get('description', '')}"
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        context = self._dynamic_context_extraction(combined_text, original_query)
        
        if not self.silent_mode:
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(sources_data)}")
            print(f"üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞: {context['business_type']}")
            print(f"üè¢ –°—Ä–µ–¥–∞: {context['environment']}")
        
        return context
    
    def _dynamic_context_extraction(self, text, query):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        text_lower = text.lower()
        query_lower = query.lower()
        combined_text = f"{text_lower} {query_lower}".strip()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        activity_indicators = {
            'education': ['–∫—É—Ä—Å—ã', '–æ–±—É—á–µ–Ω–∏–µ', '—à–∫–æ–ª–∞', '—É—á–µ–±–∞', '–ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏–µ', '–∏–∑—É—á–µ–Ω–∏–µ', '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'],
            'service': ['—É—Å–ª—É–≥–∏', '—Å–µ—Ä–≤–∏—Å', '–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', '–ø–æ–º–æ—â—å'],
            'medical': ['–º–µ–¥–∏—Ü–∏–Ω', '–∑–¥–æ—Ä–æ–≤—å–µ', '–ª–µ—á–µ–Ω–∏–µ', '–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', '–∫–ª–∏–Ω–∏–∫–∞', '–≤—Ä–∞—á'],
            'automotive': ['–∞–≤—Ç–æ', '–º–∞—à–∏–Ω', '–∞–≤—Ç–æ–º–æ–±–∏–ª', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç'],
            'food': ['–∫—É–ª–∏–Ω–∞—Ä', '–µ–¥–∞', '–≥–æ—Ç–æ–≤–∫', '–ø–æ–≤–∞—Ä', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–∫–∞—Ñ–µ', '–ø–∏—Ç–∞–Ω–∏–µ'],
            'beauty': ['–∫—Ä–∞—Å–æ—Ç–∞', '—Å–∞–ª–æ–Ω', '–∫–æ—Å–º–µ—Ç–æ–ª', '–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä', '–º–∞–Ω–∏–∫—é—Ä'],
            'fitness': ['—Ñ–∏—Ç–Ω–µ—Å', '—Å–ø–æ—Ä—Ç', '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫', '—Ç—Ä–µ–Ω–µ—Ä', '—Å–ø–æ—Ä—Ç–∑–∞–ª'],
            'tech': ['—Ç–µ—Ö–Ω–æ–ª–æ–≥', '–∫–æ–º–ø—å—é—Ç–µ—Ä', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä', '—Å–∞–π—Ç', '–≤–µ–±', 'it'],
            'art': ['–∏—Å–∫—É—Å—Å—Ç–≤', '—Ç–≤–æ—Ä—á–µ—Å—Ç–≤', '—Ö—É–¥–æ–∂–µ—Å—Ç–≤', '–¥–∏–∑–∞–π–Ω', '—Ä–∏—Å–æ–≤–∞–Ω'],
            'music': ['–º—É–∑—ã–∫', '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç', '–ø–µ—Å–Ω', '–∫–æ–Ω—Ü–µ—Ä—Ç'],
            'photography': ['—Ñ–æ—Ç–æ', '—Å—ä–µ–º–∫', '–∫–∞–º–µ—Ä'],
            'construction': ['—Å—Ç—Ä–æ–∏—Ç–µ–ª', '—Ä–µ–º–æ–Ω—Ç', '—Å—Ç—Ä–æ–π–∫', '–æ—Ç–¥–µ–ª–∫']
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∏–ø –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        activity_scores = {}
        for activity, keywords in activity_indicators.items():
            score = sum(1 for keyword in keywords if keyword in combined_text)
            if score > 0:
                activity_scores[activity] = score
        
        main_activity = max(activity_scores.keys(), key=lambda k: activity_scores[k]) if activity_scores else 'general'
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        details = self._extract_dynamic_details(combined_text, query_lower)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–µ–¥—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        environment = self._determine_dynamic_environment(main_activity, details, query_lower)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç—å —Ç–µ–º—ã
        specificity = self._calculate_specificity(query_lower, details)
        
        return {
            'category': 'dynamic_business',  # –ï–¥–∏–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            'business_type': main_activity,
            'confidence': min(0.3 + specificity * 0.4, 0.9),
            'details': details[:5],
            'keywords': self._extract_smart_keywords(combined_text, query_lower),
            'environment': environment,
            'theme_description': self._generate_theme_description(main_activity, details, query_lower)
        }
    
    def _extract_dynamic_details(self, text, query):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –∑–∞–ø—Ä–æ—Å–∞"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ
        import re
        
        # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–∏–º—ã—Ö —Å–ª–æ–≤
        words = re.findall(r'\b[–∞-—è—ë]{3,}\b', text + " " + query)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞
        stop_words = {
            '—É—Å–ª—É–≥–∏', '—Å–µ—Ä–≤–∏—Å', '–∫–æ–º–ø–∞–Ω–∏—è', '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', '–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ', 
            '–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '—Ä–∞–±–æ—Ç–∞', '–±–∏–∑–Ω–µ—Å', '—Ü–µ–Ω—Ç—Ä', '–≥—Ä—É–ø–ø–∞'
        }
        
        meaningful_words = [w for w in words if w not in stop_words]
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ –∏ –¥–ª–∏–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
        word_scores = {}
        for word in meaningful_words:
            score = len(word) + meaningful_words.count(word) * 2
            word_scores[word] = score
        
        return sorted(word_scores.keys(), key=lambda w: word_scores[w], reverse=True)[:5]
    
    def _determine_dynamic_environment(self, activity, details, query):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ä–µ–¥—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        # –ë–∞–∑–æ–≤—ã–µ —Å—Ä–µ–¥—ã –¥–ª—è —Ç–∏–ø–æ–≤ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        base_environments = {
            'education': 'educational facility',
            'medical': 'medical facility', 
            'automotive': 'automotive facility',
            'food': 'culinary environment',
            'beauty': 'beauty salon',
            'fitness': 'fitness facility',
            'tech': 'modern office',
            'art': 'creative studio',
            'music': 'music studio',
            'photography': 'photography studio',
            'construction': 'construction site'
        }
        
        base_env = base_environments.get(activity, 'professional office')
        
        # –£—Ç–æ—á–Ω—è–µ–º —Å—Ä–µ–¥—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ—Ç–∞–ª–µ–π
        if '–∫—É–ª–∏–Ω–∞—Ä' in query and '–∫—É—Ä—Å' in query:
            return 'professional culinary school kitchen'
        elif '—Ñ–æ—Ç–æ' in query and ('–∫—É—Ä—Å' in query or '–æ–±—É—á–µ–Ω' in query):
            return 'photography studio with professional equipment'
        elif '–º—É–∑—ã–∫' in query and '–∫—É—Ä—Å' in query:
            return 'music studio with instruments'
        elif '–∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å' in query or '—Ä–µ–º–æ–Ω—Ç –∞–≤—Ç–æ' in query:
            return 'automotive service garage'
        elif '–∞–≤—Ç–æ—Å–∞–ª–æ–Ω' in query:
            return 'car dealership showroom'
        
        return base_env
    
    def _calculate_specificity(self, query, details):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç—å —Ç–µ–º—ã"""
        # –ß–µ–º –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –∏ –¥–ª–∏–Ω–Ω–µ–µ –∑–∞–ø—Ä–æ—Å, —Ç–µ–º –≤—ã—à–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç—å
        query_words = len(query.split())
        detail_count = len([d for d in details if len(d) > 3])
        
        specificity = (query_words * 0.1) + (detail_count * 0.15)
        return min(specificity, 1.0)
    
    def _extract_smart_keywords(self, text, query):
        """–£–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
        import re
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∑–∞–ø—Ä–æ—Å
        all_text = f"{text} {query}"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–∞ –¥–ª–∏–Ω–æ–π –æ—Ç 3 —Å–∏–º–≤–æ–ª–æ–≤
        words = re.findall(r'\b[–∞-—è—ë]{3,}\b', all_text.lower())
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É
        word_freq = {}
        for word in words:
            word_freq[word] = word_freq.get(word, 0) + 1
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ —Å–ª–æ–≤–∞
        sorted_words = sorted(word_freq.items(), key=lambda x: x[1], reverse=True)
        return [word for word, freq in sorted_words[:8]]
    
    def _generate_theme_description(self, activity, details, query):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤"""
        if not details:
            return query
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ—Ç–∞–ª–µ–π
        main_detail = details[0] if details else activity
        secondary_details = details[1:3] if len(details) > 1 else []
        
        if secondary_details:
            return f"{main_detail} {' '.join(secondary_details)}"
        else:
            return main_detail
    
    def _dynamic_fallback_analysis(self, query):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π fallback –∞–Ω–∞–ª–∏–∑ –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"""
        query_lower = query.lower()
        
        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        details = self._extract_dynamic_details("", query_lower)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        if any(word in query_lower for word in ['–∫—É–ª–∏–Ω–∞—Ä', '–ø–æ–≤–∞—Ä', '–≥–æ—Ç–æ–≤–∫']):
            activity = 'food'
            environment = 'professional kitchen'
        elif any(word in query_lower for word in ['—Ñ–æ—Ç–æ', '—Å—ä–µ–º–∫']):
            activity = 'photography'
            environment = 'photography studio'
        elif any(word in query_lower for word in ['–º—É–∑—ã–∫', '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç']):
            activity = 'music'
            environment = 'music studio'
        elif any(word in query_lower for word in ['–∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å', '—Ä–µ–º–æ–Ω—Ç –∞–≤—Ç–æ', '–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ']):
            activity = 'automotive'
            environment = 'automotive workshop'
        elif any(word in query_lower for word in ['—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥', '–∑—É–±—ã']):
            activity = 'medical'
            environment = 'dental office'
        else:
            activity = 'general'
            environment = 'professional office'
        
        return {
            'category': 'dynamic_business',
            'business_type': activity,
            'confidence': 0.5,
            'details': details,
            'keywords': query.split()[:5],
            'environment': environment,
            'theme_description': details[0] if details else query
        }

class ThematicImageGenerator:
    def __init__(self, silent_mode=False):
        """
        –£–º–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ª–µ–Ω–¥–∏–Ω–≥–æ–≤
        
        Args:
            silent_mode (bool): –ï—Å–ª–∏ True, –Ω–µ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å
        """
        self.silent_mode = silent_mode
        self.context_analyzer = IntelligentContextAnalyzer(silent_mode)
        
        if not self.silent_mode:
            print("üé® AI –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –õ–µ–Ω–¥–∏–Ω–≥–æ–≤")
            print("=" * 60)
            print("‚ú® –£–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∞–Ω–∞–ª–∏–∑–æ–º —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç")

    def detect_theme_from_input(self, user_input):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–º–∞—Ç–∏–∫—É —Å –ø–æ–º–æ—â—å—é –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ–∏—Å–∫–∞"""
        context_data = self.context_analyzer.search_business_context(user_input)
        return context_data['category'], context_data

    def generate_intelligent_prompts(self, context_data, original_input):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∞–Ω–∞–ª–∏–∑–∞"""
        
        business_type = context_data.get('business_type', 'general')
        environment = context_data['environment']
        details = context_data['details']
        keywords = context_data['keywords']
        theme_description = context_data.get('theme_description', original_input)
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å—Ä–µ–¥—ã
        return self._generate_dynamic_prompts(business_type, environment, details, keywords, theme_description, original_input)
    
    def _generate_dynamic_prompts(self, business_type, environment, details, keywords, theme_description, original_input):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        
        # –ë–∞–∑–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤
        main_theme = theme_description if theme_description else original_input
        primary_detail = details[0] if details else business_type
        secondary_detail = details[1] if len(details) > 1 else 'professional service'
        tertiary_detail = details[2] if len(details) > 2 else 'consultation'
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Å—Ä–µ–¥—É –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–µ–º–∞—Ç–∏–∫—É
        if business_type == 'food' and '–∫—É—Ä—Å' in original_input.lower():
            adapted_environment = 'professional culinary school kitchen with chef instructors'
        elif business_type == 'photography' and '–∫—É—Ä—Å' in original_input.lower():
            adapted_environment = 'photography studio classroom with professional equipment'
        elif business_type == 'music' and '–∫—É—Ä—Å' in original_input.lower():
            adapted_environment = 'music education studio with various instruments'
        elif business_type == 'automotive' and '—Ä–µ–º–æ–Ω—Ç' in original_input.lower():
            adapted_environment = 'professional automotive repair workshop'
        elif business_type == 'automotive' and '—Å–∞–ª–æ–Ω' in original_input.lower():
            adapted_environment = 'luxury car dealership showroom'
        elif business_type == 'medical' and '—Å—Ç–æ–º–∞—Ç' in original_input.lower():
            adapted_environment = 'modern dental clinic office'
        else:
            adapted_environment = environment
        
        return {
            "main": f"{adapted_environment}, {primary_detail} activity, professional {business_type} environment",
            "about1": f"{primary_detail} demonstration, professional {business_type} service, expert at work",
            "about2": f"{adapted_environment} equipment and tools, {secondary_detail} process, professional setup",
            "about3": f"{main_theme} consultation area, {tertiary_detail} service, client interaction",
            "review1": f"satisfied customer after {primary_detail} service, successful {main_theme} experience, happy client",
            "review2": f"professional {business_type} specialist, expert {secondary_detail} service, customer satisfaction",
            "review3": f"group of happy customers, {main_theme} success stories, positive service experience",
            "favicon": f"{primary_detail} icon, {business_type} symbol, professional design, transparent background"
        }
        
        # –î–ª—è –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã (–£–î–ê–õ–ò–¢–¨ - —Å—Ç–∞—Ä—ã–π –∫–æ–¥)
        elif category == 'automotive_sales':
            return {
                "main": "luxury car dealership showroom, multiple vehicles displayed, professional automotive sales environment",
                "about1": "elegant sports car in showroom spotlight, premium vehicle presentation, automotive sales",
                "about2": "professional car salesperson with customer, vehicle consultation, automotive sales process",
                "about3": "luxury car interior showcase, premium features demonstration, automotive sales detail",
                "review1": "happy family with new car keys, successful vehicle purchase, automotive sales satisfaction",
                "review2": "businessman signing car purchase documents, automotive sales transaction, professional service",
                "review3": "satisfied customers with their new vehicles, automotive dealership success stories",
                "favicon": "car sales icon, automotive dealership symbol, vehicle key, modern design, transparent background"
            }
        
        elif category == 'dental_service':
            return {
                "main": "modern dental clinic interior, dental chairs, professional dental office environment",
                "about1": "dentist examining patient, dental procedure, professional dental care",
                "about2": "dental equipment and tools, modern dental technology, clinical dental instruments",
                "about3": "dental consultation room, oral health examination, professional dental service",
                "review1": "patient with perfect smile after dental treatment, dental care success, happy smile",
                "review2": "satisfied family after dental checkup, professional dental care, healthy teeth",
                "review3": "dental patient consultation, oral health satisfaction, professional dental advice",
                "favicon": "tooth icon, dental symbol, dental care, clean medical design, transparent background"
            }
        
        elif category == 'medical_service':
            return {
                "main": "modern medical clinic interior, clean professional environment, medical equipment",
                "about1": "professional doctor in white coat, medical expertise, confident portrait",
                "about2": "modern medical equipment, healthcare technology, clinical setting",
                "about3": "medical consultation room, doctor-patient interaction, professional care",
                "review1": "recovered patient with doctor, successful treatment, grateful expression",
                "review2": "healthy family after medical care, satisfied patients, medical success",
                "review3": "elderly patient with caring doctor, medical compassion, healthcare quality",
                "favicon": "medical cross icon, healthcare symbol, clean design, professional, transparent background"
            }
        
        elif category == 'beauty_service':
            return {
                "main": "luxury beauty salon interior, elegant design, professional atmosphere",
                "about1": "professional makeup artist working, beauty transformation, artistic process",
                "about2": "spa treatment room, relaxing atmosphere, wellness and beauty",
                "about3": "hairstyling session, professional hairdresser, beauty salon environment",
                "review1": "beautiful woman after salon treatment, glowing skin, satisfied client",
                "review2": "elegant lady with new hairstyle, confident and happy, beauty success",
                "review3": "group of women enjoying beauty services, friendship and self-care",
                "favicon": "lipstick icon, beauty symbol, elegant design, feminine style, transparent background"
            }
        
        elif category == 'fitness_service':
            return {
                "main": "modern fitness gym interior, equipment visible, bright lighting, spacious",
                "about1": "professional gym equipment, dumbbells and machines, clean modern design",
                "about2": "personal trainer working with client, professional fitness coaching",
                "about3": "group fitness class, people exercising, energetic atmosphere",
                "review1": "fit athletic man after workout, happy expression, gym background",
                "review2": "athletic woman in sportswear, successful fitness transformation, confident pose",
                "review3": "group of people celebrating fitness goals, happy healthy lifestyle",
                "favicon": "dumbbell icon, fitness symbol, simple modern design, vector style, transparent background"
            }
        
        elif category == 'tech_service':
            return {
                "main": "modern tech office, computers and gadgets, innovative workspace environment",
                "about1": "cutting-edge technology devices, smartphones and laptops, tech innovation",
                "about2": "software development team working, coding and collaboration, tech environment",
                "about3": "server room or data center, technology infrastructure, digital innovation",
                "review1": "satisfied tech professional, successful IT specialist, confident expression",
                "review2": "entrepreneur with tech startup success, innovation achievement, modern office",
                "review3": "team of developers celebrating project success, tech collaboration",
                "favicon": "gear or chip icon, technology symbol, modern design, digital style, transparent background"
            }
        
        elif category == 'construction':
            return {
                "main": "construction site with workers, heavy machinery, building project in progress, professional construction",
                "about1": "construction workers with blueprints, architectural planning, building project consultation",
                "about2": "construction equipment and machinery, building tools, professional construction site",
                "about3": "completed building project, construction success, architectural achievement",
                "review1": "satisfied homeowner with construction team, building project completion, happy customer",
                "review2": "construction manager explaining project to client, professional building consultation",
                "review3": "family in front of completed house, construction project success, building satisfaction",
                "favicon": "construction icon, building symbol, hard hat and tools, industrial design, transparent background"
            }
        
        elif category == 'restaurant_service':
            return {
                "main": "elegant restaurant interior, dining tables, warm ambient lighting",
                "about1": "gourmet dish presentation, fine dining, professional food photography",
                "about2": "chef cooking in professional kitchen, culinary expertise, action shot",
                "about3": "wine collection and bar area, premium beverages, elegant atmosphere",
                "review1": "satisfied customer enjoying meal, happy dining experience, restaurant setting",
                "review2": "couple on romantic dinner, elegant restaurant ambiance, joyful moment",
                "review3": "family dinner celebration, happy customers, restaurant atmosphere",
                "favicon": "fork and knife icon, restaurant symbol, elegant design, minimalist, transparent background"
            }
        
        elif category == 'culinary_education':
            return {
                "main": "professional cooking school kitchen, chef instructors and students, culinary training environment",
                "about1": "chef instructor demonstrating cooking techniques, professional kitchen, culinary education",
                "about2": "students practicing cooking skills, hands-on culinary training, professional cooking equipment",
                "about3": "beautifully plated dishes created by students, culinary arts showcase, food presentation",
                "review1": "proud culinary student with chef hat, successful cooking course completion, kitchen background",
                "review2": "group of culinary students celebrating graduation, chef certificates, culinary achievement",
                "review3": "satisfied student chef presenting signature dish, culinary success story, professional kitchen",
                "favicon": "chef hat icon, culinary symbol, cooking cap, transparent background"
            }
        
        elif category == 'language_courses':
            return {
                "main": "modern language classroom, international flags, interactive learning environment",
                "about1": "language teacher with world map, multicultural learning, language education",
                "about2": "students practicing conversation, language exchange, communication skills",
                "about3": "language learning materials and books, study resources, educational tools",
                "review1": "confident student speaking foreign language, language learning success, classroom setting",
                "review2": "multicultural group of language students, international communication, language diversity",
                "review3": "happy student with language certificate, achievement in language learning, proud moment",
                "favicon": "speech bubble icon, language symbol, communication bubble, transparent background"
            }
        
        elif category == 'music_education':
            return {
                "main": "music studio with various instruments, piano, guitars, professional music learning environment",
                "about1": "music teacher with student at piano, music lesson, instrumental instruction",
                "about2": "recording studio equipment, microphones, music production, audio technology",
                "about3": "sheet music and musical notes, music theory, composition materials",
                "review1": "talented student performing on stage, musical achievement, concert performance",
                "review2": "music students in ensemble, group performance, musical collaboration",
                "review3": "proud music graduate with instrument, musical education success, artistic accomplishment",
                "favicon": "musical note icon, music symbol, treble clef, transparent background"
            }
        
        elif category == 'art_education':
            return {
                "main": "bright art studio with easels, paintings, creative workspace, artistic learning environment",
                "about1": "art teacher demonstrating painting technique, artistic instruction, creative process",
                "about2": "art supplies and brushes, painting materials, colorful palette, artistic tools",
                "about3": "student artwork gallery, creative exhibitions, artistic achievements showcase",
                "review1": "proud art student with their painting, artistic success, studio background",
                "review2": "group of art students working on projects, creative collaboration, artistic community",
                "review3": "satisfied artist with completed artwork, creative achievement, artistic fulfillment",
                "favicon": "paint brush icon, art symbol, creative tool, transparent background"
            }
        
        elif category == 'photography_courses':
            return {
                "main": "photography studio with professional lighting, cameras, photo equipment, creative workspace",
                "about1": "photography instructor with professional camera, teaching photography techniques",
                "about2": "portrait photography session, model and photographer, studio lighting setup",
                "about3": "photo editing workstation, computer with photo software, digital photography workflow",
                "review1": "photographer with professional camera equipment, photography course graduate, confident pose",
                "review2": "photography student capturing perfect shot, creative moment, artistic photography",
                "review3": "group of photography students on photo walk, learning expedition, camera equipment",
                "favicon": "camera icon, photography symbol, lens aperture, transparent background"
            }
        
        elif category == 'business_education':
            return {
                "main": "modern business classroom, presentation screen, professional learning environment",
                "about1": "business instructor presenting to students, professional education, business concepts",
                "about2": "business students in group discussion, teamwork, collaborative learning",
                "about3": "business plan documents and charts, entrepreneurship materials, strategic planning",
                "review1": "successful business graduate in professional attire, entrepreneurial achievement",
                "review2": "business team celebrating project success, professional accomplishment, business education",
                "review3": "confident entrepreneur with business plan, startup success, business development",
                "favicon": "briefcase icon, business symbol, professional bag, transparent background"
            }
        
        elif category == 'general_education':
            return {
                "main": "modern classroom or lecture hall, students and teacher, educational environment",
                "about1": "professional teacher explaining lesson, whiteboard, educational setting",
                "about2": "students studying together, collaborative learning, modern classroom",
                "about3": "graduation ceremony, academic success, celebration of education",
                "review1": "successful graduate with diploma, proud achievement, academic attire",
                "review2": "happy student with books, educational success, confident expression",
                "review3": "group of successful students, teamwork in education, celebration",
                "favicon": "graduation cap icon, education symbol, academic design, simple, transparent background"
            }
        
        # –î–ª—è –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
        return self._generate_contextual_prompts(category, environment, details, keywords, original_input)
    
    def _generate_contextual_prompts(self, category, environment, details, keywords, original_input):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤"""
        
        # –ë–∞–∑–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤
        main_activity = keywords[0] if keywords else category.replace('_', ' ')
        specific_detail = details[0] if details else 'professional service'
        service_type = details[1] if len(details) > 1 else 'consultation'
        
        return {
            "main": f"professional {environment}, {main_activity} workspace, modern business interior, overview shot",
            "about1": f"{main_activity} professional demonstration, {specific_detail} process, expert at work",
            "about2": f"{environment} equipment and tools, {service_type} setup, professional workplace",
            "about3": f"{main_activity} consultation area, client service environment, professional meeting",
            "review1": f"satisfied customer after {main_activity} service, successful {specific_detail}, happy client",
            "review2": f"professional {main_activity} consultation, expert advice, customer satisfaction",
            "review3": f"group of happy customers, {main_activity} success stories, positive service experience",
            "favicon": f"{main_activity} icon, {category.replace('_', ' ')} symbol, professional minimalist design, transparent background"
        }

    def get_theme_prompts(self, theme_input):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–º–ø—Ç—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∞–Ω–∞–ª–∏–∑–∞"""
        detected_theme, context_data = self.detect_theme_from_input(theme_input)
        
        if not self.silent_mode:
            print(f"üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {detected_theme}")
            print(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {context_data['confidence']:.2f}")
            print(f"üîç –î–µ—Ç–∞–ª–∏: {', '.join(context_data['details'])}")
            print(f"üè¢ –°—Ä–µ–¥–∞: {context_data['environment']}")
        
        prompts = self.generate_intelligent_prompts(context_data, theme_input)
        return prompts, detected_theme

    def add_randomization(self, prompt):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫ –ø—Ä–æ–º–ø—Ç—É –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏"""
        
        # –°–ª—É—á–∞–π–Ω—ã–µ —Å—Ç–∏–ª–∏ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        styles = [
            "natural lighting", "soft lighting", "bright ambient", "professional lighting"
        ]
        
        # –°–ª—É—á–∞–π–Ω—ã–µ —Ä–∞–∫—É—Ä—Å—ã
        angles = [
            "wide angle shot", "medium shot", "close-up view", "establishing shot", 
            "straight on", "professional angle"
        ]
        
        # –°–ª—É—á–∞–π–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞/—ç–∫—Å—Ç–µ—Ä—å–µ—Ä–∞
        details = [
            "modern furniture", "elegant decor", "contemporary design", "minimalist style",
            "professional setup", "clean lines", "stylish arrangement"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (—É–±—Ä–∞–ª–∏ —Ü–≤–µ—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã)
        selected_style = random.choice(styles)
        selected_angle = random.choice(angles)
        selected_detail = random.choice(details)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π seed –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏
        unique_seed = str(uuid.uuid4())[:8]
        
        enhanced_prompt = f"{prompt}, {selected_style}, {selected_angle}, {selected_detail}, seed:{unique_seed}"
        
        return enhanced_prompt

class ImageGenerator:
    def __init__(self, silent_mode=False):
        """
        –ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–æ–≤
        
        Args:
            silent_mode (bool): –ï—Å–ª–∏ True, –Ω–µ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å
        """
        self.silent_mode = silent_mode
        
        if not silent_mode:
            print("üé® AI –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            print("=" * 50)
            print("‚ú® –í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–æ–≤")
        
    def remove_watermark(self, image):
        """–£–¥–∞–ª—è–µ—Ç –≤–æ—Ç–µ—Ä–º–∞—Ä–∫ —Å–Ω–∏–∑—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            width, height = image.size
            
            # –û–±—Ä–µ–∑–∞–µ–º –Ω–∏–∂–Ω–∏–µ 30 –ø–∏–∫—Å–µ–ª–µ–π –≥–¥–µ –æ–±—ã—á–Ω–æ –≤–æ—Ç–µ—Ä–º–∞—Ä–∫
            cropped_height = height - 30
            cropped_image = image.crop((0, 0, width, cropped_height))
            
            # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –¥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            final_image = cropped_image.resize((width, height), Image.Resampling.LANCZOS)
            
            return final_image
        except:
            return image
        
    def translate_prompt(self, russian_prompt: str):
        """–ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–æ–º–ø—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"""
        translations = {
            "–∫–æ—Ç": "cat", "–∫–æ—Ç–µ–Ω–æ–∫": "kitten", "–∫–æ—Ç–µ–Ω–æ—á–µ–∫": "cute kitten",
            "—Å–æ–±–∞–∫–∞": "dog", "—â–µ–Ω–æ–∫": "puppy", "–ø–µ—Å–∏–∫": "dog",
            "–∑–∞–∫–∞—Ç": "sunset", "–≥–æ—Ä—ã": "mountains", "–ª–µ—Å": "forest",
            "–º–æ—Ä–µ": "ocean", "–ø–ª—è–∂": "beach", "–¥–æ–º": "house", 
            "–≥–æ—Ä–æ–¥": "city", "–∞–≤—Ç–æ–º–æ–±–∏–ª—å": "car", "–º–∞—à–∏–Ω–∞": "car",
            "—Ü–≤–µ—Ç—ã": "flowers", "—Ä–æ–∑–∞": "rose", "—Ç—é–ª—å–ø–∞–Ω": "tulip",
            "–¥–µ–≤—É—à–∫–∞": "woman", "–∂–µ–Ω—â–∏–Ω–∞": "woman", "–¥–µ–≤–æ—á–∫–∞": "girl",
            "–º—É–∂—á–∏–Ω–∞": "man", "–ø–∞—Ä–µ–Ω—å": "young man", "–º–∞–ª—å—á–∏–∫": "boy",
            "—Ä–µ–±–µ–Ω–æ–∫": "child", "–¥–µ—Ç–∏": "children",
            "–∫—Ä–∞—Å–∏–≤—ã–π": "beautiful", "–∫—Ä–∞—Å–∏–≤–∞—è": "beautiful",
            "—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π": "realistic", "—Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π": "photorealistic",
            "–ø–æ—Ä—Ç—Ä–µ—Ç": "portrait", "–ø–µ–π–∑–∞–∂": "landscape",
            "–ø—Ä–∏—Ä–æ–¥–∞": "nature", "–≤–µ—Å–Ω–∞": "spring", "–ª–µ—Ç–æ": "summer",
            "–æ—Å–µ–Ω—å": "autumn", "–∑–∏–º–∞": "winter",
            "–¥–æ–∂–¥—å": "rain", "—Å–Ω–µ–≥": "snow", "—Å–æ–ª–Ω—Ü–µ": "sun",
            "–Ω–µ–±–æ": "sky", "–æ–±–ª–∞–∫–∞": "clouds", "–∑–≤–µ–∑–¥—ã": "stars",
            "–µ–¥–∞": "food", "—Ç–æ—Ä—Ç": "cake", "–ø–∏—Ü—Ü–∞": "pizza"
        }
        
        english_prompt = russian_prompt.lower()
        for ru, en in translations.items():
            english_prompt = english_prompt.replace(ru, en)
        
        return english_prompt
    
    def generate_via_pollinations_clean(self, prompt):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Pollinations AI —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–∞"""
        try:
            enhanced_prompt = f"{prompt}, high quality, detailed, masterpiece, 8k, professional photography"
            
            base_url = "https://image.pollinations.ai/prompt/"
            
            import urllib.parse
            encoded_prompt = urllib.parse.quote(enhanced_prompt)
            
            params = "?width=1024&height=1024&model=flux&enhance=true&nologo=true"
            
            image_url = base_url + encoded_prompt + params
            
            if not self.silent_mode:
                print(f"üìù –ü—Ä–æ–º–ø—Ç: {enhanced_prompt}")
                print("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–∞...")
            
            response = requests.get(image_url, timeout=120)
            
            if response.status_code == 200:
                image = Image.open(BytesIO(response.content))
                
                # –£–¥–∞–ª—è–µ–º –≤–æ—Ç–µ—Ä–º–∞—Ä–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
                clean_image = self.remove_watermark(image)
                
                return clean_image
            else:
                if not self.silent_mode:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                return None
                
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return None
    
    def generate_via_dezgo(self, prompt):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ DezGO API - –±–µ–∑ –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–æ–≤"""
        try:
            enhanced_prompt = f"{prompt}, high quality, detailed, masterpiece"
            
            if not self.silent_mode:
                print(f"üìù –ü—Ä–æ–º–ø—Ç: {enhanced_prompt}")
                print("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ DezGO (–±–µ–∑ –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–æ–≤)...")
            
            api_url = "https://api.dezgo.com/text2image"
            
            data = {
                'prompt': enhanced_prompt,
                'model': 'epic_realism',
                'width': 1024,
                'height': 1024,
                'guidance': 7.5,
                'steps': 25,
                'format': 'png'
            }
            
            response = requests.post(api_url, data=data, timeout=120)
            
            if response.status_code == 200:
                image = Image.open(BytesIO(response.content))
                return image
            else:
                if not self.silent_mode:
                    print(f"‚ùå DezGO –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                return None
                
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå –û—à–∏–±–∫–∞ DezGO: {e}")
            return None
    
    def generate_via_huggingface_clean(self, prompt):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ HF –±–µ–∑ –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–æ–≤"""
        try:
            enhanced_prompt = f"{prompt}, high quality, detailed, masterpiece, professional photography"
            
            if not self.silent_mode:
                print(f"üìù –ü—Ä–æ–º–ø—Ç: {enhanced_prompt}")
                print("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Hugging Face...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
            api_url = "https://api-inference.huggingface.co/models/stabilityai/stable-diffusion-xl-base-1.0"
            
            headers = {"Content-Type": "application/json"}
            data = {
                "inputs": enhanced_prompt,
                "parameters": {
                    "negative_prompt": "watermark, text, logo, signature, blurry, low quality",
                    "num_inference_steps": 25,
                    "guidance_scale": 7.5,
                    "width": 1024,
                    "height": 1024
                }
            }
            
            response = requests.post(api_url, headers=headers, json=data, timeout=120)
            
            if response.status_code == 200:
                image = Image.open(BytesIO(response.content))
                return image
            elif response.status_code == 503:
                if not self.silent_mode:
                    print("‚è≥ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É")
                return None
            else:
                if not self.silent_mode:
                    print(f"‚ùå HF –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                return None
                
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå –û—à–∏–±–∫–∞ HF: {e}")
            return None

    def generate_thematic_set(self, theme_input, media_dir, method="1", progress_callback=None):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –∏–∑ 8 —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        
        Args:
            theme_input (str): –¢–µ–º–∞—Ç–∏–∫–∞ –±–∏–∑–Ω–µ—Å–∞
            media_dir (str): –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ media
            method (str): –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (1, 2, 3)
            progress_callback (callable): –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {–∏–º—è_—Ñ–∞–π–ª–∞: –ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É –∏–ª–∏ None}
        """
        thematic_gen = ThematicImageGenerator(silent_mode=self.silent_mode)
        prompts, detected_theme = thematic_gen.get_theme_prompts(theme_input)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É media –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(media_dir, exist_ok=True)
        
        if not self.silent_mode:
            print(f"\nüé® –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é 8 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ–º–∞—Ç–∏–∫–∏: {detected_theme}")
            print("=" * 60)
        
        if progress_callback:
            progress_callback(f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ–º–∞—Ç–∏–∫–∏: {detected_theme}")
        
        image_names = ["main", "about1", "about2", "about3", "review1", "review2", "review3", "favicon"]
        results = {}
        
        for i, image_name in enumerate(image_names, 1):
            if not self.silent_mode:
                print(f"\nüñºÔ∏è  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {i}/8: {image_name}")
                print("-" * 40)
            
            if progress_callback:
                progress_callback(f"üñºÔ∏è  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {i}/8: {image_name}")
            
            prompt = prompts[image_name]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—é –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ (–∫—Ä–æ–º–µ —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏)
            if image_name != "favicon":
                prompt = thematic_gen.add_randomization(prompt)
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏
            if image_name == "favicon":
                prompt += ", icon design, vector style, flat design, simple logo, transparent PNG, alpha channel, no background, white cutout, isolated on transparent"
            
            # –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            if method == "2":
                image = self.generate_via_dezgo(prompt)
            elif method == "3":
                image = self.generate_via_huggingface_clean(prompt)
            else:
                image = self.generate_via_pollinations_clean(prompt)
            
            if image:
                # –î–ª—è —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏ –¥–µ–ª–∞–µ–º —Ä–∞–∑–º–µ—Ä 512x512 (–ø–æ—Ç–æ–º –º–æ–∂–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å)
                if image_name == "favicon":
                    image = image.resize((512, 512), Image.Resampling.LANCZOS)
                
                filename = os.path.join(media_dir, f"{image_name}.png")
                image.save(filename)
                results[image_name] = filename
                
                if not self.silent_mode:
                    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                time.sleep(2)
            else:
                if not self.silent_mode:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å {image_name}")
                results[image_name] = None
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if not self.silent_mode:
            print(f"\nüéâ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
            print("=" * 60)
            print(f"üìÅ –ü–∞–ø–∫–∞: {media_dir}")
            print(f"üéØ –¢–µ–º–∞—Ç–∏–∫–∞: {detected_theme}")
            print("\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
            
            for name, filename in results.items():
                if filename:
                    print(f"  ‚úÖ {name}: {filename}")
                else:
                    print(f"  ‚ùå {name}: –ù–ï –°–û–ó–î–ê–ù")
        
        if progress_callback:
            successful_count = len([f for f in results.values() if f is not None])
            progress_callback(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {successful_count}/8 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        return results

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    generator = ImageGenerator()
    
    print("\nüåü –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:")
    print("1. –û–¥–∏–Ω–æ—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    print("2. –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –Ω–∞–±–æ—Ä –¥–ª—è –ª–µ–Ω–¥–∏–Ω–≥–∞ (8 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)")
    print()
    
    mode = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (1-2): ").strip()
    
    if mode == "2":
        # –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
        print("\nüéØ –†–ï–ñ–ò–ú: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–±–æ—Ä–∞")
        print("=" * 50)
        print("–ü—Ä–∏–º–µ—Ä—ã —Ç–µ–º–∞—Ç–∏–∫:")
        print("  ‚Ä¢ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω, –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å, —Ñ–∏—Ç–Ω–µ—Å")
        print("  ‚Ä¢ —Ä–µ—Å—Ç–æ—Ä–∞–Ω, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, –º–µ–¥–∏—Ü–∏–Ω–∞")
        print("  ‚Ä¢ –∫—Ä–∞—Å–æ—Ç–∞, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –∏–ª–∏ –ª—é–±–∞—è –¥—Ä—É–≥–∞—è")
        print()
        
        theme_input = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞: ").strip()
        
        if not theme_input:
            print("‚ùå –¢–µ–º–∞—Ç–∏–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞!")
            return
        
        print("\nüé® –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
        print("1. Pollinations + —É–¥–∞–ª–µ–Ω–∏–µ –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
        print("2. DezGO (—á–∏—Å—Ç—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)")
        print("3. Hugging Face SDXL")
        
        method_choice = input("–í—ã–±–æ—Ä (1-3 –∏–ª–∏ Enter –¥–ª—è –º–µ—Ç–æ–¥–∞ 1): ").strip()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–±–æ—Ä
        results = generator.generate_thematic_set(theme_input, "media", method_choice)
        
        print(f"\nüí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–≤–æ–µ–º –ª–µ–Ω–¥–∏–Ω–≥–µ!")
        print("   –ü—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–∞–ø–∫—É 'media' –≤ –≤–∞—à –ø—Ä–æ–µ–∫—Ç.")
        
    else:
        # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º (–æ–¥–∏–Ω–æ—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è)
        print("\nüé® –†–ï–ñ–ò–ú: –û–¥–∏–Ω–æ—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è")
        print("=" * 40)
        
        while True:
            print("\nüìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
            prompt = input("–ü—Ä–æ–º–ø—Ç (–∏–ª–∏ '–≤—ã—Ö–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è): ").strip()
            
            if prompt.lower() in ['–≤—ã—Ö–æ–¥', 'exit', 'quit']:
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
                
            if not prompt:
                continue
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if any(ord(char) > 127 for char in prompt):
                english_prompt = generator.translate_prompt(prompt)
                print(f"üîÑ –ü–µ—Ä–µ–≤–æ–¥: {english_prompt}")
            else:
                english_prompt = prompt
            
            # –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞
            print("\nüé® –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥:")
            print("1. Pollinations + —É–¥–∞–ª–µ–Ω–∏–µ –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
            print("2. DezGO (—á–∏—Å—Ç—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)")
            print("3. Hugging Face SDXL")
            
            method_choice = input("–í—ã–±–æ—Ä (1-3 –∏–ª–∏ Enter –¥–ª—è –º–µ—Ç–æ–¥–∞ 1): ").strip()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º
            if method_choice == "2":
                image = generator.generate_via_dezgo(english_prompt)
            elif method_choice == "3":
                image = generator.generate_via_huggingface_clean(english_prompt)
            else:
                image = generator.generate_via_pollinations_clean(english_prompt)
            
            if image:
                os.makedirs("generated_images", exist_ok=True)
                timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"generated_images/image_{timestamp}.png"
                image.save(filename)
                
                print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
                
                # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                continue_choice = input("\n–°–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ? (y/n): ").strip().lower()
                if continue_choice in ['n', 'no', '–Ω–µ—Ç']:
                    break
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

if __name__ == "__main__":
    main()