# -*- coding: utf-8 -*-

"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Icons8 API
–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫ –ø–æ —Ç–µ–º–∞—Ç–∏–∫–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ñ–∞–≤–∏–∫–æ–Ω–æ–∫
"""

import requests
import random
import time
from urllib.parse import quote
import os
from PIL import Image
from io import BytesIO

class Icons8Manager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Icons8 API"""
    
    def __init__(self, api_key=None, silent_mode=False):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Icons8 Manager
        
        Args:
            api_key (str): API –∫–ª—é—á Icons8 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            silent_mode (bool): –†–µ–∂–∏–º –±–µ–∑ –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        self.api_key = api_key
        self.silent_mode = silent_mode
        self.base_url = "https://search.icons8.com/api/iconsets/v5/search"
        self.icon_url_base = "https://img.icons8.com"
        
        # –ö—ç—à –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        self.search_cache = {}
        
        if not self.silent_mode:
            print("üéØ Icons8 Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def search_icons_by_theme(self, theme, limit=20):
        """
        –ü–æ–∏—Å–∫ –∏–∫–æ–Ω–æ–∫ –ø–æ —Ç–µ–º–∞—Ç–∏–∫–µ
        
        Args:
            theme (str): –¢–µ–º–∞—Ç–∏–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
            limit (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ –∏–∫–æ–Ω–æ–∫
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = f"{theme}_{limit}"
            if cache_key in self.search_cache:
                if not self.silent_mode:
                    print(f"üìã –ò—Å–ø–æ–ª—å–∑—É—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è '{theme}'")
                return self.search_cache[cache_key]
            
            if not self.silent_mode:
                print(f"üîç –ü–æ–∏—Å–∫ –∏–∫–æ–Ω–æ–∫ –¥–ª—è —Ç–µ–º–∞—Ç–∏–∫–∏: {theme}")
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–º–∞—Ç–∏–∫—É –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞
            english_theme = self._translate_theme_to_english(theme)
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            params = {
                'term': english_theme,
                'limit': limit,
                'offset': 0,
                'category': '',
                'subcategory': '',
                'style': '',
                'color': '',
                'shape': '',
                'format': 'png',
                'size': '512'
            }
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –±–µ–∑ API –∫–ª—é—á–∞ (–ø—É–±–ª–∏—á–Ω—ã–π –ø–æ–∏—Å–∫)
            response = requests.get(self.base_url, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                icons = self._parse_search_results(data)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                self.search_cache[cache_key] = icons
                
                if not self.silent_mode:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(icons)} –∏–∫–æ–Ω–æ–∫ –¥–ª—è '{theme}'")
                
                return icons
            else:
                if not self.silent_mode:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ Icons8: {response.status_code}")
                return []
                
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ Icons8: {e}")
            return []
    
    def _translate_theme_to_english(self, theme):
        """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–º–∞—Ç–∏–∫—É –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞"""
        translations = {
            # –ö—É–ª–∏–Ω–∞—Ä–∏—è
            '–∫—É–ª–∏–Ω–∞—Ä': 'cooking chef food kitchen',
            '–ø–æ–≤–∞—Ä': 'chef cook cooking',
            '–≥–æ—Ç–æ–≤–∫': 'cooking food kitchen',
            '–µ–¥–∞': 'food restaurant',
            '—Ä–µ—Å—Ç–æ—Ä–∞–Ω': 'restaurant food dining',
            '–∫–∞—Ñ–µ': 'cafe coffee restaurant',
            
            # –ê–≤—Ç–æ–º–æ–±–∏–ª–∏  
            '–∞–≤—Ç–æ': 'car automotive vehicle',
            '–º–∞—à–∏–Ω': 'car vehicle auto',
            '–∞–≤—Ç–æ–º–æ–±–∏–ª': 'automobile car vehicle',
            '–∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å': 'car service garage repair',
            '—Ä–µ–º–æ–Ω—Ç –∞–≤—Ç–æ': 'car repair service garage',
            '–∞–≤—Ç–æ—Å–∞–ª–æ–Ω': 'car dealership showroom',
            
            # –ú–µ–¥–∏—Ü–∏–Ω–∞
            '–º–µ–¥–∏—Ü–∏–Ω': 'medical health doctor',
            '–∑–¥–æ—Ä–æ–≤—å–µ': 'health medical care',
            '–ª–µ—á–µ–Ω–∏–µ': 'treatment medical health',
            '—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥': 'dentist dental teeth',
            '–∑—É–±—ã': 'teeth dental dentist',
            '–∫–ª–∏–Ω–∏–∫–∞': 'clinic medical hospital',
            
            # –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
            '–∫—É—Ä—Å—ã': 'education course learning',
            '–æ–±—É—á–µ–Ω–∏–µ': 'education learning study',
            '—à–∫–æ–ª–∞': 'school education learning',
            '—É—á–µ–±–∞': 'study education learning',
            
            # –ö—Ä–∞—Å–æ—Ç–∞
            '–∫—Ä–∞—Å–æ—Ç–∞': 'beauty salon spa',
            '—Å–∞–ª–æ–Ω': 'salon beauty spa',
            '–∫–æ—Å–º–µ—Ç–æ–ª–æ–≥': 'beauty cosmetics spa',
            '–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä': 'hairdresser salon beauty',
            
            # –§–∏—Ç–Ω–µ—Å
            '—Ñ–∏—Ç–Ω–µ—Å': 'fitness gym sport',
            '—Å–ø–æ—Ä—Ç': 'sport fitness gym',
            '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫': 'training fitness workout',
            
            # –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è
            '—Ñ–æ—Ç–æ': 'photography camera photo',
            '—Å—ä–µ–º–∫': 'photography shooting camera',
            '–∫–∞–º–µ—Ä': 'camera photography photo',
            
            # –ú—É–∑—ã–∫–∞
            '–º—É–∑—ã–∫': 'music instrument sound',
            '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç': 'instrument music sound',
            
            # –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
            '—Ç–µ—Ö–Ω–æ–ª–æ–≥': 'technology tech computer',
            '–∫–æ–º–ø—å—é—Ç–µ—Ä': 'computer technology it',
            '–ø—Ä–æ–≥—Ä–∞–º': 'programming code computer',
            '—Å–∞–π—Ç': 'website web internet',
            
            # –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ
            '—Å—Ç—Ä–æ–∏—Ç–µ–ª': 'construction building tools',
            '—Ä–µ–º–æ–Ω—Ç': 'repair tools construction',
            '—Å—Ç—Ä–æ–π–∫': 'construction building',
        }
        
        theme_lower = theme.lower()
        
        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–µ—Ä–µ–≤–æ–¥
        for ru_word, en_translation in translations.items():
            if ru_word in theme_lower:
                return en_translation
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
        if any(word in theme_lower for word in ['–∫—É—Ä—Å', '–æ–±—É—á–µ–Ω', '—à–∫–æ–ª']):
            return 'education learning course'
        elif any(word in theme_lower for word in ['–±–∏–∑–Ω–µ—Å', '–∫–æ–º–ø–∞–Ω', '—É—Å–ª—É–≥']):
            return 'business service company'
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Ç–µ–º–∞—Ç–∏–∫—É + –æ–±—â–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
            return f"{theme} business service"
    
    def _parse_search_results(self, data):
        """–ü–∞—Ä—Å–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ Icons8"""
        icons = []
        
        try:
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è, –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            items = []
            
            if 'icons' in data:
                items = data['icons']
            elif 'results' in data:
                items = data['results'] 
            elif isinstance(data, list):
                items = data
            
            for item in items:
                try:
                    icon_info = self._extract_icon_info(item)
                    if icon_info:
                        icons.append(icon_info)
                except Exception as e:
                    continue
                    
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        
        return icons
    
    def _extract_icon_info(self, item):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∫–æ–Ω–∫–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö
            icon_id = None
            name = "icon"
            category = "general"
            
            # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è ID
            if 'id' in item:
                icon_id = item['id']
            elif 'icon_id' in item:
                icon_id = item['icon_id']
            elif 'uuid' in item:
                icon_id = item['uuid']
            
            # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∏–º–µ–Ω–∏
            if 'name' in item:
                name = item['name']
            elif 'title' in item:
                name = item['title']
            
            # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if 'category' in item:
                category = item.get('category', {}).get('name', 'general')
            elif 'categories' in item and item['categories']:
                category = item['categories'][0].get('name', 'general')
            
            if icon_id:
                return {
                    'id': icon_id,
                    'name': name,
                    'category': category,
                    'url_512': f"{self.icon_url_base}/512/{icon_id}.png",
                    'url_256': f"{self.icon_url_base}/256/{icon_id}.png",
                    'url_128': f"{self.icon_url_base}/128/{icon_id}.png"
                }
                
        except Exception as e:
            pass
            
        return None
    
    def get_random_favicon_for_theme(self, theme):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ñ–∞–≤–∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–µ–º–∞—Ç–∏–∫–∏
        
        Args:
            theme (str): –¢–µ–º–∞—Ç–∏–∫–∞
            
        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–∫–æ–Ω–∫–µ –∏–ª–∏ None
        """
        icons = self.search_icons_by_theme(theme, limit=10)
        
        if icons:
            selected_icon = random.choice(icons)
            if not self.silent_mode:
                print(f"üéØ –í—ã–±—Ä–∞–Ω–∞ –∏–∫–æ–Ω–∫–∞: {selected_icon['name']} (ID: {selected_icon['id']})")
            return selected_icon
        else:
            if not self.silent_mode:
                print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∫–æ–Ω–æ–∫ –¥–ª—è —Ç–µ–º–∞—Ç–∏–∫–∏ '{theme}'")
            return None
    
    def download_icon(self, icon_info, size=512, output_path=None):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∫–æ–Ω–∫—É
        
        Args:
            icon_info (dict): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∫–æ–Ω–∫–µ
            size (int): –†–∞–∑–º–µ—Ä –∏–∫–æ–Ω–∫–∏ (128, 256, 512)
            output_path (str): –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            
        Returns:
            PIL.Image: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –∏–ª–∏ None
        """
        try:
            # –í—ã–±–∏—Ä–∞–µ–º URL –ø–æ —Ä–∞–∑–º–µ—Ä—É
            if size >= 512:
                url = icon_info['url_512']
            elif size >= 256:
                url = icon_info['url_256']
            else:
                url = icon_info['url_128']
            
            if not self.silent_mode:
                print(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∫–æ–Ω–∫–∏: {url}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∫–æ–Ω–∫—É
            response = requests.get(url, timeout=15)
            
            if response.status_code == 200:
                # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image = Image.open(BytesIO(response.content))
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å
                if output_path:
                    image.save(output_path)
                    if not self.silent_mode:
                        print(f"üíæ –ò–∫–æ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {output_path}")
                
                return image
            else:
                if not self.silent_mode:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status_code}")
                return None
                
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∫–æ–Ω–∫–∏: {e}")
            return None
    
    def create_favicon_from_theme(self, theme, output_path, size=512):
        """
        –°–æ–∑–¥–∞–µ—Ç —Ñ–∞–≤–∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–µ–º–∞—Ç–∏–∫–∏
        
        Args:
            theme (str): –¢–µ–º–∞—Ç–∏–∫–∞
            output_path (str): –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            size (int): –†–∞–∑–º–µ—Ä —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            if not self.silent_mode:
                print(f"üé® –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–µ–º–∞—Ç–∏–∫–∏: {theme}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∏–∫–æ–Ω–∫—É
            icon_info = self.get_random_favicon_for_theme(theme)
            
            if not icon_info:
                return False
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∫–æ–Ω–∫—É
            image = self.download_icon(icon_info, size)
            
            if image:
                # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ä–∞–∑–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
                if image.size != (size, size):
                    image = image.resize((size, size), Image.Resampling.LANCZOS)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGBA –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
                if image.mode != 'RGBA':
                    image = image.convert('RGBA')
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º
                image.save(output_path)
                
                if not self.silent_mode:
                    print(f"‚úÖ –§–∞–≤–∏–∫–æ–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {output_path}")
                    file_size = os.path.getsize(output_path)
                    print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
                
                return True
            else:
                return False
                
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏: {e}")
            return False

# Fallback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–µ–∑ API –∫–ª—é—á–∞
def try_free_icon_search(theme):
    """
    –ü—Ä–æ–±—É–µ—Ç –Ω–∞–π—Ç–∏ –∏–∫–æ–Ω–∫–∏ —á–µ—Ä–µ–∑ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    
    Args:
        theme (str): –¢–µ–º–∞—Ç–∏–∫–∞
        
    Returns:
        list: –°–ø–∏—Å–æ–∫ URL –∏–∫–æ–Ω–æ–∫
    """
    try:
        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –æ—Ç–∫—Ä—ã—Ç—ã–µ API
        theme_en = theme.replace('–∫—É–ª–∏–Ω–∞—Ä', 'cooking').replace('–∞–≤—Ç–æ', 'car').replace('–º–µ–¥–∏—Ü–∏–Ω', 'medical')
        
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–∫–æ–Ω–æ–∫
        # –ù–∞–ø—Ä–∏–º–µ—Ä, Tabler Icons, Heroicons –∏ —Ç.–¥.
        
        return []
    except:
        return []

def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Icons8 Manager"""
    print("üß™ –¢–µ—Å—Ç Icons8 Manager")
    print("=" * 50)
    
    manager = Icons8Manager()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
    theme = "–∫—É–ª–∏–Ω–∞—Ä–Ω—ã–µ –∫—É—Ä—Å—ã"
    icons = manager.search_icons_by_theme(theme, limit=5)
    
    print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ {len(icons)} –∏–∫–æ–Ω–æ–∫ –¥–ª—è '{theme}':")
    for i, icon in enumerate(icons[:3], 1):
        print(f"  {i}. {icon['name']} (ID: {icon['id']})")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏
    if icons:
        print(f"\nüé® –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏...")
        test_path = "test_icons8_favicon.png"
        success = manager.create_favicon_from_theme(theme, test_path)
        
        if success:
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Ñ–∞–≤–∏–∫–æ–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {test_path}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Ñ–∞–≤–∏–∫–æ–Ω–∫—É")

if __name__ == "__main__":
    main() 