"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ñ–∞–≤–∏–∫–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ favicon.io
–°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–≤–∏–∫–æ–Ω–æ–∫
"""

import requests
import os
import time
from pathlib import Path
import random
from PIL import Image, ImageDraw, ImageFont
import zipfile
import tempfile

class FaviconIOGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ñ–∞–≤–∏–∫–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ favicon.io API"""
    
    def __init__(self, silent_mode=False):
        self.silent_mode = silent_mode
        self.base_url = "https://favicon.io"
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        })
    
    def generate_text_favicon(self, text, theme="", output_path="", size=512):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∞–≤–∏–∫–æ–Ω–∫—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—è favicon.io
        
        Args:
            text (str): –¢–µ–∫—Å—Ç –¥–ª—è —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏ (1-2 –±—É–∫–≤—ã)
            theme (str): –¢–µ–º–∞—Ç–∏–∫–∞ –¥–ª—è —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã
            output_path (str): –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            size (int): –†–∞–∑–º–µ—Ä —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        """
        try:
            if not self.silent_mode:
                print(f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ñ–∞–≤–∏–∫–æ–Ω–∫—É –∏–∑ —Ç–µ–∫—Å—Ç–∞: {text}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã –¥–ª—è —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏
            favicon_text = self._extract_favicon_text(text, theme)
            
            # –¶–≤–µ—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã –ø–æ —Ç–µ–º–∞—Ç–∏–∫–∞–º
            color_scheme = self._get_color_scheme(theme)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –Ω–æ –∫—Ä–∞—Å–∏–≤—É—é —Ñ–∞–≤–∏–∫–æ–Ω–∫—É –ª–æ–∫–∞–ª—å–Ω–æ
            # (favicon.io –Ω–µ –∏–º–µ–µ—Ç –ø—Ä—è–º–æ–≥–æ API, –ø–æ—ç—Ç–æ–º—É –¥–µ–ª–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –≤ –∏—Ö —Å—Ç–∏–ª–µ)
            favicon_created = self._create_favicon_locally(
                favicon_text, color_scheme, output_path, size
            )
            
            if favicon_created and not self.silent_mode:
                print(f"‚úÖ –§–∞–≤–∏–∫–æ–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {output_path}")
            
            return favicon_created
            
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏: {e}")
            return False
    
    def _extract_favicon_text(self, text, theme):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏"""
        if not text or not theme:
            return "‚òÖ"
        
        # –ò—â–µ–º –ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã —Ç–µ–º–∞—Ç–∏–∫–∏
        words = theme.split()
        if len(words) >= 2:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã –¥–≤—É—Ö —Å–ª–æ–≤
            return f"{words[0][0]}{words[1][0]}".upper()
        elif len(words) == 1 and len(words[0]) >= 2:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–µ –±—É–∫–≤—ã –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞
            return words[0][:2].upper()
        elif len(words) == 1:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É
            return words[0][0].upper()
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–≤–µ–∑–¥–æ—á–∫—É –∫–∞–∫ fallback
            return "‚òÖ"
    
    def _get_color_scheme(self, theme):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É –¥–ª—è —Ç–µ–º–∞—Ç–∏–∫–∏"""
        # –¶–≤–µ—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –±–∏–∑–Ω–µ—Å–∞
        theme_colors = {
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ/IT
            'tech': {'bg': '#2563eb', 'text': '#ffffff'},  # –°–∏–Ω–∏–π
            'it': {'bg': '#7c3aed', 'text': '#ffffff'},     # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
            'digital': {'bg': '#0891b2', 'text': '#ffffff'}, # Cyan
            
            # –ú–µ–¥–∏—Ü–∏–Ω–∞/–ó–¥–æ—Ä–æ–≤—å–µ
            '–º–µ–¥–∏—Ü–∏–Ω': {'bg': '#dc2626', 'text': '#ffffff'}, # –ö—Ä–∞—Å–Ω—ã–π
            '–∑–¥–æ—Ä–æ–≤—å': {'bg': '#059669', 'text': '#ffffff'}, # –ó–µ–ª–µ–Ω—ã–π
            '–∫–ª–∏–Ω–∏–∫': {'bg': '#dc2626', 'text': '#ffffff'},  # –ö—Ä–∞—Å–Ω—ã–π
            
            # –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–∞—è —Ç–µ–º–∞—Ç–∏–∫–∞
            '–∞–≤—Ç–æ': {'bg': '#3b82f6', 'text': '#ffffff'},    # –°–∏–Ω–∏–π –≤–º–µ—Å—Ç–æ —á–µ—Ä–Ω–æ–≥–æ
            '–º–∞—à–∏–Ω': {'bg': '#6366f1', 'text': '#ffffff'},   # –ò–Ω–¥–∏–≥–æ –≤–º–µ—Å—Ç–æ —Å–µ—Ä–æ–≥–æ
            '—Å–µ—Ä–≤–∏—Å': {'bg': '#0891b2', 'text': '#ffffff'},  # Cyan
            '–º–æ–π–∫': {'bg': '#06b6d4', 'text': '#ffffff'},    # –ì–æ–ª—É–±–æ–π –¥–ª—è –∞–≤—Ç–æ–º–æ–π–∫–∏
            
            # –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
            '–æ–±—Ä–∞–∑–æ–≤–∞–Ω': {'bg': '#7c3aed', 'text': '#ffffff'}, # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
            '–∫—É—Ä—Å': {'bg': '#2563eb', 'text': '#ffffff'},       # –°–∏–Ω–∏–π
            '—à–∫–æ–ª': {'bg': '#059669', 'text': '#ffffff'},       # –ó–µ–ª–µ–Ω—ã–π
            
            # –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å
            '–Ω–µ–¥–≤–∏–∂–∏–º': {'bg': '#059669', 'text': '#ffffff'},   # –ó–µ–ª–µ–Ω—ã–π
            '–¥–æ–º': {'bg': '#dc2626', 'text': '#ffffff'},        # –ö—Ä–∞—Å–Ω—ã–π
            '–∫–≤–∞—Ä—Ç–∏—Ä': {'bg': '#2563eb', 'text': '#ffffff'},    # –°–∏–Ω–∏–π
            
            # –ö—Ä–∞—Å–æ—Ç–∞
            '—Å–∞–ª–æ–Ω': {'bg': '#ec4899', 'text': '#ffffff'},      # –†–æ–∑–æ–≤—ã–π
            '–∫—Ä–∞—Å–æ—Ç': {'bg': '#a855f7', 'text': '#ffffff'},     # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
            '—Å—Ç—Ä–∏–∂': {'bg': '#f59e0b', 'text': '#ffffff'},      # –û—Ä–∞–Ω–∂–µ–≤—ã–π
            
            # –ï–¥–∞
            '—Ä–µ—Å—Ç–æ—Ä–∞–Ω': {'bg': '#dc2626', 'text': '#ffffff'},   # –ö—Ä–∞—Å–Ω—ã–π
            '–∫–∞—Ñ–µ': {'bg': '#f59e0b', 'text': '#ffffff'},       # –û—Ä–∞–Ω–∂–µ–≤—ã–π
            '–¥–æ—Å—Ç–∞–≤–∫': {'bg': '#059669', 'text': '#ffffff'},    # –ó–µ–ª–µ–Ω—ã–π
            
            # –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ
            '—Å—Ç—Ä–æ–∏—Ç–µ–ª': {'bg': '#f59e0b', 'text': '#ffffff'},   # –û—Ä–∞–Ω–∂–µ–≤—ã–π
            '—Ä–µ–º–æ–Ω—Ç': {'bg': '#374151', 'text': '#ffffff'},     # –°–µ—Ä—ã–π
            '–¥–∏–∑–∞–π–Ω': {'bg': '#a855f7', 'text': '#ffffff'},     # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
        }
        
        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ç–µ–º–∞—Ç–∏–∫—É
        theme_lower = theme.lower()
        for key, colors in theme_colors.items():
            if key in theme_lower:
                return colors
        
        # –ö—Ä–∞—Å–∏–≤—ã–µ —Ü–≤–µ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_schemes = [
            {'bg': '#2563eb', 'text': '#ffffff'},  # –°–∏–Ω–∏–π
            {'bg': '#059669', 'text': '#ffffff'},  # –ó–µ–ª–µ–Ω—ã–π
            {'bg': '#dc2626', 'text': '#ffffff'},  # –ö—Ä–∞—Å–Ω—ã–π
            {'bg': '#7c3aed', 'text': '#ffffff'},  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
            {'bg': '#f59e0b', 'text': '#ffffff'},  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
            {'bg': '#0891b2', 'text': '#ffffff'},  # Cyan
        ]
        
        return random.choice(default_schemes)
    
    def _create_favicon_locally(self, text, color_scheme, output_path, size):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–≤–∏–∫–æ–Ω–∫—É –ª–æ–∫–∞–ª—å–Ω–æ –≤ —Å—Ç–∏–ª–µ favicon.io"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = Image.new('RGB', (size, size), color=color_scheme['bg'])
            draw = ImageDraw.Draw(img)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—Ä–∞—Å–∏–≤—ã–π —à—Ä–∏—Ñ—Ç
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
                font_paths = [
                    "C:/Windows/Fonts/arial.ttf",
                    "C:/Windows/Fonts/calibri.ttf", 
                    "C:/Windows/Fonts/segoeui.ttf",
                    "/System/Library/Fonts/Arial.ttf",  # macOS
                    "/usr/share/fonts/truetype/arial.ttf"  # Linux
                ]
                
                font = None
                font_size = int(size * 0.6)  # 60% –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                
                for font_path in font_paths:
                    if os.path.exists(font_path):
                        font = ImageFont.truetype(font_path, font_size)
                        break
                
                if not font:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç PIL
                    font = ImageFont.load_default()
                    
            except Exception:
                font = ImageFont.load_default()
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
            bbox = draw.textbbox((0, 0), text, font=font)
            text_width = bbox[2] - bbox[0]
            text_height = bbox[3] - bbox[1]
            
            x = (size - text_width) // 2
            y = (size - text_height) // 2
            
            # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç
            draw.text((x, y), text, fill=color_scheme['text'], font=font)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            if output_path.endswith('.png'):
                img.save(output_path, 'PNG')
            else:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JPG
                rgb_img = Image.new('RGB', img.size, (255, 255, 255))
                rgb_img.paste(img)
                rgb_img.save(output_path, 'JPEG', quality=95)
            
            return True
            
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏: {e}")
            return False
    
    def generate_emoji_favicon(self, theme, output_path="", size=512):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∞–≤–∏–∫–æ–Ω–∫—É –∏–∑ —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º–∞—Ç–∏–∫–∏
        
        Args:
            theme (str): –¢–µ–º–∞—Ç–∏–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —ç–º–æ–¥–∑–∏
            output_path (str): –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            size (int): –†–∞–∑–º–µ—Ä —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        """
        try:
            if not self.silent_mode:
                print(f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ñ–∞–≤–∏–∫–æ–Ω–∫—É-—ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–µ–º–∞—Ç–∏–∫–∏: {theme}")
            
            # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º–∞—Ç–∏–∫ - –ú–ê–ö–°–ò–ú–£–ú –ò–ö–û–ù–û–ö!
            theme_emojis = {
                # –ê–≤—Ç–æ
                '–∞–≤—Ç–æ–º–æ–π–∫–∞': 'üöó', '–∞–≤—Ç–æ': 'üöó', '–º–∞—à–∏–Ω': 'üöó', '—Å—Ç–æ': 'üîß',
                '—à–∏–Ω–æ–º–æ–Ω—Ç': 'üõû', '–∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å': 'üöó', '–∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç': 'üîß',
                
                # –ï–¥–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∏
                '—Ä–µ—Å—Ç–æ—Ä–∞–Ω': 'üçΩÔ∏è', '–∫–∞—Ñ–µ': '‚òï', '–µ–¥–∞': 'üçï', '–¥–æ—Å—Ç–∞–≤–∫': 'üõµ',
                '–ø–∏—Ü—Ü': 'üçï', '—Å—É—à–∏': 'üç£', '–±—É—Ä–≥–µ—Ä': 'üçî', '–±–∞—Ä': 'üç∫',
                '–ø–µ–∫–∞—Ä–Ω': 'üçû', '–∫–æ–Ω–¥–∏—Ç–µ—Ä': 'üç∞', '–º–æ—Ä–æ–∂–µ–Ω–æ–µ': 'üç¶',
                
                # –ú–µ–¥–∏—Ü–∏–Ω–∞
                '–º–µ–¥–∏—Ü–∏–Ω': '‚öïÔ∏è', '–∑–¥–æ—Ä–æ–≤—å': 'üíä', '–∫–ª–∏–Ω–∏–∫': 'üè•', '–≤—Ä–∞—á': 'üë®‚Äç‚öïÔ∏è',
                '—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥': 'ü¶∑', '–∞–ø—Ç–µ–∫': 'üíä', '–≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä': 'üêï‚Äçü¶∫',
                '–º–∞—Å—Å–∞–∂': 'üíÜ', '–ª–µ—á–µ–±–Ω': 'üè•', '–æ–ø—Ç–∏–∫': 'üëì',
                
                # –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
                '–æ–±—Ä–∞–∑–æ–≤–∞–Ω': 'üìö', '—à–∫–æ–ª': 'üéì', '–∫—É—Ä—Å': 'üìñ', '—É–Ω–∏–≤–µ—Ä': 'üéì',
                '–¥–µ—Ç—Å–∞–¥': 'üë∂', '—É—á–µ–±–Ω': 'üìù', '—Ä–µ–ø–µ—Ç–∏—Ç': 'üìö',
                
                # –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å
                '–Ω–µ–¥–≤–∏–∂–∏–º': 'üè†', '–¥–æ–º': 'üè°', '–∫–≤–∞—Ä—Ç–∏—Ä': 'üè¢', '—Ä–∏–µ–ª—Ç–æ—Ä': 'üè†',
                '—Å—Ç—Ä–æ–π': 'üèóÔ∏è', '–∏–ø–æ—Ç–µ–∫': 'üè¶', '–∞—Ä–µ–Ω–¥': 'üè†',
                
                # –ö—Ä–∞—Å–æ—Ç–∞
                '–∫—Ä–∞—Å–æ—Ç': 'üíÑ', '—Å–∞–ª–æ–Ω': '‚úÇÔ∏è', '—Å—Ç—Ä–∏–∂': 'üíá', '–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä': 'üíá‚Äç‚ôÄÔ∏è',
                '–º–∞–Ω–∏–∫—é—Ä': 'üíÖ', '–∫–æ—Å–º–µ—Ç–æ–ª–æ–≥': 'üíÑ', '–º–∞—Å—Å–∞–∂': 'üíÜ',
                '–±—Ä–æ–≤–∏': 'üëÅÔ∏è', '—Ç–∞—Ç—É–∞–∂': 'üíÑ', '—ç–ø–∏–ª—è—Ü–∏': '‚ú®',
                
                # –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ
                '—Å—Ç—Ä–æ–∏—Ç–µ–ª': 'üî®', '—Ä–µ–º–æ–Ω—Ç': 'üîß', '–¥–∏–∑–∞–π–Ω': 'üé®', '–ø–ª–∏—Ç–∫': 'üî®',
                '—Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫': 'üîß', '—ç–ª–µ–∫—Ç—Ä–∏–∫': '‚ö°', '–æ—Ç–¥–µ–ª–∫': 'üé®',
                '–∫—Ä–æ–≤–ª': 'üè†', '—Ñ—É–Ω–¥–∞–º–µ–Ω—Ç': 'üèóÔ∏è', '–æ–∫–Ω–∞': 'ü™ü',
                
                # –°–ø–æ—Ä—Ç –∏ —Ñ–∏—Ç–Ω–µ—Å
                '—Å–ø–æ—Ä—Ç': '‚öΩ', '—Ñ–∏—Ç–Ω–µ—Å': 'üí™', '–π–æ–≥': 'üßò', '—Ç—Ä–µ–Ω–∞–∂–µ—Ä': 'üèãÔ∏è',
                '–±–∞—Å—Å–µ–π–Ω': 'üèä', '—Ç–µ–Ω–Ω–∏—Å': 'üéæ', '—Ñ—É—Ç–±–æ–ª': '‚öΩ', '—Ç–∞–Ω—Ü': 'üíÉ',
                '–µ–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤': 'ü•ä', '–≥–∏–º–Ω–∞—Å—Ç–∏–∫': 'ü§∏',
                
                # –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
                '—Ç–µ—Ö–Ω–æ–ª–æ–≥': 'üíª', 'it': '‚å®Ô∏è', '–ø—Ä–æ–≥—Ä–∞–º': 'üíæ', '–∫–æ–º–ø—å—é—Ç–µ—Ä': 'üíª',
                '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç': 'üåê', '—Å–∞–π—Ç': 'üíª', '–º–æ–±–∏–ª—å–Ω': 'üì±',
                '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫': 'üë®‚Äçüíª', '–¥–∏–∑–∞–π–Ω': 'üé®', '—Ä–µ–∫–ª–∞–º': 'üì¢',
                
                # –Æ—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è
                '—é—Ä–∏—Å—Ç': '‚öñÔ∏è', '–∞–¥–≤–æ–∫–∞—Ç': 'üìã', '–Ω–æ—Ç–∞—Ä–∏—É—Å': 'üìú', '–ø—Ä–∞–≤–æ': '‚öñÔ∏è',
                '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏': 'üìã', '–¥–æ–∫—É–º–µ–Ω—Ç': 'üìÑ', '—Å—É–¥': 'üèõÔ∏è',
                
                # –§–∏–Ω–∞–Ω—Å—ã
                '—Ñ–∏–Ω–∞–Ω—Å': 'üí∞', '–±–∞–Ω–∫': 'üè¶', '—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω': 'üõ°Ô∏è', '–∫—Ä–µ–¥–∏—Ç': 'üí≥',
                '–±—É—Ö–≥–∞–ª—Ç–µ—Ä': 'üìä', '–Ω–∞–ª–æ–≥': 'üí∞', '–∏–Ω–≤–µ—Å—Ç–∏—Ü': 'üìà',
                
                # –¢—É—Ä–∏–∑–º
                '—Ç—É—Ä–∏–∑–º': '‚úàÔ∏è', '–æ—Ç–µ–ª—å': 'üè®', '–ø—É—Ç–µ—à–µ—Å—Ç–≤': 'üó∫Ô∏è', '—ç–∫—Å–∫—É—Ä—Å–∏': 'üìç',
                '–≤–∏–∑–∞': 'üìã', '–±–∏–ª–µ—Ç': 'üé´', '–≥–∏–¥': 'üó∫Ô∏è',
                
                # –î–æ–º–∞—à–Ω–∏–µ —É—Å–ª—É–≥–∏
                '—É–±–æ—Ä–∫': 'üßπ', '–∫–ª–∏–Ω–∏–Ω–≥': 'üßΩ', '—Ö–∏–º—á–∏—Å—Ç–∫': 'üëî', '–ø—Ä–∞—á–µ—á–Ω': 'üëï',
                '–¥–æ–º—Ä–∞–±–æ—Ç–Ω–∏—Ü': 'üè†', '–≥–ª–∞–∂–∫': 'üëî', '–º–æ–π–∫': 'üßΩ',
                
                # –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
                '—Ç–∞–∫—Å–∏': 'üöï', '–ø–µ—Ä–µ–≤–æ–∑–∫': 'üöõ', '–≥—Ä—É–∑–æ–≤–∏–∫': 'üöõ', '–∞–≤—Ç–æ–±—É—Å': 'üöå',
                '–º–æ—Ç–æ—Ü–∏–∫–ª': 'üèçÔ∏è', '–≤–µ–ª–æ—Å–∏–ø–µ–¥': 'üö¥', '—Å–∞–º–æ–∫–∞—Ç': 'üõ¥',
                
                # –ü—Ä–∏—Ä–æ–¥–∞ –∏ —Ä–∞—Å—Ç–µ–Ω–∏—è
                '—Ü–≤–µ—Ç': 'üå∏', '—Å–∞–¥': 'üå≥', '—Ä–∞—Å—Ç–µ–Ω': 'üåø', '–ª–∞–Ω–¥—à–∞—Ñ—Ç': 'üå≤',
                '—Å–µ–º–µ–Ω': 'üå±', '—É–¥–æ–±—Ä–µ–Ω–∏': 'üåø', '–≥–∞–∑–æ–Ω': 'üå±',
                
                # –ñ–∏–≤–æ—Ç–Ω—ã–µ
                '–≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä': 'üêï‚Äçü¶∫', '–∑–æ–æ–º–∞–≥–∞–∑–∏–Ω': 'üêï', '–¥—Ä–µ—Å—Å–∏—Ä–æ–≤–∫': 'üêï',
                '–≥—Ä—É–º–∏–Ω–≥': 'üê©', '–ø—Ç–∏—Ü': 'üê¶', '—Ä—ã–±': 'üêü',
                
                # –ú–µ–±–µ–ª—å –∏ –∏–Ω—Ç–µ—Ä—å–µ—Ä
                '–º–µ–±–µ–ª—å': 'ü™ë', '–¥–∏–≤–∞–Ω': 'üõãÔ∏è', '–∫—Ä–æ–≤–∞—Ç—å': 'üõèÔ∏è', '–∫—É—Ö–Ω': 'üçΩÔ∏è',
                '—à–∫–∞—Ñ': 'üö™', '—Å—Ç–æ–ª': 'ü™ë', '–∏–Ω—Ç–µ—Ä—å–µ—Ä': 'üè†',
                
                # –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
                '–∫–∏–Ω–æ': 'üé¨', '—Ç–µ–∞—Ç—Ä': 'üé≠', '–º—É–∑—ã': 'üéµ', '–∫–æ–Ω—Ü–µ—Ä—Ç': 'üé§',
                '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ': 'üì∏', '–≤–∏–¥–µ–æ': 'üìπ', '–∏–≥—Ä': 'üéÆ',
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
                '–æ—Ö—Ä–∞–Ω': 'üõ°Ô∏è', '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç': 'üîí', '—Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏': 'üö®',
                '–∫–∞–º–µ—Ä': 'üìπ', '–∑–∞–º–∫': 'üîê', '–∫–ª—é—á': 'üîë'
            }
            
            # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —ç–º–æ–¥–∑–∏
            emoji = '‚≠ê'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            theme_lower = theme.lower()
            
            for key, value in theme_emojis.items():
                if key in theme_lower:
                    emoji = value
                    break
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–≤–∏–∫–æ–Ω–∫—É —Å —ç–º–æ–¥–∑–∏
            return self._create_emoji_favicon(emoji, output_path, size)
            
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–æ–¥–∑–∏-—Ñ–∞–≤–∏–∫–æ–Ω–∫–∏: {e}")
            return False
    
    def _create_emoji_favicon(self, emoji, output_path, size):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–≤–∏–∫–æ–Ω–∫—É —Å —ç–º–æ–¥–∑–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º
            img = Image.new('RGBA', (size, size), (255, 255, 255, 0))
            draw = ImageDraw.Draw(img)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —ç–º–æ–¥–∑–∏
            font_size = int(size * 0.8)  # 80% –æ—Ç —Ä–∞–∑–º–µ—Ä–∞
            
            try:
                # –î–ª—è Windows - –∏—Å–ø–æ–ª—å–∑—É–µ–º Segoe UI Emoji
                emoji_fonts = [
                    "C:/Windows/Fonts/seguiemj.ttf",  # Windows 10+
                    "C:/Windows/Fonts/segoe-ui-emoji.ttf",
                    "/System/Library/Fonts/Apple Color Emoji.ttc",  # macOS
                ]
                
                font = None
                for font_path in emoji_fonts:
                    if os.path.exists(font_path):
                        try:
                            font = ImageFont.truetype(font_path, font_size)
                            break
                        except:
                            continue
                
                if not font:
                    font = ImageFont.load_default()
                    
            except Exception:
                font = ImageFont.load_default()
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
            bbox = draw.textbbox((0, 0), emoji, font=font)
            text_width = bbox[2] - bbox[0]
            text_height = bbox[3] - bbox[1]
            
            x = (size - text_width) // 2
            y = (size - text_height) // 2
            
            # –†–∏—Å—É–µ–º —ç–º–æ–¥–∑–∏
            draw.text((x, y), emoji, fill='black', font=font)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            if output_path.endswith('.png'):
                img.save(output_path, 'PNG')
            else:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JPG —Å –±–µ–ª—ã–º —Ñ–æ–Ω–æ–º
                rgb_img = Image.new('RGB', img.size, (255, 255, 255))
                rgb_img.paste(img, img)
                rgb_img.save(output_path, 'JPEG', quality=95)
            
            return True
            
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–æ–¥–∑–∏-—Ñ–∞–≤–∏–∫–æ–Ω–∫–∏: {e}")
            return False
    
    def generate_favicon_from_theme(self, theme, output_path="", size=512):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏ –ø–æ —Ç–µ–º–∞—Ç–∏–∫–µ
        
        Args:
            theme (str): –¢–µ–º–∞—Ç–∏–∫–∞ –±–∏–∑–Ω–µ—Å–∞
            output_path (str): –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            size (int): –†–∞–∑–º–µ—Ä —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        """
        try:
            if not self.silent_mode:
                print(f"üöÄ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ñ–∞–≤–∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–µ–º–∞—Ç–∏–∫–∏: {theme}")
            
            # –ù–û–í–´–ô –ü–û–î–•–û–î: –ò—Å–ø–æ–ª—å–∑—É–µ–º DiceBear API
            try:
                from .dicebear_favicon import DiceBearFavicon
                dicebear_gen = DiceBearFavicon(silent_mode=self.silent_mode)
                result = dicebear_gen.generate_favicon(theme, output_path, size)
                
                if result:
                    if not self.silent_mode:
                        print(f"‚úÖ –§–∞–≤–∏–∫–æ–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –º–µ—Ç–æ–¥–æ–º: dicebear")
                    return True
            except Exception as e:
                if not self.silent_mode:
                    print(f"‚ö†Ô∏è DiceBear –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
            
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã
            methods = [
                ('emoji', self.generate_emoji_favicon),
                ('text', self.generate_text_favicon)
            ]
            
            for method_name, method_func in methods:
                try:
                    if method_name == 'text':
                        result = method_func(theme, theme, output_path, size)
                    else:
                        result = method_func(theme, output_path, size)
                    
                    if result:
                        if not self.silent_mode:
                            print(f"‚úÖ –§–∞–≤–∏–∫–æ–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –º–µ—Ç–æ–¥–æ–º: {method_name}")
                        return True
                        
                except Exception as e:
                    if not self.silent_mode:
                        print(f"‚ö†Ô∏è –ú–µ—Ç–æ–¥ {method_name} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
                    continue
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
            if not self.silent_mode:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–≤–∏–∫–æ–Ω–∫—É –Ω–∏ –æ–¥–Ω–∏–º –º–µ—Ç–æ–¥–æ–º")
            return False
            
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏: {e}")
            return False 