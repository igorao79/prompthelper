"""
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Ideogram API (3.0 Turbo)

- 8 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: –≤—ã–ø–æ–ª–Ω—è–µ—Ç 2 –∑–∞–ø—Ä–æ—Å–∞ –ø–æ 4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
- –ü—Ä–æ–º–ø—Ç –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ë–ï–ó –∫–∞–∫–∏—Ö-–ª–∏–±–æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π (—Ç–æ, —á—Ç–æ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ —Å–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: JPG (–æ—Å–Ω–æ–≤–Ω—ã–µ), PNG (favicon)
"""

import os
import time
from io import BytesIO
from pathlib import Path
from typing import Callable, List, Optional, Tuple

import requests
from PIL import Image


class IdeogramGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –±–∞–∑–µ Ideogram 2.0 Turbo."""

    def __init__(self, api_key: Optional[str] = None, silent_mode: bool = False, model: Optional[str] = None, magic_prompt_option: Optional[str] = None):
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —è–≤–Ω—ã–π –∫–ª—é—á -> ENV; –µ—Å–ª–∏ –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.api_key = api_key or os.getenv("IDEOGRAM_API_KEY") or ""
        self.api_url = "https://api.ideogram.ai/v1/ideogram-v3/generate"
        self.headers = {"Api-Key": self.api_key} if self.api_key else {}
        self.silent_mode = silent_mode
        # –ú–æ–¥–µ–ª—å: v3 API –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 3.0 Turbo
        self.model = (model or os.getenv("IDEOGRAM_MODEL") or "3.0 Turbo").strip()
        # Magic Prompt: OFF | AUTO | ON (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é OFF)
        # Magic Prompt ‚Äî –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ–≥–¥–∞ ON, –µ—Å–ª–∏ —è–≤–Ω–æ –Ω–µ –∑–∞–¥–∞–Ω–æ –∏–Ω–æ–µ
        mpo = (magic_prompt_option or os.getenv("IDEOGRAM_MAGIC_PROMPT_OPTION") or "ON").strip().upper()
        self.magic_prompt_option = mpo if mpo in ("OFF", "AUTO", "ON") else "ON"
        # –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 4 (2 –∑–∞–ø—Ä–æ—Å–∞ x 4 = 8), –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        try:
            self.num_images_per_request = max(1, int(os.getenv("IDEOGRAM_NUM_IMAGES_PER_REQUEST", "4")))
        except Exception:
            self.num_images_per_request = 4
        # –û—Ç–ª–∞–¥–∫–∞ –±–∏–ª–ª–∏–Ω–≥–∞/–∑–∞–ø—Ä–æ—Å–æ–≤
        self.debug_billing = str(os.getenv("IDEOGRAM_DEBUG_BILLING", "0")).lower() in ("1", "true", "yes")

    def generate_eight_images(
        self,
        prompt: str,
        media_dir: str,
        progress_callback: Optional[Callable[[str], None]] = None,
    ) -> int:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 8 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–¥–Ω–∏–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–º (2 –±–∞—Ç—á–∞ –ø–æ 4) –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞.

        Returns:
            int: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        """
        output_path = Path(media_dir)
        output_path.mkdir(parents=True, exist_ok=True)

        # –û–∂–∏–¥–∞–µ–º—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ (–ø–æ –ø–æ—Ä—è–¥–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
        image_names = [
            "main", "about1", "about2", "about3",
            "gallery1", "gallery2", "gallery3", "favicon",
        ]

        saved = 0
        cursor = 0

        # –°—Ç—Ä–æ–≥–æ –¥–≤–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ 4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for batch_index in range(2):
            self._notify(progress_callback, f"üé® Ideogram: –ø–∞—Ä—Ç–∏—è {batch_index + 1}/2 (4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)")
            urls = self._request_image_urls(prompt, num_images=4)
            if not urls:
                self._notify(progress_callback, "‚ö†Ô∏è Ideogram: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                continue

            for i, url in enumerate(urls):
                if cursor >= len(image_names):
                    break
                name = image_names[cursor]
                try:
                    img = self._download_image(url)
                    if img is None:
                        self._notify(progress_callback, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {name}")
                        cursor += 1
                        continue

                    if name == "favicon":
                        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ 512x512 –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º PNG
                        if img.mode != "RGBA":
                            img = img.convert("RGBA")
                        img = img.resize((512, 512), Image.Resampling.LANCZOS)
                        out_file = output_path / f"{name}.png"
                        self._save_png(img, str(out_file))
                        saved += 1
                        self._notify(progress_callback, f"‚úÖ {name}: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (PNG)")
                    else:
                        out_file = output_path / f"{name}.jpg"
                        # –°–∂–∏–º–∞–µ–º –¥–æ ~150 –ö–ë
                        if self._save_jpeg_under_size(img, str(out_file), target_size_kb=150):
                            saved += 1
                            self._notify(progress_callback, f"‚úÖ {name}: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (JPEG)")
                        else:
                            self._notify(progress_callback, f"‚ö†Ô∏è {name}: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∂–∞—Ç—å/—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å")
                except Exception as e:
                    self._notify(progress_callback, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {name}: {e}")
                finally:
                    cursor += 1

        return saved

    def generate_four_images(
        self,
        prompt: str,
        media_dir: str,
        progress_callback: Optional[Callable[[str], None]] = None,
    ) -> int:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º (–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏, –µ—Å–ª–∏ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω IDEOGRAM_NUM_IMAGES_PER_REQUEST).
        –ò–º–µ–Ω–∞: main, about1, about2, about3. –ü—Ä–æ–º–ø—Ç –Ω–µ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ no-text –æ–≥–æ–≤–æ—Ä–∫–∞.
        """
        output_path = Path(media_dir)
        output_path.mkdir(parents=True, exist_ok=True)

        image_names = ["main", "about1", "about2", "about3"]
        saved = 0
        cursor = 0

        total_needed = 4
        batches = []
        remaining = total_needed
        while remaining > 0:
            take = min(self.num_images_per_request, remaining)
            batches.append(take)
            remaining -= take

        for batch_index, batch_size in enumerate(batches):
            self._notify(progress_callback, f"üé® Ideogram: –ø–∞—Ä—Ç–∏—è {batch_index + 1}/{len(batches)} ({batch_size} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)")
            urls = self._request_image_urls(prompt, num_images=batch_size)
            if not urls:
                self._notify(progress_callback, "‚ö†Ô∏è Ideogram: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                continue

            for url in urls:
                if cursor >= len(image_names):
                    break
                name = image_names[cursor]
                try:
                    img = self._download_image(url)
                    if img is None:
                        self._notify(progress_callback, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {name}")
                        cursor += 1
                        continue
                    out_file = output_path / f"{name}.jpg"
                    if self._save_jpeg_under_size(img, str(out_file), target_size_kb=150):
                        saved += 1
                        self._notify(progress_callback, f"‚úÖ {name}: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (JPEG)")
                    else:
                        self._notify(progress_callback, f"‚ö†Ô∏è {name}: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∂–∞—Ç—å/—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å")
                except Exception as e:
                    self._notify(progress_callback, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {name}: {e}")
                finally:
                    cursor += 1

        return saved

    def generate_single_image(
        self,
        prompt: str,
        image_name: str,
        media_dir: str,
        progress_callback: Optional[Callable[[str], None]] = None,
    ) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (num_images=1) –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞."""
        output_path = Path(media_dir)
        output_path.mkdir(parents=True, exist_ok=True)

        self._notify(progress_callback, f"üé® Ideogram: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è {image_name}")
        urls = self._request_image_urls(prompt, num_images=1)
        if not urls:
            self._notify(progress_callback, "‚ö†Ô∏è Ideogram: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return None

        try:
            img = self._download_image(urls[0])
            if img is None:
                return None
            if image_name == "favicon":
                if img.mode != "RGBA":
                    img = img.convert("RGBA")
                img = img.resize((512, 512), Image.Resampling.LANCZOS)
                out_file = output_path / f"{image_name}.png"
                self._save_png(img, str(out_file))
                self._notify(progress_callback, f"‚úÖ {image_name}: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (PNG)")
                return str(out_file)
            else:
                out_file = output_path / f"{image_name}.jpg"
                if self._save_jpeg_under_size(img, str(out_file), target_size_kb=150):
                    self._notify(progress_callback, f"‚úÖ {image_name}: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (JPEG)")
                    return str(out_file)
                return None
        except Exception:
            return None

    def _request_image_urls(self, prompt: str, num_images: int) -> List[str]:
        # –ï—Å–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ (—Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–± –æ—Ç–∫–ª—é—á—ë–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏)
        if not self.api_key:
            if not self.silent_mode:
                print("‚ö†Ô∏è Ideogram API –∫–ª—é—á –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            return []
        safe_prompt = self._augment_prompt_no_text(prompt)
        
        # v3 API —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (–±–µ–∑ model –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ - –≤—Å–µ–≥–¥–∞ 3.0 Turbo)
        payload = {
            "prompt": safe_prompt,
            "rendering_speed": "TURBO",
            "num_images": max(1, int(num_images)),
        }
        # –ü–∞—Ä–∞–º–µ—Ç—Ä —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
        try:
            if self.magic_prompt_option in ("OFF", "AUTO", "ON"):
                payload["magic_prompt_option"] = self.magic_prompt_option
        except Exception:
            pass
        try:
            if self.debug_billing and not self.silent_mode:
                print(f"[Ideogram] v3 API payload: {{'rendering_speed': 'TURBO', 'num_images': {payload['num_images']}}}")
            resp = requests.post(self.api_url, headers=self.headers, json=payload, timeout=60)
            if resp.status_code != 200:
                if self.debug_billing and not self.silent_mode:
                    try:
                        print(f"[Ideogram] HTTP {resp.status_code}. Body: {resp.text[:500]}")
                    except Exception:
                        pass
                return []
            data = resp.json() or {}
            if self.debug_billing and not self.silent_mode:
                try:
                    # –í—ã–≤–µ–¥–µ–º –∫–ª—é—á–µ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏/–ø–æ–ª—è –¥–ª—è —Å–≤–µ—Ä–∫–∏ —Ç–∞—Ä–∏—Ñ–∞
                    interesting_headers = {k: v for k, v in resp.headers.items() if k.lower().startswith(('x-', 'rate', 'billing', 'cost'))}
                    print(f"[Ideogram] Response headers (partial): {interesting_headers}")
                    keys = list(data.keys())
                    print(f"[Ideogram] Response json keys: {keys}")
                except Exception:
                    pass
            items = data.get("data") or []
            urls = []
            for item in items:
                url = item.get("url") or item.get("image_url")
                if url:
                    urls.append(url)
            return urls
        except Exception:
            return []

    def _augment_prompt_no_text(self, prompt: str) -> str:
        try:
            p = (prompt or "").strip()
            lc = p.lower()
            markers = ["no text", "no words", "no letters", "text-free", "without text"]
            if any(m in lc for m in markers):
                return p
            # –î–æ–±–∞–≤–ª—è–µ–º –º—è–≥–∫—É—é –∞–Ω—Ç–∏-—Ç–µ–∫—Å—Ç–æ–≤—É—é –æ–≥–æ–≤–æ—Ä–∫—É, –Ω–µ –º–µ–Ω—è—è —Å–º—ã—Å–ª —Ç–µ–º–∞—Ç–∏–∫–∏
            suffix = ", no text, no words, no letters, no watermark, no caption, text-free"
            return (p + suffix)[:2000]
        except Exception:
            return prompt

    def _download_image(self, url: str) -> Optional[Image.Image]:
        try:
            r = requests.get(url, timeout=60)
            if r.status_code != 200:
                return None
            img = Image.open(BytesIO(r.content))
            # –ü—Ä–∏–≤–æ–¥–∏–º –∫ RGB –¥–ª—è JPEG-—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            if img.mode not in ("RGB", "RGBA"):
                img = img.convert("RGB")
            return img
        except Exception:
            return None

    def _save_jpeg_under_size(self, image: Image.Image, filepath: str, target_size_kb: int = 150) -> bool:
        try:
            img = image
            if img.mode == "RGBA":
                img = img.convert("RGB")
            # –ü–æ–¥–±–∏—Ä–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å —Ä–∞–∑–º–µ—Ä
            for q in [85, 75, 65, 55, 45]:
                img.save(filepath, format="JPEG", quality=q, optimize=True)
                size_kb = os.path.getsize(filepath) / 1024
                if size_kb <= target_size_kb:
                    return True
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É–ª–æ–∂–∏—Ç—å—Å—è, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            return True
        except Exception:
            return False

    def _save_png(self, image: Image.Image, filepath: str) -> bool:
        try:
            image.save(filepath, format="PNG", optimize=True)
            return True
        except Exception:
            return False

    def _notify(self, cb: Optional[Callable[[str], None]], message: str) -> None:
        if cb:
            try:
                cb(message)
            except Exception:
                pass
        if not self.silent_mode:
            print(message)


