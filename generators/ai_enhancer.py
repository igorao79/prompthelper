#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ò–ò-—É—Å–∏–ª–∏—Ç–µ–ª—å –ø—Ä–æ–º–ø—Ç–æ–≤ —á–µ—Ä–µ–∑ Hugging Face API
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–Ω–µ—à–Ω–∏–µ –ò–ò –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –≤—ã—Å–æ—á–∞–π—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
"""

import requests
import json
import time
import random
from typing import Dict, List, Optional

class AIEnhancer:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ –ò–ò –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤"""
    
    def __init__(self):
        # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏ Hugging Face –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
        self.models = [
            "microsoft/DialoGPT-medium",
            "gpt2-medium", 
            "facebook/blenderbot-400M-distill",
            "microsoft/DialoGPT-large",
            "EleutherAI/gpt-neo-1.3B"
        ]
        
        self.base_url = "https://api-inference.huggingface.co/models"
        
        # –ü—Ä–æ–º–ø—Ç—ã –¥–ª—è –ò–ò-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        self.enhancement_prompts = {
            'main': """Create a professional, detailed image prompt for a business theme: '{theme}'. 
The prompt should be visual, specific, and include: professional setting, modern equipment, expert team, high quality service. 
Make it vivid and appealing for image generation. Focus on business excellence and professionalism.
Prompt:""",
            
            'about': """Generate a business image prompt for '{theme}' showing: equipment, process, or facility. 
Include technical details, professional environment, quality standards. Make it specific and visual.
Prompt:""",
            
            'review': """Create an image prompt for a satisfied customer portrait. 
Focus on: happy person, genuine smile, professional headshot style, clean background. 
NO business equipment, just a person showing satisfaction.
Prompt:""",
            
            'favicon': """Generate a simple icon description for '{theme}' business. 
Focus on: minimalist symbol, business emblem, clean design, professional logo concept.
Prompt:"""
        }
    
    def enhance_prompts_with_ai(self, theme: str) -> Dict[str, str]:
        """
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–Ω–µ—à–Ω–∏–π –ò–ò –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
        
        Args:
            theme (str): –¢–µ–º–∞—Ç–∏–∫–∞ –±–∏–∑–Ω–µ—Å–∞
            
        Returns:
            Dict[str, str]: –°–ª–æ–≤–∞—Ä—å —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
        """
        enhanced_prompts = {}
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã —á–µ—Ä–µ–∑ –ò–ò
        try:
            enhanced_prompts['main'] = self._generate_enhanced_prompt(theme, 'main')
            enhanced_prompts['about1'] = self._generate_enhanced_prompt(theme, 'about')
            enhanced_prompts['about2'] = self._generate_enhanced_prompt(theme, 'about')
            enhanced_prompts['about3'] = self._generate_enhanced_prompt(theme, 'about')
            enhanced_prompts['review1'] = self._generate_enhanced_prompt(theme, 'review')
            enhanced_prompts['review2'] = self._generate_enhanced_prompt(theme, 'review')
            enhanced_prompts['review3'] = self._generate_enhanced_prompt(theme, 'review')
            enhanced_prompts['favicon'] = self._generate_enhanced_prompt(theme, 'favicon')
            
            print(f"‚úÖ –ò–ò-—É—Å–∏–ª–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª —Ç–µ–º–∞—Ç–∏–∫—É: {theme}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ò–ò-—É—Å–∏–ª–∏—Ç–µ–ª—è: {e}")
            # Fallback –Ω–∞ –Ω–∞—à –ò–ò-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
            return self._fallback_to_local_ai(theme)
        
        return enhanced_prompts
    
    def _generate_enhanced_prompt(self, theme: str, prompt_type: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π –ò–ò
        
        Args:
            theme (str): –¢–µ–º–∞—Ç–∏–∫–∞
            prompt_type (str): –¢–∏–ø –ø—Ä–æ–º–ø—Ç–∞ (main, about, review, favicon)
            
        Returns:
            str: –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        """
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        model = random.choice(self.models)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ò–ò
        ai_prompt = self.enhancement_prompts[prompt_type].format(theme=theme)
        
        headers = {
            "Content-Type": "application/json",
        }
        
        payload = {
            "inputs": ai_prompt,
            "parameters": {
                "max_length": 200,
                "temperature": 0.8,
                "do_sample": True,
                "top_p": 0.9
            }
        }
        
        try:
            response = requests.post(
                f"{self.base_url}/{model}",
                headers=headers,
                json=payload,
                timeout=10
            )
            
            if response.status_code == 200:
                result = response.json()
                
                if isinstance(result, list) and len(result) > 0:
                    generated_text = result[0].get('generated_text', '')
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å –ø–æ—Å–ª–µ "Prompt:"
                    if "Prompt:" in generated_text:
                        enhanced_prompt = generated_text.split("Prompt:")[-1].strip()
                        return self._clean_and_optimize_prompt(enhanced_prompt)
                
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            return self._generate_local_fallback(theme, prompt_type)
            
        except Exception as e:
            print(f"üîÑ –ò–ò –º–æ–¥–µ–ª—å {model} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–±—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é")
            return self._generate_local_fallback(theme, prompt_type)
    
    def _clean_and_optimize_prompt(self, prompt: str) -> str:
        """
        –û—á–∏—â–∞–µ—Ç –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        
        Args:
            prompt (str): –°—ã—Ä–æ–π –ø—Ä–æ–º–ø—Ç –æ—Ç –ò–ò
            
        Returns:
            str: –û—á–∏—â–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        """
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        cleaned = prompt.replace('\n', ' ').replace('\r', ' ')
        cleaned = ' '.join(cleaned.split())  # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
        
        # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        cleaned = cleaned.strip('\'".,!?;:')
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        words = cleaned.split()
        if len(words) > 25:
            cleaned = ' '.join(words[:25])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã
        quality_terms = [
            "professional", "high-quality", "modern", "expert", 
            "premium", "excellent", "sophisticated", "advanced"
        ]
        
        if not any(term in cleaned.lower() for term in quality_terms):
            enhanced_term = random.choice(quality_terms)
            cleaned = f"{enhanced_term} {cleaned}"
        
        return cleaned
    
    def _generate_local_fallback(self, theme: str, prompt_type: str) -> str:
        """
        –õ–æ–∫–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–∫ fallback
        
        Args:
            theme (str): –¢–µ–º–∞—Ç–∏–∫–∞
            prompt_type (str): –¢–∏–ø –ø—Ä–æ–º–ø—Ç–∞
            
        Returns:
            str: –õ–æ–∫–∞–ª—å–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        """
        fallback_templates = {
            'main': f"professional {theme} business environment with expert team and modern equipment",
            'about': f"high-quality {theme} service process with professional standards and equipment",
            'review': "portrait photo of satisfied customer, genuine smile, professional headshot style",
            'favicon': f"{theme} business icon, minimalist symbol, professional logo design"
        }
        
        return fallback_templates.get(prompt_type, f"professional {theme} service")
    
    def _fallback_to_local_ai(self, theme: str) -> Dict[str, str]:
        """
        Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –ò–ò-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏ —Å–±–æ–µ –≤–Ω–µ—à–Ω–µ–≥–æ –ò–ò
        
        Args:
            theme (str): –¢–µ–º–∞—Ç–∏–∫–∞
            
        Returns:
            Dict[str, str]: –ü—Ä–æ–º–ø—Ç—ã –æ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ò–ò
        """
        try:
            from .ai_prompt_generator import create_ai_prompts
            print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –ò–ò-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä")
            return create_ai_prompts(theme)
        except ImportError:
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–º–ø—Ç—ã
            return {
                'main': f"professional {theme} business service",
                'about1': f"modern {theme} equipment and workspace",
                'about2': f"expert {theme} service process",  
                'about3': f"quality {theme} facility standards",
                'review1': "portrait photo of happy customer, genuine smile",
                'review2': "satisfied client headshot, positive expression",
                'review3': "pleased customer portrait, professional background",
                'favicon': f"{theme} business icon, simple logo design"
            }

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
def create_ai_enhanced_prompts(theme: str) -> Dict[str, str]:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç—ã —Å –ø–æ–º–æ—â—å—é –≤–Ω–µ—à–Ω–µ–≥–æ –ò–ò-—É—Å–∏–ª–∏—Ç–µ–ª—è
    
    Args:
        theme (str): –¢–µ–º–∞—Ç–∏–∫–∞ –±–∏–∑–Ω–µ—Å–∞
        
    Returns:
        Dict[str, str]: –°–ª–æ–≤–∞—Ä—å —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
    """
    enhancer = AIEnhancer()
    return enhancer.enhance_prompts_with_ai(theme)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ò–ò
def test_ai_availability() -> bool:
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–Ω–µ—à–Ω–∏—Ö –ò–ò —Å–µ—Ä–≤–∏—Å–æ–≤
    
    Returns:
        bool: True –µ—Å–ª–∏ –ò–ò –¥–æ—Å—Ç—É–ø–µ–Ω
    """
    enhancer = AIEnhancer()
    try:
        test_prompt = enhancer._generate_enhanced_prompt("test business", "main")
        return len(test_prompt) > 10
    except:
        return False 