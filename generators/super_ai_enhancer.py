#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–£–ü–ï–† –ò–ò-–£–°–ò–õ–ò–¢–ï–õ–¨ –ü–†–û–ú–ü–¢–û–í 
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ò–ò –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –í–´–°–û–ß–ê–ô–®–ï–ì–û –∫–∞—á–µ—Å—Ç–≤–∞
"""

import requests
import json
import time
import random
from typing import Dict, List, Optional

class SuperAIEnhancer:
    """–°—É–ø–µ—Ä –ò–ò-—É—Å–∏–ª–∏—Ç–µ–ª—å —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏"""
    
    def __init__(self):
        # –ù–µ—Å–∫–æ–ª—å–∫–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ò–ò –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏
        self.ai_sources = {
            'huggingface': {
                'url': 'https://api-inference.huggingface.co/models',
                'models': [
                    'microsoft/DialoGPT-medium',
                    'facebook/blenderbot-400M-distill',
                    'EleutherAI/gpt-neo-1.3B'
                ]
            },
            'together': {
                'url': 'https://api.together.xyz/inference',
                'models': ['togethercomputer/RedPajama-INCITE-Chat-3B-v1']
            },
            'replicate': {
                'url': 'https://api.replicate.com/v1/predictions',
                'models': ['meta/llama-2-7b-chat']
            }
        }
        
        # –£–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        self.enhancement_templates = {
            'main': """Transform this business theme: '{theme}' into a professional, visually stunning image description.

Focus on: modern professional setting, expert team, cutting-edge equipment, premium service quality, sophisticated atmosphere.

Create a detailed, vivid description that would produce an amazing business image. Be specific about professional elements, lighting, and quality indicators.

Enhanced prompt:""",
            
            'about': """Create a compelling business image description for '{theme}' equipment/process/facility.

Include: state-of-the-art technology, professional workflow, quality standards, expert craftsmanship, modern facility design.

Make it visual, specific, and impressive for professional business imagery.

Description:""",
            
            'review': """Generate a perfect customer testimonial portrait description.

Focus ONLY on: genuinely happy person, authentic smile, professional headshot quality, clean simple background, satisfied expression, positive energy.

NO business equipment or workspace - just a person radiating satisfaction and trust.

Portrait description:""",
            
            'favicon': """Design description for a modern business icon representing '{theme}'.

Create: minimalist professional symbol, clean geometric design, business emblem concept, scalable logo idea, contemporary branding element.

Avoid circles and clich√©s. Focus on sophisticated, memorable business symbolism.

Icon concept:"""
        }
        
        # –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
        self.quality_enhancers = {
            'professional': ['expert', 'premium', 'sophisticated', 'elite', 'world-class'],
            'modern': ['cutting-edge', 'state-of-the-art', 'contemporary', 'advanced', 'innovative'],
            'quality': ['exceptional', 'superior', 'outstanding', 'excellent', 'top-tier'],
            'visual': ['stunning', 'impressive', 'remarkable', 'striking', 'captivating']
        }
    
    def create_super_enhanced_prompts(self, theme: str) -> Dict[str, str]:
        """
        –°–æ–∑–¥–∞—ë—Ç —Å—É–ø–µ—Ä-—É–ª—É—á—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã —á–µ—Ä–µ–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ò–ò –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        
        Args:
            theme (str): –¢–µ–º–∞—Ç–∏–∫–∞ –±–∏–∑–Ω–µ—Å–∞
            
        Returns:
            Dict[str, str]: –°–ª–æ–≤–∞—Ä—å —Å—É–ø–µ—Ä-–ø—Ä–æ–º–ø—Ç–æ–≤ –≤—ã—Å–æ—á–∞–π—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        """
        print(f"üöÄ –°–£–ü–ï–† –ò–ò-–£–°–ò–õ–ò–¢–ï–õ–¨ –∑–∞–ø—É—â–µ–Ω –¥–ª—è: {theme}")
        
        enhanced_prompts = {}
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –ª—É—á—à–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ò–ò
        for prompt_type in ['main', 'about', 'review', 'favicon']:
            try:
                if prompt_type == 'main':
                    enhanced_prompts['main'] = self._generate_super_prompt(theme, prompt_type)
                elif prompt_type == 'about':
                    enhanced_prompts['about1'] = self._generate_super_prompt(theme, prompt_type)
                    enhanced_prompts['about2'] = self._generate_super_prompt(theme, prompt_type)  
                    enhanced_prompts['about3'] = self._generate_super_prompt(theme, prompt_type)
                elif prompt_type == 'review':
                    enhanced_prompts['review1'] = self._generate_super_prompt(theme, prompt_type)
                    enhanced_prompts['review2'] = self._generate_super_prompt(theme, prompt_type)
                    enhanced_prompts['review3'] = self._generate_super_prompt(theme, prompt_type)
                elif prompt_type == 'favicon':
                    enhanced_prompts['favicon'] = self._generate_super_prompt(theme, prompt_type)
                    
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {prompt_type}: {e}")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π fallback
                enhanced_prompts.update(self._create_advanced_fallback(theme, prompt_type))
        
        # –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        enhanced_prompts = self._post_process_prompts(enhanced_prompts, theme)
        
        print(f"‚úÖ –°–£–ü–ï–† –ò–ò-–£–°–ò–õ–ò–¢–ï–õ–¨ –∑–∞–≤–µ—Ä—à–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É!")
        return enhanced_prompts
    
    def _generate_super_prompt(self, theme: str, prompt_type: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—É–ø–µ—Ä-–ø—Ä–æ–º–ø—Ç —á–µ—Ä–µ–∑ –ª—É—á—à–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ò–ò
        
        Args:
            theme (str): –¢–µ–º–∞—Ç–∏–∫–∞
            prompt_type (str): –¢–∏–ø –ø—Ä–æ–º–ø—Ç–∞
            
        Returns:
            str: –°—É–ø–µ—Ä-—É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        """
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ò–ò –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        for source_name, source_config in self.ai_sources.items():
            try:
                result = self._try_ai_source(theme, prompt_type, source_name, source_config)
                if result and len(result) > 20:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
                    return self._enhance_with_quality_terms(result, theme)
            except Exception as e:
                print(f"üîÑ {source_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π...")
                continue
        
        # –ï—Å–ª–∏ –≤—Å–µ –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        return self._create_premium_fallback(theme, prompt_type)
    
    def _try_ai_source(self, theme: str, prompt_type: str, source_name: str, source_config: Dict) -> str:
        """
        –ü—Ä–æ–±—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ò–ò –∏—Å—Ç–æ—á–Ω–∏–∫
        
        Args:
            theme (str): –¢–µ–º–∞—Ç–∏–∫–∞
            prompt_type (str): –¢–∏–ø –ø—Ä–æ–º–ø—Ç–∞  
            source_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            source_config (Dict): –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            
        Returns:
            str: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –ò–ò
        """
        if source_name == 'huggingface':
            return self._query_huggingface(theme, prompt_type, source_config)
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        else:
            return self._create_premium_fallback(theme, prompt_type)
    
    def _query_huggingface(self, theme: str, prompt_type: str, config: Dict) -> str:
        """
        –ó–∞–ø—Ä–æ—Å –∫ Hugging Face API
        """
        model = random.choice(config['models'])
        ai_prompt = self.enhancement_templates[prompt_type].format(theme=theme)
        
        headers = {"Content-Type": "application/json"}
        payload = {
            "inputs": ai_prompt,
            "parameters": {
                "max_length": 150,
                "temperature": 0.7,
                "do_sample": True,
                "top_p": 0.9,
                "repetition_penalty": 1.1
            }
        }
        
        response = requests.post(
            f"{config['url']}/{model}",
            headers=headers,
            json=payload,
            timeout=8
        )
        
        if response.status_code == 200:
            result = response.json()
            if isinstance(result, list) and len(result) > 0:
                generated_text = result[0].get('generated_text', '')
                
                # –£–º–Ω–∞—è —ç–∫—Å—Ç—Ä–∞–∫—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                for separator in ['Enhanced prompt:', 'Description:', 'Portrait description:', 'Icon concept:']:
                    if separator in generated_text:
                        extracted = generated_text.split(separator)[-1].strip()
                        if len(extracted) > 15:
                            return self._clean_ai_output(extracted)
                
                # –ï—Å–ª–∏ –Ω–µ—Ç —Å–µ–ø–∞—Ä–∞—Ç–æ—Ä–æ–≤, –±–µ—Ä—ë–º –∫–æ–Ω–µ—Ü —Ç–µ–∫—Å—Ç–∞
                if len(generated_text) > len(ai_prompt) + 10:
                    extracted = generated_text[len(ai_prompt):].strip()
                    return self._clean_ai_output(extracted)
        
        raise Exception(f"–ù–µ—É–¥–∞—á–Ω—ã–π –æ—Ç–≤–µ—Ç: {response.status_code}")
    
    def _clean_ai_output(self, text: str) -> str:
        """
        –û—á–∏—â–∞–µ—Ç –∏ —É–ª—É—á—à–∞–µ—Ç –≤—ã–≤–æ–¥ –ò–ò
        
        Args:
            text (str): –°—ã—Ä–æ–π —Ç–µ–∫—Å—Ç –æ—Ç –ò–ò
            
        Returns:
            str: –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        # –ë–∞–∑–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞
        cleaned = text.replace('\n', ' ').replace('\r', ' ')
        cleaned = ' '.join(cleaned.split())
        cleaned = cleaned.strip('\'".,!?;:')
        
        # –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä—ã –∏ –º—É—Å–æ—Ä
        words = cleaned.split()
        unique_words = []
        for word in words:
            if word.lower() not in [w.lower() for w in unique_words[-3:]]:  # –ò–∑–±–µ–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–æ–≤
                unique_words.append(word)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
        if len(unique_words) > 30:
            unique_words = unique_words[:30]
        
        return ' '.join(unique_words)
    
    def _enhance_with_quality_terms(self, prompt: str, theme: str) -> str:
        """
        –£–ª—É—á—à–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞–º–∏
        
        Args:
            prompt (str): –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
            theme (str): –¢–µ–º–∞—Ç–∏–∫–∞
            
        Returns:
            str: –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        """
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        for category, terms in self.quality_enhancers.items():
            if not any(term in prompt.lower() for term in terms):
                selected_term = random.choice(terms)
                prompt = f"{selected_term} {prompt}"
                break  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–µ—Ä–º–∏–Ω —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å
        
        return prompt
    
    def _create_premium_fallback(self, theme: str, prompt_type: str) -> str:
        """
        –°–æ–∑–¥–∞—ë—Ç –ø—Ä–µ–º–∏—É–º fallback –ø—Ä–æ–º–ø—Ç
        
        Args:
            theme (str): –¢–µ–º–∞—Ç–∏–∫–∞
            prompt_type (str): –¢–∏–ø –ø—Ä–æ–º–ø—Ç–∞
            
        Returns:
            str: –ü—Ä–µ–º–∏—É–º –ø—Ä–æ–º–ø—Ç
        """
        premium_templates = {
            'main': f"cutting-edge {theme} business center with world-class professional team and state-of-the-art equipment",
            'about': f"exceptional {theme} service workflow with premium quality standards and sophisticated technology", 
            'review': "portrait photo of genuinely satisfied customer, authentic smile, professional headshot style, clean background",
            'favicon': f"sophisticated {theme} business emblem, modern minimalist icon design, premium brand symbol"
        }
        
        base = premium_templates.get(prompt_type, f"premium {theme} professional service")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
        enhancements = [
            "expertly crafted", "meticulously designed", "precision engineered", 
            "thoughtfully curated", "strategically positioned", "carefully optimized"
        ]
        
        enhancement = random.choice(enhancements)
        return f"{enhancement} {base}"
    
    def _create_advanced_fallback(self, theme: str, prompt_type: str) -> Dict[str, str]:
        """
        –°–æ–∑–¥–∞—ë—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π fallback –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
        """
        fallbacks = {}
        
        if prompt_type == 'main':
            fallbacks['main'] = self._create_premium_fallback(theme, 'main')
        elif prompt_type == 'about':
            for i in range(1, 4):
                fallbacks[f'about{i}'] = self._create_premium_fallback(theme, 'about')
        elif prompt_type == 'review':
            for i in range(1, 4):
                fallbacks[f'review{i}'] = self._create_premium_fallback(theme, 'review')
        elif prompt_type == 'favicon':
            fallbacks['favicon'] = self._create_premium_fallback(theme, 'favicon')
        
        return fallbacks
    
    def _post_process_prompts(self, prompts: Dict[str, str], theme: str) -> Dict[str, str]:
        """
        –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
        
        Args:
            prompts (Dict[str, str]): –°—ã—Ä—ã–µ –ø—Ä–æ–º–ø—Ç—ã
            theme (str): –¢–µ–º–∞—Ç–∏–∫–∞
            
        Returns:
            Dict[str, str]: –§–∏–Ω–∞–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
        """
        processed = {}
        
        for key, prompt in prompts.items():
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
            processed_prompt = prompt
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø—Ä–æ–º–ø—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π
            if len(processed_prompt) < 20:
                processed_prompt = self._create_premium_fallback(theme, key.replace('1','').replace('2','').replace('3',''))
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å API
            words = processed_prompt.split()
            if len(words) > 25:
                processed_prompt = ' '.join(words[:25])
            
            processed[key] = processed_prompt
        
        return processed

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
def create_super_ai_prompts(theme: str) -> Dict[str, str]:
    """
    –°–æ–∑–¥–∞—ë—Ç –ø—Ä–æ–º–ø—Ç—ã —á–µ—Ä–µ–∑ –°–£–ü–ï–† –ò–ò-–£–°–ò–õ–ò–¢–ï–õ–¨
    
    Args:
        theme (str): –¢–µ–º–∞—Ç–∏–∫–∞ –±–∏–∑–Ω–µ—Å–∞
        
    Returns:
        Dict[str, str]: –°—É–ø–µ—Ä-–ø—Ä–æ–º–ø—Ç—ã –≤—ã—Å–æ—á–∞–π—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞  
    """
    enhancer = SuperAIEnhancer()
    return enhancer.create_super_enhanced_prompts(theme) 