#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–≤–∏–∫–æ–Ω–æ–∫
–°–æ–∑–¥–∞–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–µ–º–∞—Ç–∏–∫, –∞ –Ω–µ —á–µ–ª–æ–≤–µ—á–∫–æ–≤
"""

import os
from PIL import Image, ImageDraw, ImageFont
import random

class SimpleThematicFavicon:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ—Å—Ç—ã—Ö —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–≤–∏–∫–æ–Ω–æ–∫"""
    
    def __init__(self, silent_mode=False):
        self.silent_mode = silent_mode
        
        # –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ —Ü–≤–µ—Ç–∞
        self.theme_symbols = {
            '–∫–∞—Ñ–µ': {'symbol': '‚òï', 'colors': ['#8B4513', '#F4A460', '#D2B48C']},
            '–∫–æ—Ñ–µ–π–Ω—è': {'symbol': '‚òï', 'colors': ['#8B4513', '#F4A460', '#D2B48C']},
            '—Ä–µ—Å—Ç–æ—Ä–∞–Ω': {'symbol': 'üçΩÔ∏è', 'colors': ['#FF6347', '#FFD700', '#32CD32']},
            '–¥–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã': {'symbol': 'üçï', 'colors': ['#FF4500', '#FFD700', '#228B22']},
            '–¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã': {'symbol': 'üçî', 'colors': ['#FF4500', '#FFD700', '#228B22']},
            '–µ–¥—ã': {'symbol': 'ü•ó', 'colors': ['#32CD32', '#FFD700', '#FF6347']},
            '–µ–¥–∞': {'symbol': 'üçú', 'colors': ['#32CD32', '#FFD700', '#FF6347']},
            '–∞–≤—Ç–æ–º–æ–π–∫–∞': {'symbol': 'üöó', 'colors': ['#1E90FF', '#87CEEB', '#4169E1']},
            '–∞–≤—Ç–æ—Å–∞–ª–æ–Ω': {'symbol': 'üöô', 'colors': ['#2F4F4F', '#696969', '#C0C0C0']},
            '–ø—Ä–æ–¥–∞–∂–∞ –∞–≤—Ç–æ': {'symbol': 'üöò', 'colors': ['#2F4F4F', '#696969', '#C0C0C0']},
            '–ø—Ä–æ–¥–∞–∂–∏ –∞–≤—Ç–æ': {'symbol': 'üöó', 'colors': ['#2F4F4F', '#696969', '#C0C0C0']},
            '–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∞—è': {'symbol': '‚úÇÔ∏è', 'colors': ['#FF69B4', '#DA70D6', '#FFB6C1']},
            '—Å–∞–ª–æ–Ω': {'symbol': 'üíÖ', 'colors': ['#FF69B4', '#DA70D6', '#FFB6C1']},
            '—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è': {'symbol': 'ü¶∑', 'colors': ['#FFFFFF', '#E0E0E0', '#87CEEB']},
            '—Ñ–∏—Ç–Ω–µ—Å': {'symbol': 'üí™', 'colors': ['#FF4500', '#FF6347', '#FFD700']},
            '—Å–ø–æ—Ä—Ç–∑–∞–ª': {'symbol': 'üèãÔ∏è', 'colors': ['#FF4500', '#FF6347', '#FFD700']},
            '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ': {'symbol': 'üî®', 'colors': ['#B8860B', '#DAA520', '#8B4513']},
            '—Ä–µ–º–æ–Ω—Ç': {'symbol': 'üîß', 'colors': ['#B8860B', '#DAA520', '#8B4513']},
            '—é—Ä–∏—Å—Ç': {'symbol': '‚öñÔ∏è', 'colors': ['#2F4F4F', '#4682B4', '#B0C4DE']},
            '—é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ': {'symbol': '‚öñÔ∏è', 'colors': ['#2F4F4F', '#4682B4', '#B0C4DE']},
            '–º–µ–¥–∏—Ü–∏–Ω': {'symbol': 'üè•', 'colors': ['#FF0000', '#FFFFFF', '#87CEEB']},
            '–±–æ–ª—å–Ω–∏—Ü–∞': {'symbol': 'üè•', 'colors': ['#FF0000', '#FFFFFF', '#87CEEB']},
            '–Ω–µ–¥–≤–∏–∂–∏–º': {'symbol': 'üè†', 'colors': ['#8B4513', '#DAA520', '#32CD32']},
            '–¥–æ–º': {'symbol': 'üèòÔ∏è', 'colors': ['#8B4513', '#DAA520', '#32CD32']},
            '–æ–±—Ä–∞–∑–æ–≤–∞–Ω': {'symbol': 'üìö', 'colors': ['#4169E1', '#FFD700', '#32CD32']},
            '—à–∫–æ–ª': {'symbol': 'üéì', 'colors': ['#4169E1', '#FFD700', '#32CD32']},
            '—Ñ–∏–Ω–∞–Ω—Å': {'symbol': 'üí∞', 'colors': ['#DAA520', '#FFD700', '#228B22']},
            '–±–∞–Ω–∫': {'symbol': 'üè¶', 'colors': ['#DAA520', '#FFD700', '#228B22']},
            '—Ç–µ—Ö–Ω–æ–ª–æ–≥': {'symbol': 'üíª', 'colors': ['#4169E1', '#87CEEB', '#B0C4DE']},
            'IT': {'symbol': 'üñ•Ô∏è', 'colors': ['#4169E1', '#87CEEB', '#B0C4DE']},
        }
        
        # Fallback —Å–∏–º–≤–æ–ª—ã –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–µ–º–∞—Ç–∏–∫
        self.fallback_symbols = ['üî∑', 'üî∂', '‚≠ê', 'üéØ', 'üîµ', 'üü¢', 'üü°', 'üü†', 'üü£']
        self.fallback_colors = [
            ['#4169E1', '#87CEEB', '#B0C4DE'],
            ['#32CD32', '#90EE90', '#98FB98'],
            ['#FFD700', '#FFA500', '#FF8C00'],
            ['#FF6347', '#FF4500', '#DC143C'],
            ['#9370DB', '#BA55D3', '#DA70D6']
        ]
        
        if not self.silent_mode:
            print("üé® SimpleThematicFavicon –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def generate_favicon(self, theme, output_path):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ñ–∞–≤–∏–∫–æ–Ω–∫—É"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª –∏ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–µ–º–∞—Ç–∏–∫–∏
            symbol, colors = self._get_theme_symbol_and_colors(theme)
            
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 256x256
            size = 256
            image = Image.new('RGBA', (size, size), (0, 0, 0, 0))
            draw = ImageDraw.Draw(image)
            
            # –†–∏—Å—É–µ–º —Ñ–æ–Ω —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
            self._draw_gradient_background(draw, size, colors)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª
            self._draw_symbol(draw, size, symbol, colors)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –¥–ª—è JPG
            if output_path.lower().endswith('.jpg') or output_path.lower().endswith('.jpeg'):
                rgb_image = Image.new('RGB', (size, size), 'white')
                rgb_image.paste(image, mask=image)
                image = rgb_image
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            image.save(output_path, format='PNG' if output_path.lower().endswith('.png') else 'JPEG')
            
            if not self.silent_mode:
                print(f"‚úÖ –§–∞–≤–∏–∫–æ–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {theme} -> {symbol}")
            
            return True
            
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏: {e}")
            return False
    
    def _get_theme_symbol_and_colors(self, theme):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–∏–º–≤–æ–ª –∏ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–µ–º–∞—Ç–∏–∫–∏"""
        theme_lower = theme.lower().strip()
        
        # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        for key, data in self.theme_symbols.items():
            if key in theme_lower:
                return data['symbol'], data['colors']
        
        # Fallback: —Å–ª—É—á–∞–π–Ω—ã–π —Å–∏–º–≤–æ–ª –∏ —Ü–≤–µ—Ç–∞
        symbol = random.choice(self.fallback_symbols)
        colors = random.choice(self.fallback_colors)
        
        return symbol, colors
    
    def _draw_gradient_background(self, draw, size, colors):
        """–†–∏—Å—É–µ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω"""
        # –í—ã–±–∏—Ä–∞–µ–º –¥–≤–∞ —Ü–≤–µ—Ç–∞ –¥–ª—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
        color1 = self._hex_to_rgb(colors[0])
        color2 = self._hex_to_rgb(colors[1])
        
        # –†–∏—Å—É–µ–º —Ä–∞–¥–∏–∞–ª—å–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
        center = size // 2
        max_radius = size // 2
        
        for y in range(size):
            for x in range(size):
                # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
                distance = ((x - center) ** 2 + (y - center) ** 2) ** 0.5
                ratio = min(distance / max_radius, 1.0)
                
                # –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º —Ü–≤–µ—Ç
                r = int(color1[0] * (1 - ratio) + color2[0] * ratio)
                g = int(color1[1] * (1 - ratio) + color2[1] * ratio)
                b = int(color1[2] * (1 - ratio) + color2[2] * ratio)
                
                draw.point((x, y), (r, g, b))
    
    def _draw_symbol(self, draw, size, symbol, colors):
        """–†–∏—Å—É–µ—Ç —Å–∏–º–≤–æ–ª –Ω–∞ —Ñ–∞–≤–∏–∫–æ–Ω–∫–µ"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —ç–º–æ–¥–∑–∏
            font_size = size // 3
            
            # –°–ø–∏—Å–æ–∫ —à—Ä–∏—Ñ—Ç–æ–≤ –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏
            font_paths = [
                "C:/Windows/Fonts/seguiemj.ttf",  # Windows Emoji
                "C:/Windows/Fonts/arial.ttf",     # Arial
                "/System/Library/Fonts/Apple Color Emoji.ttc",  # macOS
                "/usr/share/fonts/truetype/noto-color-emoji/NotoColorEmoji.ttf",  # Linux
            ]
            
            font = None
            for font_path in font_paths:
                try:
                    if os.path.exists(font_path):
                        font = ImageFont.truetype(font_path, font_size)
                        break
                except:
                    continue
            
            if font is None:
                font = ImageFont.load_default()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–µ–∫—Å—Ç–∞
            bbox = draw.textbbox((0, 0), symbol, font=font)
            text_width = bbox[2] - bbox[0]
            text_height = bbox[3] - bbox[1]
            
            # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            x = (size - text_width) // 2
            y = (size - text_height) // 2
            
            # –†–∏—Å—É–µ–º —Ç–µ–Ω—å
            shadow_color = self._hex_to_rgb(colors[2]) if len(colors) > 2 else (100, 100, 100)
            draw.text((x + 2, y + 2), symbol, font=font, fill=shadow_color)
            
            # –†–∏—Å—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏–º–≤–æ–ª
            draw.text((x, y), symbol, font=font, fill='white')
            
        except Exception as e:
            # Fallback: —Ä–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç—É—é –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫—É—é —Ñ–∏–≥—É—Ä—É
            self._draw_fallback_shape(draw, size, colors)
    
    def _draw_fallback_shape(self, draw, size, colors):
        """–†–∏—Å—É–µ—Ç –ø—Ä–æ—Å—Ç—É—é —Ñ–∏–≥—É—Ä—É –∫–∞–∫ fallback"""
        center = size // 2
        radius = size // 4
        
        # –†–∏—Å—É–µ–º –∫—Ä—É–≥
        color = self._hex_to_rgb(colors[0])
        draw.ellipse([
            center - radius, center - radius,
            center + radius, center + radius
        ], fill=color, outline='white', width=3)
    
    def _hex_to_rgb(self, hex_color):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç HEX –≤ RGB"""
        hex_color = hex_color.lstrip('#')
        return tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ
def generate_simple_thematic_favicon(theme, output_path, silent_mode=False):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç—É—é —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ñ–∞–≤–∏–∫–æ–Ω–∫—É"""
    generator = SimpleThematicFavicon(silent_mode=silent_mode)
    return generator.generate_favicon(theme, output_path)

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    generator = SimpleThematicFavicon()
    
    test_themes = [
        "–∫–∞—Ñ–µ", "–¥–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã", "–∞–≤—Ç–æ–º–æ–π–∫–∞", "–ø—Ä–æ–¥–∞–∂–∞ –∞–≤—Ç–æ",
        "–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∞—è", "—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è", "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ", "—é—Ä–∏—Å—Ç"
    ]
    
    os.makedirs("test_simple_favicons", exist_ok=True)
    
    for i, theme in enumerate(test_themes):
        output_path = f"test_simple_favicons/favicon_{theme.replace(' ', '_')}.png"
        success = generator.generate_favicon(theme, output_path)
        print(f"{i+1}. {theme}: {'‚úÖ' if success else '‚ùå'}") 