"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ API
–ë–µ–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, —Ç–æ–ª—å–∫–æ –≤–Ω–µ—à–Ω–∏–µ API
"""

import requests
import datetime
import os
import math
from PIL import Image, ImageDraw, ImageFilter, ImageEnhance
from io import BytesIO
import json
import time
import random
import uuid
import re
from urllib.parse import quote
from pathlib import Path
import ssl
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry

class APIOnlyImageGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–µ API"""
    
    def __init__(self, silent_mode=False):
        self.silent_mode = silent_mode
        
        if not self.silent_mode:
            print("üåê APIOnlyImageGenerator: –¢–æ–ª—å–∫–æ –≤–Ω–µ—à–Ω–∏–µ API, –±–µ–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    
    def generate_thematic_set(self, theme_input, media_dir, method="1", progress_callback=None):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ API"""
        if not self.silent_mode:
            print(f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ API –¥–ª—è: {theme_input}")
        
        # –ü–æ–ª—É—á–∞–µ–º —É–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
        prompts = self._generate_prompts(theme_input)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        try:
            os.makedirs(media_dir, exist_ok=True)
            if not self.silent_mode:
                print(f"üìÅ –ü–∞–ø–∫–∞ media —Å–æ–∑–¥–∞–Ω–∞: {media_dir}")
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ media: {e}")
            return 0
        
        image_names = ['main', 'about1', 'about2', 'about3', 'review1', 'review2', 'review3', 'favicon']
        generated_count = 0
        
        for i, image_name in enumerate(image_names):
            if progress_callback:
                progress_callback(f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {image_name} ({i+1}/8)...")
            
            try:
                if image_name == 'favicon':
                    prompt = f"{theme_input} icon symbol logo"
                else:
                    prompt = prompts.get(image_name, f'professional {theme_input} service')
                
                result = self._generate_image_via_api(prompt, image_name, media_dir)
                
                if result:
                    generated_count += 1
                    if not self.silent_mode:
                        print(f"‚úÖ {image_name}: –°–æ–∑–¥–∞–Ω–æ")
                else:
                    if not self.silent_mode:
                        print(f"‚ùå {image_name}: –û—à–∏–±–∫–∞")
                        
            except Exception as e:
                if not self.silent_mode:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {image_name}: {e}")
        
        if not self.silent_mode:
            print(f"üéØ –°–æ–∑–¥–∞–Ω–æ {generated_count}/8 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        return generated_count
    
    def _generate_image_via_api(self, prompt, image_name, media_dir):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–µ API"""
        try:
            # –£–ª—É—á—à–∞–µ–º –ø—Ä–æ–º–ø—Ç
            enhanced_prompt = self._add_randomization(prompt, image_name)
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if image_name == 'favicon':
                target_size_kb = 50
                output_path = Path(media_dir) / f"{image_name}.png"
            else:
                target_size_kb = 150
                output_path = Path(media_dir) / f"{image_name}.jpg"
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è Linux
            session = self._create_optimized_session()
            
            # –°–ø–∏—Å–æ–∫ API –¥–ª—è –ø–æ–ø—ã—Ç–æ–∫
            api_urls = [
                # –û—Å–Ω–æ–≤–Ω–æ–π API
                f"https://image.pollinations.ai/prompt/{quote(enhanced_prompt)}?width=1024&height=768&model=flux",
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ API
                f"https://picsum.photos/1024/768?random={hash(enhanced_prompt) % 10000}",
                f"https://source.unsplash.com/1024x768/?{enhanced_prompt.replace(' ', '+')}",
                f"https://via.placeholder.com/1024x768/4A90E2/FFFFFF?text={enhanced_prompt[:20].replace(' ', '+')}"
            ]
            
            for i, api_url in enumerate(api_urls):
                try:
                    if not self.silent_mode:
                        print(f"üåê API {i+1}/{len(api_urls)} –¥–ª—è {image_name}: {api_url[:50]}...")
                    
                    response = session.get(api_url, 
                                         timeout=(30, 120),
                                         stream=True,
                                         allow_redirects=True)
                    
                    if response.status_code == 200:
                        image_data = response.content
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∞ –Ω–µ HTML
                        if len(image_data) > 1000 and not image_data.startswith(b'<!DOCTYPE'):
                            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ PIL Image
                            image = Image.open(BytesIO(image_data))
                            
                            # –û–±—Ä–µ–∑–∞–µ–º –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                            if "pollinations" in api_url:
                                image = self._remove_pollinations_watermark_from_image(image)
                            
                            # –î–ª—è —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏ –¥–µ–ª–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
                            if image_name == 'favicon':
                                image = self._make_favicon_transparent(image)
                            
                            # –°–∂–∏–º–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                            if self._save_compressed_image(image, str(output_path), target_size_kb=target_size_kb):
                                if not self.silent_mode:
                                    final_size_kb = output_path.stat().st_size / 1024
                                    print(f"‚úÖ {image_name}: –°–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ API {i+1} ({final_size_kb:.1f}–∫–±)")
                                return str(output_path)
                        else:
                            if not self.silent_mode:
                                print(f"‚ö†Ô∏è API {i+1}: –ø–æ–ª—É—á–µ–Ω HTML –≤–º–µ—Å—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                    else:
                        if not self.silent_mode:
                            print(f"‚ö†Ô∏è API {i+1}: –∫–æ–¥ {response.status_code}")
                        
                except Exception as e:
                    if not self.silent_mode:
                        print(f"‚ö†Ô∏è API {i+1} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
                    continue
            
            if not self.silent_mode:
                print(f"‚ùå –í—Å–µ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è {image_name}")
            return None
            
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {image_name}: {e}")
            return None
    
    def _create_optimized_session(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è Linux"""
        session = requests.Session()
        
        # Retry —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
        retry_strategy = Retry(
            total=3,
            backoff_factor=1,
            status_forcelist=[429, 500, 502, 503, 504],
            allowed_methods=["HEAD", "GET", "OPTIONS"]
        )
        
        adapter = HTTPAdapter(max_retries=retry_strategy)
        session.mount("https://", adapter)
        session.mount("http://", adapter)
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è Linux
        session.headers.update({
            'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0',
            'Accept': 'image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.9',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1'
        })
        
        return session
    
    def _add_randomization(self, prompt, image_name):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—é –∫ –ø—Ä–æ–º–ø—Ç—É"""
        if image_name == 'favicon':
            return f"{prompt}, icon, symbol, logo, simple"
        elif image_name.startswith('review'):
            return f"{prompt}, person, portrait, professional"
        elif image_name == 'main':
            return f"{prompt}, professional, modern, high quality"
        else:
            return f"{prompt}, business, professional, clean"
    
    def _remove_pollinations_watermark_from_image(self, image):
        """–£–¥–∞–ª—è–µ—Ç –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ pollinations"""
        try:
            width, height = image.size
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –æ–±—Ä–µ–∑–∫–∏
            if width >= 1024 and height >= 768:
                crop_box = (0, 0, width - 80, height - 60)
            elif width >= 512 and height >= 512:
                crop_box = (0, 0, width - 50, height - 40)
            else:
                crop_box = (0, 0, width - 30, height - 25)
            
            # –û–±—Ä–µ–∑–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            cropped_img = image.crop(crop_box)
            
            return cropped_img
            
        except Exception as e:
            return image
    
    def _make_favicon_transparent(self, image):
        """–î–µ–ª–∞–µ—Ç —Ñ–∞–≤–∏–∫–æ–Ω–∫—É –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–π"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGBA –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
            if image.mode != 'RGBA':
                image = image.convert('RGBA')
            
            # –î–µ–ª–∞–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º
            data = image.getdata()
            
            newData = []
            for item in data:
                # –ï—Å–ª–∏ –ø–∏–∫—Å–µ–ª—å –±–ª–∏–∑–æ–∫ –∫ –±–µ–ª–æ–º—É, –¥–µ–ª–∞–µ–º –µ–≥–æ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º
                if item[0] > 200 and item[1] > 200 and item[2] > 200:
                    newData.append((255, 255, 255, 0))  # –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π
                else:
                    newData.append(item)
            
            image.putdata(newData)
            return image
            
        except Exception as e:
            return image
    
    def _save_compressed_image(self, image, filepath, target_size_kb=150):
        """–°–∂–∏–º–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
            file_ext = Path(filepath).suffix.lower()
            
            if file_ext == '.png':
                # PNG —Å–∂–∞—Ç–∏–µ
                for quality in [95, 85, 75, 65]:
                    buffer = BytesIO()
                    image.save(buffer, format='PNG', optimize=True, compress_level=6)
                    size_kb = len(buffer.getvalue()) / 1024
                    
                    if size_kb <= target_size_kb:
                        with open(filepath, 'wb') as f:
                            f.write(buffer.getvalue())
                        return True
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∂–∞—Ç—å
                image.save(filepath, format='PNG', optimize=True)
                return True
            
            else:
                # JPEG —Å–∂–∞—Ç–∏–µ
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if image.mode in ('RGBA', 'LA'):
                    rgb_image = Image.new('RGB', image.size, (255, 255, 255))
                    if image.mode == 'RGBA':
                        rgb_image.paste(image, mask=image.split()[-1])
                    else:
                        rgb_image.paste(image)
                    image = rgb_image
                elif image.mode not in ('RGB', 'L'):
                    image = image.convert('RGB')
                
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–∞
                for quality in [95, 85, 75, 65, 55]:
                    buffer = BytesIO()
                    image.save(buffer, format='JPEG', quality=quality, optimize=True)
                    size_kb = len(buffer.getvalue()) / 1024
                    
                    if size_kb <= target_size_kb:
                        with open(filepath, 'wb') as f:
                            f.write(buffer.getvalue())
                        return True
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
                image.save(filepath, format='JPEG', quality=50, optimize=True)
                return True
                
        except Exception as e:
            return False
    
    def _generate_prompts(self, theme_input):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        prompts = {
            'main': f"professional {theme_input} business main image",
            'about1': f"modern {theme_input} company about us",
            'about2': f"quality {theme_input} service team",
            'about3': f"expert {theme_input} professional work",
            'review1': f"satisfied {theme_input} customer portrait",
            'review2': f"happy {theme_input} client testimonial",
            'review3': f"positive {theme_input} feedback success",
            'favicon': f"{theme_input} icon symbol logo"
        }
        
        return prompts 