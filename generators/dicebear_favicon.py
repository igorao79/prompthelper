#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ñ–∞–≤–∏–∫–æ–Ω–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ DiceBear API
–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Å—Ç–∏–ª–µ–π –∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ–º
"""

import requests
import random
import hashlib
import os
from pathlib import Path

class DiceBearFavicon:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ñ–∞–≤–∏–∫–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ DiceBear API"""
    
    def __init__(self, silent_mode=False):
        self.silent_mode = silent_mode
        self.base_url = "https://api.dicebear.com/9.x"
        
        # –°—Ç–∏–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º–∞—Ç–∏–∫
        self.theme_styles = {
            '–∫–∞—Ñ–µ': ['bottts', 'personas', 'fun-emoji', 'avataaars', 'pixel-art'],
            '—Ä–µ—Å—Ç–æ—Ä–∞–Ω': ['avataaars', 'personas', 'lorelei', 'miniavs', 'fun-emoji'],
            '–∞–≤—Ç–æ–º–æ–π–∫–∞': ['bottts', 'pixel-art', 'shapes', 'identicon', 'rings'],
            '–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∞—è': ['avataaars', 'lorelei', 'personas', 'miniavs', 'fun-emoji'],
            '—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è': ['avataaars', 'personas', 'miniavs', 'fun-emoji', 'pixel-art'],
            '—Ñ–∏—Ç–Ω–µ—Å': ['avataaars', 'personas', 'pixel-art', 'fun-emoji', 'bottts'],
            '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ': ['bottts', 'pixel-art', 'shapes', 'identicon', 'rings'],
            '—Å–∞–ª–æ–Ω': ['lorelei', 'personas', 'avataaars', 'miniavs', 'fun-emoji'],
            '—é—Ä–∏—Å—Ç': ['avataaars', 'personas', 'miniavs', 'pixel-art', 'identicon'],
            '–º–µ–¥–∏—Ü–∏–Ω': ['avataaars', 'personas', 'miniavs', 'fun-emoji', 'pixel-art'],
            '—Ç–µ—Ö–Ω–æ–ª–æ–≥': ['bottts', 'pixel-art', 'identicon', 'shapes', 'rings'],
            '–æ–±—Ä–∞–∑–æ–≤–∞–Ω': ['avataaars', 'personas', 'miniavs', 'fun-emoji', 'pixel-art'],
            '—Ñ–∏–Ω–∞–Ω—Å': ['avataaars', 'personas', 'miniavs', 'identicon', 'pixel-art'],
            '–Ω–µ–¥–≤–∏–∂–∏–º': ['avataaars', 'personas', 'miniavs', 'identicon', 'shapes'],
            '—Ç—É—Ä–∏–∑–º': ['avataaars', 'personas', 'lorelei', 'miniavs', 'fun-emoji'],
            '—Å–ø–æ—Ä—Ç': ['avataaars', 'personas', 'pixel-art', 'fun-emoji', 'bottts'],
        }
        
        # –¶–≤–µ—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º–∞—Ç–∏–∫
        self.theme_colors = {
            '–∫–∞—Ñ–µ': ['8B4513', 'D2691E', 'CD853F', 'F5DEB3', 'DEB887'],
            '—Ä–µ—Å—Ç–æ—Ä–∞–Ω': ['DC143C', 'FF6347', 'FFD700', 'FFA500', 'FF4500'],
            '–∞–≤—Ç–æ–º–æ–π–∫–∞': ['0000FF', '00BFFF', '1E90FF', '4169E1', '6495ED'],
            '–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∞—è': ['FF69B4', 'FF1493', 'DA70D6', 'BA55D3', 'DDA0DD'],
            '—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è': ['00CED1', '48D1CC', '20B2AA', '87CEEB', '00BFFF'],
            '—Ñ–∏—Ç–Ω–µ—Å': ['FF6347', 'FF4500', 'FF8C00', 'FFA500', 'FFD700'],
            '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ': ['FF8C00', 'FFD700', 'DAA520', 'B8860B', 'CD853F'],
            '—Å–∞–ª–æ–Ω': ['FF69B4', 'FF1493', 'C71585', 'DA70D6', 'BA55D3'],
            '—é—Ä–∏—Å—Ç': ['2F4F4F', '696969', '778899', '708090', '8B8B8B'],
            '–º–µ–¥–∏—Ü–∏–Ω': ['00CED1', '48D1CC', '20B2AA', '87CEEB', '4682B4'],
            '—Ç–µ—Ö–Ω–æ–ª–æ–≥': ['4169E1', '0000FF', '1E90FF', '6495ED', '87CEEB'],
            '–æ–±—Ä–∞–∑–æ–≤–∞–Ω': ['4169E1', '0000FF', '1E90FF', '6495ED', '87CEEB'],
            '—Ñ–∏–Ω–∞–Ω—Å': ['228B22', '32CD32', '00FF00', '90EE90', '98FB98'],
            '–Ω–µ–¥–≤–∏–∂–∏–º': ['8B4513', 'CD853F', 'D2691E', 'DEB887', 'F5DEB3'],
            '—Ç—É—Ä–∏–∑–º': ['4169E1', '0000FF', '1E90FF', '6495ED', '87CEEB'],
            '—Å–ø–æ—Ä—Ç': ['FF6347', 'FF4500', 'FF8C00', 'FFA500', 'FFD700'],
        }
        
    def generate_favicon(self, theme, output_path="", size=512):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∞–≤–∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–µ–º–∞—Ç–∏–∫–∏
        
        Args:
            theme (str): –¢–µ–º–∞—Ç–∏–∫–∞ –±–∏–∑–Ω–µ—Å–∞
            output_path (str): –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            size (int): –†–∞–∑–º–µ—Ä —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        """
        try:
            if not self.silent_mode:
                print(f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é DiceBear —Ñ–∞–≤–∏–∫–æ–Ω–∫—É –¥–ª—è: {theme}")
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å—Ç–∏–ª—å –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            style_name, params = self._get_style_and_params(theme)
            
            if not self.silent_mode:
                print(f"üéØ –°—Ç–∏–ª—å: {style_name}")
                print(f"üåü Seed: {params.get('seed', 'random')}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL
            url = self._build_url(style_name, params, size)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            success = self._download_image(url, output_path)
            
            if success and not self.silent_mode:
                print(f"‚úÖ –§–∞–≤–∏–∫–æ–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {output_path}")
            
            return success
            
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏: {e}")
            return False
    
    def _get_style_and_params(self, theme):
        """–í—ã–±–∏—Ä–∞–µ—Ç —Å—Ç–∏–ª—å –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ–º–∞—Ç–∏–∫–∏"""
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—Ç–∏–ª–∏
        styles = self._get_theme_styles(theme)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏–ª—å
        style_name = random.choice(styles)
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π seed –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º–∞—Ç–∏–∫–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏
        seed = self._generate_seed(theme)
        
        # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        params = {
            'seed': seed,
            'radius': random.randint(0, 20),
            'scale': random.randint(80, 120),
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ü–≤–µ—Ç–∞
        colors = self._get_theme_colors(theme)
        if colors:
            params['backgroundColor'] = random.choice(colors)
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
        if style_name == 'avataaars':
            params.update({
                'accessoriesProbability': random.randint(10, 50),
                'facialHairProbability': random.randint(10, 40),
                'topProbability': random.randint(70, 100),
            })
        
        elif style_name == 'bottts':
            params.update({
                'colorful': random.choice([True, False]),
            })
        
        elif style_name == 'pixel-art':
            params.update({
                'glassesProbability': random.randint(0, 30),
                'flip': random.choice([True, False]),
            })
        
        elif style_name == 'fun-emoji':
            params.update({
                'translateX': random.randint(-10, 10),
                'translateY': random.randint(-10, 10),
                'rotate': random.randint(0, 360),
            })
        
        elif style_name == 'shapes':
            if colors and len(colors) >= 3:
                params.update({
                    'colors': random.sample(colors, 3),
                })
        
        elif style_name == 'identicon':
            if colors and len(colors) >= 2:
                params.update({
                    'colors': random.sample(colors, 2),
                })
        
        return style_name, params
    
    def _get_theme_styles(self, theme):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∏–ª–∏ –¥–ª—è —Ç–µ–º–∞—Ç–∏–∫–∏"""
        theme_lower = theme.lower()
        
        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—Ç–∏–ª–∏
        for key, styles in self.theme_styles.items():
            if key in theme_lower:
                return styles
        
        # –°—Ç–∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return ['avataaars', 'bottts', 'pixel-art', 'personas', 'fun-emoji']
    
    def _get_theme_colors(self, theme):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–µ–º–∞—Ç–∏–∫–∏"""
        theme_lower = theme.lower()
        
        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ü–≤–µ—Ç–∞
        for key, colors in self.theme_colors.items():
            if key in theme_lower:
                return colors
        
        # –¶–≤–µ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return ['4169E1', 'FF6347', '32CD32', 'FFD700', 'FF69B4']
    
    def _generate_seed(self, theme):
        """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π seed –¥–ª—è —Ç–µ–º–∞—Ç–∏–∫–∏"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é —Ç–µ–º–∞—Ç–∏–∫–∏ + —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        base_seed = f"{theme}_{random.randint(1000, 9999)}"
        
        # –•–µ—à–∏—Ä—É–µ–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ seed
        return hashlib.md5(base_seed.encode()).hexdigest()[:10]
    
    def _build_url(self, style_name, params, size):
        """–°—Ç—Ä–æ–∏—Ç URL –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞"""
        # –ë–∞–∑–æ–≤—ã–π URL
        url = f"{self.base_url}/{style_name}/png"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        query_params = []
        for key, value in params.items():
            if isinstance(value, bool):
                query_params.append(f"{key}={str(value).lower()}")
            elif isinstance(value, list):
                query_params.append(f"{key}={','.join(map(str, value))}")
            else:
                query_params.append(f"{key}={value}")
        
        # –†–∞–∑–º–µ—Ä –¥–ª—è PNG
        query_params.append(f"size={min(size, 256)}")  # DiceBear –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç PNG –¥–æ 256x256
        
        if query_params:
            url += "?" + "&".join(query_params)
        
        return url
    
    def _download_image(self, url, output_path):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL"""
        try:
            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            with open(output_path, 'wb') as f:
                f.write(response.content)
            
            return True
            
        except requests.exceptions.RequestException as e:
            if not self.silent_mode:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
            return False
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False
    
    def get_available_styles(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∏–ª–µ–π"""
        return [
            'adventurer', 'avataaars', 'big-ears', 'big-smile', 'bottts',
            'croodles', 'fun-emoji', 'identicon', 'initials', 'lorelei',
            'micah', 'miniavs', 'notionists', 'open-peeps', 'personas',
            'pixel-art', 'rings', 'shapes', 'thumbs'
        ]
    
    def test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API"""
        try:
            test_url = f"{self.base_url}/avataaars/png?seed=test&size=32"
            response = requests.get(test_url, timeout=5)
            return response.status_code == 200
        except:
            return False 