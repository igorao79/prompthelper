"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ª–µ–Ω–¥–∏–Ω–≥–æ–≤
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¢–û–õ–¨–ö–û Pollinations API –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Linux
"""

import os
import random
import time
import requests
from urllib.parse import quote
from PIL import Image
from io import BytesIO
from pathlib import Path
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
import warnings
warnings.filterwarnings('ignore', category=requests.packages.urllib3.exceptions.InsecureRequestWarning)

class ImageGenerator:
    """–ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ Pollinations API"""
    
    def __init__(self, silent_mode=False):
        self.silent_mode = silent_mode
        
        if not self.silent_mode:
            print("üé® ImageGenerator - –¢–û–õ–¨–ö–û Pollinations API, –ë–ï–ó FALLBACK'–û–í!")
    
    def generate_thematic_set(self, theme_input, media_dir, method="1", progress_callback=None):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ Pollinations API
        
        Args:
            theme_input (str): –¢–µ–º–∞—Ç–∏–∫–∞ 
            media_dir (str): –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ media
            method (str): –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            progress_callback (callable): –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
            
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        """
        if not self.silent_mode:
            print(f"üé® –¢–û–õ–¨–ö–û Pollinations API –¥–ª—è: {theme_input}")
        
        # –ü–æ–ª—É—á–∞–µ–º —É–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
        prompts, theme_data = self._generate_prompts(theme_input)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        try:
            os.makedirs(media_dir, exist_ok=True)
            if not self.silent_mode:
                print(f"üìÅ –ü–∞–ø–∫–∞ media —Å–æ–∑–¥–∞–Ω–∞: {media_dir}")
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ media: {e}")
            return 0
        
        image_names = ['main', 'about1', 'about2', 'about3', 'review1', 'review2', 'review3', 'favicon']
        generated_count = 0
        
        for i, image_name in enumerate(image_names):
            if progress_callback:
                progress_callback(f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {image_name} ({i+1}/8)...")
            
            if not self.silent_mode:
                print(f"üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {image_name} ({i+1}/8) - –¢–û–õ–¨–ö–û Pollinations API...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ Pollinations API
            prompt = prompts.get(image_name, f'professional {theme_input} service')
            result = self._generate_image_pollinations_aggressive(prompt, image_name, media_dir)
                
            if result:
                generated_count += 1
                if not self.silent_mode:
                    print(f"‚úÖ {image_name}: –°–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ Pollinations API")
            else:
                if not self.silent_mode:
                    print(f"‚ùå {image_name}: Pollinations API –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª")
        
        if not self.silent_mode:
            print(f"üéØ –°–æ–∑–¥–∞–Ω–æ {generated_count}/8 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        return generated_count
    
    def _generate_image_pollinations_aggressive(self, prompt, image_name, media_dir):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ Pollinations API —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—é –∫ –ø—Ä–æ–º–ø—Ç—É
        enhanced_prompt = self._add_randomization(prompt, image_name)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if image_name == 'favicon':
            target_size_kb = 50
            output_path = Path(media_dir) / f"{image_name}.png"
            api_params = "?width=512&height=512&model=flux&enhance=true&nologo=true"
        else:
            target_size_kb = 150
            output_path = Path(media_dir) / f"{image_name}.jpg"
            api_params = "?width=1024&height=768&model=flux&enhance=true&nologo=true"
        
        # Pollinations API URL
        api_url = f"https://image.pollinations.ai/prompt/{quote(enhanced_prompt)}{api_params}"
        
        if not self.silent_mode:
            print(f"üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Pollinations API: {enhanced_prompt[:50]}...")
        
        # –°–æ–∑–¥–∞–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        session = self._create_aggressive_session()
        
        # –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        for attempt in range(3):
            if not self.silent_mode:
                print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3...")
            
            try:
                # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã
                response = session.get(api_url, timeout=(15, 60), stream=True)
                
                if not self.silent_mode:
                    print(f"üìä Pollinations API: –∫–æ–¥ {response.status_code}")
                
                if response.status_code == 200:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    image_data = response.content
                    
                    if len(image_data) > 1000:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ PIL Image
                        image = Image.open(BytesIO(image_data))
                        
                        if not self.silent_mode:
                            print(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {image.size}")
                
                        # –î–ª—è —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏ –¥–µ–ª–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
                        if image_name == 'favicon':
                            image = self._make_favicon_transparent(image)
                        
                        # –°–∂–∏–º–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                        if self._save_compressed_image(image, str(output_path), target_size_kb=target_size_kb):
                            if not self.silent_mode:
                                final_size_kb = output_path.stat().st_size / 1024
                                print(f"‚úÖ {image_name}: –°–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ Pollinations API ({final_size_kb:.1f}–∫–±)")
                            return str(output_path)
                    else:
                        if not self.silent_mode:
                            print(f"‚ö†Ô∏è Pollinations API: –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª ({len(image_data)} –±–∞–π—Ç)")
                
                elif response.status_code == 429:
                    if not self.silent_mode:
                        print(f"‚è∞ Pollinations API: –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–∞—É–∑–∞ 10 —Å–µ–∫...")
                    time.sleep(10)
                    continue
                
                elif response.status_code == 500:
                    if not self.silent_mode:
                        print(f"üîß Pollinations API: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –ø–∞—É–∑–∞ 5 —Å–µ–∫...")
                    time.sleep(5)
                    continue
                
                else:
                    if not self.silent_mode:
                        print(f"‚ùå Pollinations API: –û—à–∏–±–∫–∞ {response.status_code}")
                
            except requests.exceptions.Timeout:
                if not self.silent_mode:
                    print(f"‚è∞ Pollinations API: –¢–∞–π–º–∞—É—Ç, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑...")
                time.sleep(2)
                continue
                
            except requests.exceptions.ConnectionError as e:
                if not self.silent_mode:
                    print(f"üîå Pollinations API: –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑...")
                time.sleep(3)
                continue
            
            except Exception as e:
                if not self.silent_mode:
                    print(f"‚ö†Ô∏è Pollinations API: {str(e)[:100]}...")
                time.sleep(2)
                continue
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å
        if not self.silent_mode:
            print(f"‚ùå Pollinations API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è {image_name} –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫")
        return None
    
    def _create_aggressive_session(self):
        """–°–æ–∑–¥–∞–µ—Ç –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Linux"""
        session = requests.Session()
        
        # –û–¢–ö–õ–Æ–ß–ê–ï–ú SSL –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        session.verify = False
        
        # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è retry —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
        retry_strategy = Retry(
            total=5,
            backoff_factor=1,
            status_forcelist=[429, 500, 502, 503, 504],
            allowed_methods=["HEAD", "GET", "OPTIONS"],
            raise_on_status=False
        )
        
        adapter = HTTPAdapter(max_retries=retry_strategy)
        session.mount("https://", adapter)
        session.mount("http://", adapter)
        
        # –¢–û–ß–ù–û —Ç–∞–∫–∏–µ –∂–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–∞–∫ curl (curl —Ä–∞–±–æ—Ç–∞–µ—Ç!)
        session.headers.update({
            'User-Agent': 'curl/8.5.0',
            'Accept': '*/*',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive'
        })
        
        return session
    
    def _add_randomization(self, prompt, image_name):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø—Ä–æ–º–ø—Ç—É –ë–ï–ó –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º–∞—Ç–∏–∫–∏"""
        import hashlib
        import uuid
        
        # –°–û–•–†–ê–ù–Ø–ï–ú –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –ü–†–û–ú–ü–¢! –≠—Ç–æ –æ—Å–Ω–æ–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        base_prompt = prompt
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        unique_id = str(uuid.uuid4())[:8]
        timestamp = int(time.time() * 1000) % 100000
        
        # –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        quality_terms = [
            "high quality", "professional", "4k", "detailed", "sharp", 
            "crisp", "well-lit", "premium", "photorealistic", "studio quality"
        ]
        
        # –°—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
        style_terms = [
            "contemporary", "elegant", "sophisticated", "polished", 
            "refined", "modern", "sleek", "premium"
        ]
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
        technical_terms = [
            "perfect lighting", "excellent composition", "vibrant colors",
            "commercial photography", "professional grade", "award winning"
        ]
        
        # –°–æ–±–∏—Ä–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        enhanced_prompt = base_prompt
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã (2-3 —à—Ç—É–∫–∏)
        selected_quality = random.sample(quality_terms, random.randint(2, 3))
        enhanced_prompt += f", {', '.join(selected_quality)}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã (1-2 —à—Ç—É–∫–∏)  
        selected_style = random.sample(style_terms, random.randint(1, 2))
        enhanced_prompt += f", {', '.join(selected_style)}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ (1 —à—Ç—É–∫–∞)
        selected_technical = random.choice(technical_terms)
        enhanced_prompt += f", {selected_technical}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        hash_source = f"{unique_id}_{timestamp}_{image_name}_{random.randint(1000, 9999)}"
        unique_hash = hashlib.md5(hash_source.encode()).hexdigest()[:8]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        enhanced_prompt += f", unique_{unique_hash}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        enhanced_prompt += f", render_{timestamp}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –¥–ª—è —Ç–∏–ø–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç
        type_modifiers = {
            "main": "hero image",
            "about1": "process shot", 
            "about2": "service demo",
            "about3": "team work",
            "review1": "customer A",
            "review2": "customer B", 
            "review3": "customer C",
            "favicon": "icon style"
        }
        
        modifier = type_modifiers.get(image_name, "custom")
        enhanced_prompt += f", {modifier}_{unique_hash}"
        
        if not self.silent_mode:
            print(f"üéØ –ü—Ä–æ–º–ø—Ç –¥–ª—è {image_name}: {enhanced_prompt}")
        
        return enhanced_prompt
    
    def _make_favicon_transparent(self, image):
        """–î–µ–ª–∞–µ—Ç —Ñ–∞–≤–∏–∫–æ–Ω–∫—É —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º"""
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ RGBA –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
            if image.mode != 'RGBA':
                image = image.convert('RGBA')
            
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ 512x512 –¥–ª—è —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏
            image = image.resize((512, 512), Image.Resampling.LANCZOS)
            
            return image
            
        except Exception:
            return image
    
    def _save_compressed_image(self, image, filepath, target_size_kb=150):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω—É–∂–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
            if filepath.endswith('.png'):
                format_type = 'PNG'
                # –î–ª—è PNG –¥–µ–ª–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
                image.save(filepath, format=format_type, optimize=True)
            else:
                format_type = 'JPEG'
                # –î–ª—è JPEG –ø–æ–¥–±–∏—Ä–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
                for q in [85, 75, 65, 55, 45]:
                    image.save(filepath, format=format_type, quality=q, optimize=True)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                    file_size_kb = os.path.getsize(filepath) / 1024
                    if file_size_kb <= target_size_kb:
                        break
            
            return True
                
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False

    def _generate_prompts(self, theme_input):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ª—é–¥—å–º–∏ –¥–ª—è review
            from generators.prompt_generator import create_complete_prompts_dict
            
            prompts = create_complete_prompts_dict(theme_input)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã –∏ –¥–∞–Ω–Ω—ã–µ —Ç–µ–º—ã
            return prompts, {'theme': theme_input}
            
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤: {e}")
            return self._generate_fallback_prompts(theme_input), {'theme': theme_input}
    
    def _generate_fallback_prompts(self, theme_input):
        """–†–µ–∑–µ—Ä–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ª—é–¥—å–º–∏ –¥–ª—è review"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ review –ø—Ä–æ–º–ø—Ç—ã –¥–∞–∂–µ –¥–ª—è fallback
        try:
            from generators.prompt_generator import create_human_focused_review_prompts
            human_reviews = create_human_focused_review_prompts()
        except:
            # –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π fallback —Å –ø—Ä—è–º—ã–º–∏ human-–ø—Ä–æ–º–ø—Ç–∞–º–∏
            human_reviews = [
                "portrait photo of happy customer, smiling person, HUMAN FACE ONLY, civilian clothes, testimonial portrait",
                "portrait photo of satisfied client, pleased woman, PERSON ONLY, natural smile, customer review photo", 
                "portrait photo of grateful customer, joyful man, HUMAN ONLY, positive expression, headshot style"
            ]
        
        return {
            'main': f'professional {theme_input} service, modern website hero image',
            'about1': f'{theme_input} team at work, professional office environment',
            'about2': f'{theme_input} process, step by step workflow',
            'about3': f'{theme_input} results, success story visualization',
            'review1': human_reviews[0],
            'review2': human_reviews[1],
            'review3': human_reviews[2],
            'favicon': f'{theme_input} icon symbol, simple minimalist logo'
        }


# –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
class ThematicImageGenerator:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º"""
    
    def __init__(self, silent_mode=False):
        self.silent_mode = silent_mode
        self.base_generator = ImageGenerator(silent_mode=silent_mode)
    
    def generate_single_image(self, prompt, image_name, output_dir):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–µ–π"""
        enhanced_prompt = self.base_generator._add_randomization(prompt, image_name)
        return self.base_generator._generate_image_pollinations_aggressive(enhanced_prompt, image_name, output_dir)
    
    def get_theme_prompts(self, theme_input):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ç–µ–º–∞—Ç–∏–∫–∏ —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ª—é–¥—å–º–∏ –¥–ª—è review"""
        prompts, theme_data = self.base_generator._generate_prompts(theme_input)
        return [
            prompts.get('main', f'professional {theme_input} service'),
            prompts.get('about1', f'quality {theme_input} business'),
            prompts.get('about2', f'modern {theme_input} company'),
            prompts.get('about3', f'expert {theme_input} team'),
            prompts.get('review1', 'portrait photo of happy customer, smiling person, HUMAN FACE ONLY, civilian clothes'),
            prompts.get('review2', 'portrait photo of satisfied client, pleased woman, PERSON ONLY, natural smile'),
            prompts.get('review3', 'portrait photo of grateful customer, joyful man, HUMAN ONLY, positive expression'),
            prompts.get('favicon', f'{theme_input} icon symbol')
        ] 