"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ª–µ–Ω–¥–∏–Ω–≥–æ–≤
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¢–û–õ–¨–ö–û Pollinations API –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Linux
"""

import os
import random
import time
import requests
from urllib.parse import quote
from PIL import Image
from io import BytesIO
from pathlib import Path
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
import warnings
warnings.filterwarnings('ignore', category=requests.packages.urllib3.exceptions.InsecureRequestWarning)

class ImageGenerator:
    """–ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ Pollinations API"""
    
    def __init__(self, silent_mode=False, simple_mode=True, use_real_images=False, fast_mode=True, max_workers=3):
        self.silent_mode = silent_mode
        self.simple_mode = simple_mode  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º
        self.use_real_images = use_real_images  # –ù–æ–≤–∞—è –æ–ø—Ü–∏—è: –ø–æ–∏—Å–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.fast_mode = fast_mode  # –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º Pollinations (–º–µ–Ω—å—à–µ –ø–æ–ø—ã—Ç–æ–∫/—Ä–∞–∑–º–µ—Ä)
        self.max_workers = max(1, int(max_workers))
        self._retry_total = 3 if fast_mode else 5
        self._backoff_factor = 0.5 if fast_mode else 1
        
        if not self.silent_mode:
            mode_text = "–ü–†–û–°–¢–û–ô –†–ï–ñ–ò–ú" if simple_mode else "–°–õ–û–ñ–ù–´–ô –†–ï–ñ–ò–ú"
            source_text = "–ü–û–ò–°–ö –†–ï–ê–õ–¨–ù–´–• –§–û–¢–û" if use_real_images else "AI-–ì–ï–ù–ï–†–ê–¶–ò–Ø"
            speed_text = "–ë–´–°–¢–†–´–ô" if fast_mode else "–°–¢–ê–ù–î–ê–†–¢"
            print(f"üé® ImageGenerator - {mode_text}, {source_text}, {speed_text}, –¢–û–õ–¨–ö–û Pollinations API!")
    
    def set_simple_mode(self, simple_mode=True):
        """
        –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤
        
        Args:
            simple_mode (bool): True –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤, False –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö
        """
        self.simple_mode = simple_mode
        if not self.silent_mode:
            mode_text = "–ü–†–û–°–¢–û–ô –†–ï–ñ–ò–ú" if simple_mode else "–°–õ–û–ñ–ù–´–ô –†–ï–ñ–ò–ú"
            print(f"üîß –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞: {mode_text}")
    
    def get_current_mode(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        return "simple" if self.simple_mode else "complex"
    
    def set_real_images_mode(self, use_real_images=True):
        """
        –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        
        Args:
            use_real_images (bool): True –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ, False –¥–ª—è AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        """
        self.use_real_images = use_real_images
        if not self.silent_mode:
            source_text = "–ü–û–ò–°–ö –†–ï–ê–õ–¨–ù–´–• –§–û–¢–û" if use_real_images else "AI-–ì–ï–ù–ï–†–ê–¶–ò–Ø"
            print(f"üîß –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞: {source_text}")
    
    def get_current_image_source(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        return "real_search" if self.use_real_images else "ai_generation"
    
    def generate_thematic_set(self, theme_input, media_dir, method="1", progress_callback=None, use_simple_prompts=None):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Pollinations API
        –ò–õ–ò –∏—â–µ—Ç –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –†–ï–ê–õ–¨–ù–´–ï —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        
        –ù–û–í–´–ô –í–´–ë–û–†:
        - use_real_images=False: AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
        - use_real_images=True: –ü–æ–∏—Å–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ (–∫–∞–∫ Pinterest, –Ω–æ –ª—É—á—à–µ!)
        
        Args:
            theme_input (str): –¢–µ–º–∞—Ç–∏–∫–∞ 
            media_dir (str): –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ media
            method (str): –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            progress_callback (callable): –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
            use_simple_prompts (bool): –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–º–ø—Ç—ã (–µ—Å–ª–∏ None, —Ç–æ –∏–∑ self.simple_mode)
            
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        """
        
        # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –≤—ã–±–æ—Ä –º–µ–∂–¥—É AI –∏ –ø–æ–∏—Å–∫–æ–º —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ
        if self.use_real_images:
            if not self.silent_mode:
                print(f"üîç –ü–û–ò–°–ö –†–ï–ê–õ–¨–ù–´–• –§–û–¢–û–ì–†–ê–§–ò–ô –ø–æ —Ç–µ–º–µ: {theme_input}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–º–µ—Å—Ç–æ AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            try:
                from generators.image_search_downloader import ImageSearchDownloader
                searcher = ImageSearchDownloader(silent_mode=self.silent_mode)
                return searcher.search_and_download_thematic_set(theme_input, media_dir, progress_callback)
            except Exception as e:
                if not self.silent_mode:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
                    print("üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞–∫ fallback...")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∫–∞–∫ fallback
        
        # –û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Pollinations
        if not self.silent_mode:
            print(f"üé® AI-–ì–ï–ù–ï–†–ê–¶–ò–Ø (–∫–∞–∫ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è): –ö–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ —Ä–∞–∑–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è {theme_input}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        try:
            os.makedirs(media_dir, exist_ok=True)
            if not self.silent_mode:
                print(f"üìÅ –ü–∞–ø–∫–∞ media —Å–æ–∑–¥–∞–Ω–∞: {media_dir}")
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ media: {e}")
            return 0
        
        image_names = ['main', 'about1', 'about2', 'about3', 'review1', 'review2', 'review3', 'favicon']
        # –ü–æ–∑–≤–æ–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –Ω–∞–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –±–µ–Ω—á–º–∞—Ä–∫–∞
        try:
            img_limit = int(os.getenv('IMG_LIMIT', '0') or '0')
            if img_limit > 0:
                image_names = image_names[:img_limit]
        except Exception:
            pass
        generated_count = 0
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–º–ø—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π  
        if use_simple_prompts is None:
            use_simple_prompts = self.simple_mode
            
        if use_simple_prompts:
            tematic_prompts, theme_data = self._generate_simple_prompts(theme_input)
        else:
            tematic_prompts, theme_data = self._generate_prompts(theme_input)
        
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ—Ç–æ–∫–æ–≤)
        from concurrent.futures import ThreadPoolExecutor, as_completed

        def build_prompt_for_image(image_name):
            if image_name in ["review1", "review2", "review3"]:
                if not self.silent_mode:
                    print(f"üî• {image_name}: –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –ª–∏—Ü")
                try:
                    from generators.prompt_generator import create_human_focused_review_prompts
                    human_reviews = create_human_focused_review_prompts()
                    review_index = int(image_name[-1]) - 1
                    base_prompt = human_reviews[review_index]
                except Exception:
                    base_prompt = "happy customer portrait"
            elif image_name == "favicon":
                base_prompt = f"{theme_input} simple icon logo, minimalist business symbol"
            else:
                base_prompt = tematic_prompts.get(image_name, f'professional {theme_input} service')
            # –†–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—è (–∫–æ—Ä–æ—Ç–∫–∞—è –≤ –±—ã—Å—Ç—Ä–æ–º —Ä–µ–∂–∏–º–µ)
            if self.fast_mode:
                return self._add_simple_randomization(base_prompt, image_name)
            return self._add_randomization(base_prompt, image_name)

        def generate_one(image_name, index):
            from time import perf_counter
            start_ts = perf_counter()
            if progress_callback:
                progress_callback(f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {image_name} ({index}/8)...")
            if not self.silent_mode:
                print(f"üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {image_name} ({index}/8)...")
            prompt = build_prompt_for_image(image_name)
            if self.fast_mode:
                result = self._generate_image_pollinations_simple(prompt, image_name, media_dir)
            else:
                result = self._generate_image_pollinations_aggressive(prompt, image_name, media_dir)
            elapsed = perf_counter() - start_ts
            if not self.silent_mode:
                print(f"‚è±Ô∏è {image_name}: {elapsed:.2f}s")
            return (image_name, result, elapsed)

        with ThreadPoolExecutor(max_workers=self.max_workers if not self.use_real_images else 1) as executor:
            futures = {executor.submit(generate_one, name, i+1): name for i, name in enumerate(image_names)}
            completed = 0
            total_elapsed = 0.0
            for future in as_completed(futures):
                image_name = futures[future]
                try:
                    name, result, elapsed = future.result()
                    total_elapsed += (elapsed or 0)
                    if result:
                        generated_count += 1
                        if not self.silent_mode:
                            print(f"‚úÖ {name}: –≥–æ—Ç–æ–≤–æ –∑–∞ {elapsed:.2f}s")
                    else:
                        if not self.silent_mode:
                            print(f"‚ùå {name}: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å")
                except Exception as e:
                    if not self.silent_mode:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ {image_name}: {e}")
                completed += 1
                if progress_callback:
                    progress_callback(f"üìà –ì–æ—Ç–æ–≤–æ {completed}/8 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            if not self.silent_mode:
                print(f"‚è±Ô∏è –°—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ—Ç–æ–∫–æ–≤ (–±–µ–∑ —É—á—ë—Ç–∞ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞): {total_elapsed:.2f}s")
        
        if not self.silent_mode:
            source_text = "–†–ï–ê–õ–¨–ù–´–• –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π" if self.use_real_images else "AI-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
            print(f"üéØ –°–æ–∑–¥–∞–Ω–æ {generated_count}/8 {source_text}")
        
        return generated_count
    
    def _generate_image_pollinations_aggressive(self, prompt, image_name, media_dir):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ Pollinations API —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—é –∫ –ø—Ä–æ–º–ø—Ç—É
        enhanced_prompt = self._add_randomization(prompt, image_name)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if image_name == 'favicon':
            target_size_kb = 50
            output_path = Path(media_dir) / f"{image_name}.png"
            api_params = "?width=512&height=512&model=flux&enhance=false&nologo=true"
        else:
            target_size_kb = 150 if not self.fast_mode else 120
            output_path = Path(media_dir) / f"{image_name}.jpg"
            if self.fast_mode:
                api_params = "?width=832&height=512&model=flux&enhance=false&nologo=true"
            else:
                api_params = "?width=1024&height=768&model=flux&enhance=true&nologo=true"
        
        # Pollinations API URL
        api_url = f"https://image.pollinations.ai/prompt/{quote(enhanced_prompt)}{api_params}"
        
        if not self.silent_mode:
            print(f"üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Pollinations API: {enhanced_prompt[:50]}...")
        
        # –°–æ–∑–¥–∞–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        session = self._create_aggressive_session()
        
        # –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        attempts = 2 if self.fast_mode else 3
        for attempt in range(attempts):
            if not self.silent_mode:
                print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3...")
            
            try:
                # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã
                timeout_cfg = (10, 30) if self.fast_mode else (15, 60)
                response = session.get(api_url, timeout=timeout_cfg, stream=True)
                
                if not self.silent_mode:
                    print(f"üìä Pollinations API: –∫–æ–¥ {response.status_code}")
                
                if response.status_code == 200:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    image_data = response.content
                    
                    if len(image_data) > 1000:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ PIL Image
                        image = Image.open(BytesIO(image_data))
                        
                        if not self.silent_mode:
                            print(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {image.size}")
                
                        # –î–ª—è —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏ –¥–µ–ª–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
                        if image_name == 'favicon':
                            image = self._make_favicon_transparent(image)
                        
                        # –°–∂–∏–º–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                        if self._save_compressed_image(image, str(output_path), target_size_kb=target_size_kb):
                            if not self.silent_mode:
                                final_size_kb = output_path.stat().st_size / 1024
                                print(f"‚úÖ {image_name}: –°–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ Pollinations API ({final_size_kb:.1f}–∫–±)")
                            return str(output_path)
                    else:
                        if not self.silent_mode:
                            print(f"‚ö†Ô∏è Pollinations API: –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª ({len(image_data)} –±–∞–π—Ç)")
                
                elif response.status_code == 429:
                    if not self.silent_mode:
                        print(f"‚è∞ Pollinations API: –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –∫–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞...")
                    time.sleep(4 if self.fast_mode else 10)
                    continue
                
                elif response.status_code == 500:
                    if not self.silent_mode:
                        print(f"üîß Pollinations API: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –ø–∞—É–∑–∞ 5 —Å–µ–∫...")
                    time.sleep(5)
                    continue
                
                else:
                    if not self.silent_mode:
                        print(f"‚ùå Pollinations API: –û—à–∏–±–∫–∞ {response.status_code}")
                
            except requests.exceptions.Timeout:
                if not self.silent_mode:
                    print(f"‚è∞ Pollinations API: –¢–∞–π–º–∞—É—Ç, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑...")
                time.sleep(2)
                continue
                
            except requests.exceptions.ConnectionError as e:
                if not self.silent_mode:
                    print(f"üîå Pollinations API: –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑...")
                time.sleep(3)
                continue
            
            except Exception as e:
                if not self.silent_mode:
                    print(f"‚ö†Ô∏è Pollinations API: {str(e)[:100]}...")
                time.sleep(2)
                continue
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å
        if not self.silent_mode:
            print(f"‚ùå Pollinations API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è {image_name} –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫")
        return None
    
    def _generate_image_pollinations_simple(self, prompt, image_name, media_dir):
        """–£–ü–†–û–©–ï–ù–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —á–µ—Ç–∫–∏–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ü–†–û–°–¢–£–Æ —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—é –≤–º–µ—Å—Ç–æ —Å–ª–æ–∂–Ω–æ–π
        enhanced_prompt = self._add_simple_randomization(prompt, image_name)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if image_name == 'favicon':
            target_size_kb = 50
            output_path = Path(media_dir) / f"{image_name}.png"
            api_params = "?width=512&height=512&model=flux&enhance=false&nologo=true"
        else:
            target_size_kb = 150
            output_path = Path(media_dir) / f"{image_name}.jpg"
            api_params = "?width=1024&height=768&model=flux&enhance=false&nologo=true"
        
        # Pollinations API URL —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
        api_url = f"https://image.pollinations.ai/prompt/{quote(enhanced_prompt)}{api_params}"
        
        if not self.silent_mode:
            print(f"üåê –ü–†–û–°–¢–û–ô –∑–∞–ø—Ä–æ—Å –∫ Pollinations API: {enhanced_prompt}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        session = self._create_aggressive_session()
        
        # –ü—Ä–æ–±—É–µ–º 2 —Ä–∞–∑–∞ –≤–º–µ—Å—Ç–æ 3 (–±—ã—Å—Ç—Ä–µ–µ)
        for attempt in range(2):
            if not self.silent_mode:
                print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/2...")
            
            try:
                response = session.get(api_url, timeout=(10, 30), stream=True)
                
                if not self.silent_mode:
                    print(f"üìä Pollinations API: –∫–æ–¥ {response.status_code}")
                
                if response.status_code == 200:
                    image_data = response.content
                    
                    if len(image_data) > 1000:
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ PIL Image
                        image = Image.open(BytesIO(image_data))
                        
                        if not self.silent_mode:
                            print(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {image.size}")
                
                        # –î–ª—è —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏ –¥–µ–ª–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
                        if image_name == 'favicon':
                            image = self._make_favicon_transparent(image)
                        
                        # –°–∂–∏–º–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                        if self._save_compressed_image(image, str(output_path), target_size_kb=target_size_kb):
                            if not self.silent_mode:
                                final_size_kb = output_path.stat().st_size / 1024
                                print(f"‚úÖ {image_name}: –ü–†–û–°–¢–û–ô –º–µ—Ç–æ–¥ —É—Å–ø–µ—à–µ–Ω ({final_size_kb:.1f}–∫–±)")
                            return str(output_path)
                    else:
                        if not self.silent_mode:
                            print(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª ({len(image_data)} –±–∞–π—Ç)")
                
                elif response.status_code == 429:
                    if not self.silent_mode:
                        print(f"‚è∞ –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–∞—É–∑–∞ 5 —Å–µ–∫...")
                    time.sleep(5)
                    continue
                
                else:
                    if not self.silent_mode:
                        print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}")
                
            except Exception as e:
                if not self.silent_mode:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)[:50]}...")
                time.sleep(1)
                continue
        
        if not self.silent_mode:
            print(f"‚ùå –ü–†–û–°–¢–û–ô –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è {image_name} –ø–æ—Å–ª–µ 2 –ø–æ–ø—ã—Ç–æ–∫")
        return None
    
    def _create_aggressive_session(self):
        """–°–æ–∑–¥–∞–µ—Ç –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Linux"""
        session = requests.Session()
        
        # –û–¢–ö–õ–Æ–ß–ê–ï–ú SSL –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        session.verify = False
        
        # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è retry —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
        retry_strategy = Retry(
            total=self._retry_total,
            backoff_factor=self._backoff_factor,
            status_forcelist=[429, 500, 502, 503, 504],
            allowed_methods=["HEAD", "GET", "OPTIONS"],
            raise_on_status=False
        )
        
        adapter = HTTPAdapter(max_retries=retry_strategy, pool_connections=20, pool_maxsize=20)
        session.mount("https://", adapter)
        session.mount("http://", adapter)
        
        # –¢–û–ß–ù–û —Ç–∞–∫–∏–µ –∂–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–∞–∫ curl (curl —Ä–∞–±–æ—Ç–∞–µ—Ç!)
        session.headers.update({
            'User-Agent': 'curl/8.5.0',
            'Accept': '*/*',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive'
        })
        
        return session
    
    def _add_randomization(self, prompt, image_name):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø—Ä–æ–º–ø—Ç—É –ë–ï–ó –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º–∞—Ç–∏–∫–∏"""
        import hashlib
        import uuid
        
        # –°–û–•–†–ê–ù–Ø–ï–ú –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –ü–†–û–ú–ü–¢! –≠—Ç–æ –æ—Å–Ω–æ–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        base_prompt = prompt
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        unique_id = str(uuid.uuid4())[:8]
        timestamp = int(time.time() * 1000) % 100000
        
        # –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        quality_terms = [
            "high quality", "professional", "4k", "detailed", "sharp", 
            "crisp", "well-lit", "premium", "photorealistic", "studio quality"
        ]
        
        # –°—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
        style_terms = [
            "contemporary", "elegant", "sophisticated", "polished", 
            "refined", "modern", "sleek", "premium"
        ]
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
        technical_terms = [
            "perfect lighting", "excellent composition", "vibrant colors",
            "commercial photography", "professional grade", "award winning"
        ]
        
        # –°–æ–±–∏—Ä–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        enhanced_prompt = base_prompt
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã (2-3 —à—Ç—É–∫–∏)
        selected_quality = random.sample(quality_terms, random.randint(2, 3))
        enhanced_prompt += f", {', '.join(selected_quality)}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã (1-2 —à—Ç—É–∫–∏)  
        selected_style = random.sample(style_terms, random.randint(1, 2))
        enhanced_prompt += f", {', '.join(selected_style)}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ (1 —à—Ç—É–∫–∞)
        selected_technical = random.choice(technical_terms)
        enhanced_prompt += f", {selected_technical}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        hash_source = f"{unique_id}_{timestamp}_{image_name}_{random.randint(1000, 9999)}"
        unique_hash = hashlib.md5(hash_source.encode()).hexdigest()[:8]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        enhanced_prompt += f", unique_{unique_hash}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        enhanced_prompt += f", render_{timestamp}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –¥–ª—è —Ç–∏–ø–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç
        type_modifiers = {
            "main": "hero image",
            "about1": "process shot", 
            "about2": "service demo",
            "about3": "team work",
            "review1": "customer A",
            "review2": "customer B", 
            "review3": "customer C",
            "favicon": "icon style"
        }
        
        modifier = type_modifiers.get(image_name, "custom")
        enhanced_prompt += f", {modifier}_{unique_hash}"
        
        if not self.silent_mode:
            print(f"üéØ –ü—Ä–æ–º–ø—Ç –¥–ª—è {image_name}: {enhanced_prompt}")
        
        return enhanced_prompt
    
    def _add_simple_randomization(self, prompt, image_name):
        """–£–ü–†–û–©–ï–ù–ù–´–ô –º–µ—Ç–æ–¥: —Å–æ–∑–¥–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ —á–µ—Ç–∫–∏–µ –ø—Ä–æ–º–ø—Ç—ã –ë–ï–ó –º—É—Å–æ—Ä–∞"""
        import time
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∫–∞–∫ –æ—Å–Ω–æ–≤—É
        base_prompt = prompt
        
        # –¢–æ–ª—å–∫–æ –û–î–ò–ù –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ—Ä–º–∏–Ω (–Ω–µ 3-5!)
        quality_terms = ["professional", "high quality", "modern", "expert"]
        quality = random.choice(quality_terms)
        
        # –¢–æ–ª—å–∫–æ –û–î–ò–ù —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω (–Ω–µ 2-3!)
        style_terms = ["clean", "elegant", "contemporary", "polished"]  
        style = random.choice(style_terms)
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å (—Ç–æ–ª—å–∫–æ 4 —Å–∏–º–≤–æ–ª–∞)
        timestamp = str(int(time.time()))[-4:]
        
        # –ö–û–†–û–¢–ö–ò–ô –ø—Ä–æ–º–ø—Ç: –±–∞–∑–æ–≤—ã–π + 1 –∫–∞—á–µ—Å—Ç–≤–æ + 1 —Å—Ç–∏–ª—å + –º–µ—Ç–∫–∞
        simple_prompt = f"{base_prompt}, {quality}, {style}, shot_{timestamp}"
        
        if not self.silent_mode:
            print(f"üéØ –ü–†–û–°–¢–û–ô –ø—Ä–æ–º–ø—Ç –¥–ª—è {image_name}: {simple_prompt}")
        
        return simple_prompt
    
    def _make_favicon_transparent(self, image):
        """–î–µ–ª–∞–µ—Ç —Ñ–∞–≤–∏–∫–æ–Ω–∫—É —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –¥–ª—è –∏–∫–æ–Ω–∫–∏"""
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ RGBA –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
            if image.mode != 'RGBA':
                image = image.convert('RGBA')
            
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ 512x512 –¥–ª—è —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏
            image = image.resize((512, 512), Image.Resampling.LANCZOS)
            
            # –ù–û–í–û–ï: –ü–æ–ø—ã—Ç–∫–∞ —É–ª—É—á—à–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å –¥–ª—è –∏–∫–æ–Ω–æ–∫
            try:
                from PIL import ImageEnhance
                # –£—Å–∏–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å –¥–ª—è —á–µ—Ç–∫–æ—Å—Ç–∏ –∏–∫–æ–Ω–∫–∏
                enhancer = ImageEnhance.Contrast(image)
                image = enhancer.enhance(1.2)  # –ù–µ–±–æ–ª—å—à–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
                
                # –£—Å–∏–ª–∏–≤–∞–µ–º —Ä–µ–∑–∫–æ—Å—Ç—å –¥–ª—è —á–µ—Ç–∫–æ—Å—Ç–∏ –¥–µ—Ç–∞–ª–µ–π
                sharpness_enhancer = ImageEnhance.Sharpness(image)
                image = sharpness_enhancer.enhance(1.1)  # –ù–µ–±–æ–ª—å—à–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–µ–∑–∫–æ—Å—Ç–∏
            except:
                pass  # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —É–ª—É—á—à–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
            
            return image
            
        except Exception:
            return image
    
    def _save_compressed_image(self, image, filepath, target_size_kb=150):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω—É–∂–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
            if filepath.endswith('.png'):
                format_type = 'PNG'
                # –î–ª—è PNG –¥–µ–ª–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
                image.save(filepath, format=format_type, optimize=True)
            else:
                format_type = 'JPEG'
                if getattr(self, 'fast_mode', False):
                    # –ë—ã—Å—Ç—Ä—ã–π –æ–¥–Ω–æ–ø—Ä–æ—Ö–æ–¥–Ω—ã–π —Å–µ–π–≤
                    q = 70
                    image.save(filepath, format=format_type, quality=q, optimize=True)
                else:
                    # –î–ª—è JPEG –ø–æ–¥–±–∏—Ä–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
                    for q in [85, 75, 65, 55, 45]:
                        image.save(filepath, format=format_type, quality=q, optimize=True)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                        file_size_kb = os.path.getsize(filepath) / 1024
                        if file_size_kb <= target_size_kb:
                            break
            
            return True
                
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False

    def _generate_prompts(self, theme_input):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ª—é–¥—å–º–∏ –¥–ª—è review
            from generators.prompt_generator import create_complete_prompts_dict
            
            prompts = create_complete_prompts_dict(theme_input)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã –∏ –¥–∞–Ω–Ω—ã–µ —Ç–µ–º—ã
            return prompts, {'theme': theme_input}
            
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤: {e}")
            return self._generate_fallback_prompts(theme_input), {'theme': theme_input}
    
    def _generate_fallback_prompts(self, theme_input):
        """–†–µ–∑–µ—Ä–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ª—é–¥—å–º–∏ –¥–ª—è review"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ review –ø—Ä–æ–º–ø—Ç—ã –¥–∞–∂–µ –¥–ª—è fallback
        try:
            from generators.prompt_generator import create_human_focused_review_prompts
            human_reviews = create_human_focused_review_prompts()
        except:
            # –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π fallback —Å –ø—Ä—è–º—ã–º–∏ human-–ø—Ä–æ–º–ø—Ç–∞–º–∏
            human_reviews = [
                "portrait photo of happy customer, smiling person, HUMAN FACE ONLY, civilian clothes, testimonial portrait",
                "portrait photo of satisfied client, pleased woman, PERSON ONLY, natural smile, customer review photo", 
                "portrait photo of grateful customer, joyful man, HUMAN ONLY, positive expression, headshot style"
            ]
        
        return {
            'main': f'professional {theme_input} service, modern website hero image',
            'about1': f'{theme_input} team at work, professional office environment',
            'about2': f'{theme_input} process, step by step workflow',
            'about3': f'{theme_input} results, success story visualization',
            'review1': human_reviews[0],
            'review2': human_reviews[1],
            'review3': human_reviews[2],
            'favicon': f'{theme_input} icon symbol, simple minimalist logo'
        }

    def _generate_simple_prompts(self, theme_input):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ü–†–û–°–¢–´–ï –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã –ë–ï–ó —Å–ª–æ–∂–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        
        # –ü—Ä–æ—Å—Ç—ã–µ –ø–æ–Ω—è—Ç–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        simple_prompts = {
            'main': f'{theme_input} business, modern office building',
            'about1': f'{theme_input} professional team at work',
            'about2': f'{theme_input} service process, modern workplace',
            'about3': f'{theme_input} quality tools and equipment',
            'favicon': f'{theme_input} simple icon logo'
        }
        
        # –î–õ–Ø REVIEW –ò–°–ü–û–õ–¨–ó–£–ï–ú –°–õ–û–ñ–ù–£–Æ –°–ò–°–¢–ï–ú–£ –î–ê–ñ–ï –í –ü–†–û–°–¢–û–ú –†–ï–ñ–ò–ú–ï!
        if not self.silent_mode:
            print(f"üî• –ü–†–û–°–¢–û–ô –†–ï–ñ–ò–ú: –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ª–∏—Ü –¥–ª—è review!")
        
        try:
            from generators.prompt_generator import create_human_focused_review_prompts
            human_reviews = create_human_focused_review_prompts()
            
            simple_prompts.update({
                'review1': human_reviews[0],  # –ó–∞–ø–∞–¥–Ω—ã–π/–ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–π —Ç–∏–ø
                'review2': human_reviews[1],  # –ê–∑–∏–∞—Ç—Å–∫–∏–π/–í–æ—Å—Ç–æ—á–Ω—ã–π —Ç–∏–ø  
                'review3': human_reviews[2]   # –ê—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∏–π/–õ–∞—Ç–∏–Ω–æ–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π —Ç–∏–ø
            })
            
            if not self.silent_mode:
                print(f"‚úÖ –ü–†–û–°–¢–û–ô –†–ï–ñ–ò–ú: –ü–æ–ª—É—á–µ–Ω—ã —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è review!")
                
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ö†Ô∏è –ü–†–û–°–¢–û–ô –†–ï–ñ–ò–ú: –û—à–∏–±–∫–∞ —Å–ª–æ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã ({e}), –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            
            # Fallback –∫ –ø—Ä–æ—Å—Ç—ã–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º –ø—Ä–æ–º–ø—Ç–∞–º
            simple_prompts.update({
                'review1': 'happy customer portrait, smiling person',
                'review2': 'satisfied client photo, pleased woman smiling',
                'review3': 'grateful customer headshot, joyful man'
            })
        
        if not self.silent_mode:
            print(f"üéØ –ü–†–û–°–¢–´–ï –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã –≥–æ—Ç–æ–≤—ã –¥–ª—è: {theme_input}")
        
        return simple_prompts, {'theme': theme_input}


# –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
class ThematicImageGenerator:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º"""
    
    def __init__(self, silent_mode=False):
        self.silent_mode = silent_mode
        self.base_generator = ImageGenerator(silent_mode=silent_mode)
    
    def generate_single_image(self, prompt, image_name, output_dir):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–µ–π"""
        enhanced_prompt = self.base_generator._add_randomization(prompt, image_name)
        return self.base_generator._generate_image_pollinations_aggressive(enhanced_prompt, image_name, output_dir)
    
    def get_theme_prompts(self, theme_input):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ç–µ–º–∞—Ç–∏–∫–∏ —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ª—é–¥—å–º–∏ –¥–ª—è review"""
        prompts, theme_data = self.base_generator._generate_prompts(theme_input)
        
        # –¢–µ–ø–µ—Ä—å _generate_prompts —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è review,
        # –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö –±–µ–∑ fallback
        return [
            prompts.get('main', f'professional {theme_input} service'),
            prompts.get('about1', f'quality {theme_input} business'),
            prompts.get('about2', f'modern {theme_input} company'),
            prompts.get('about3', f'expert {theme_input} team'),
            prompts.get('review1', 'portrait photo of happy customer, smiling person, HUMAN FACE ONLY, civilian clothes'),  # Fallback –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
            prompts.get('review2', 'portrait photo of satisfied client, pleased woman, PERSON ONLY, natural smile'),        # Fallback –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
            prompts.get('review3', 'portrait photo of grateful customer, joyful man, HUMAN ONLY, positive expression'),     # Fallback –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
            prompts.get('favicon', f'{theme_input} icon symbol')
        ] 