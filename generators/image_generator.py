"""
–û—Å–Ω–æ–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –∫–æ–¥ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤ –∏ —Ñ–∞–≤–∏–∫–æ–Ω–æ–∫
"""

import requests
import datetime
import os
from PIL import Image, ImageDraw, ImageFilter, ImageEnhance
from io import BytesIO
import json
import time
import random
import uuid
import re
from urllib.parse import quote
from pathlib import Path

class ImageGenerator:
    """–ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    def __init__(self, silent_mode=False, use_icons8_for_favicons=True):
        self.silent_mode = silent_mode
        self.use_icons8_for_favicons = use_icons8_for_favicons  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        
        if not self.silent_mode:
            print("üé® ImageGenerator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –ø—Ä–æ–º–ø—Ç–æ–≤")
    
    def generate_thematic_set(self, theme_input, media_dir, method="1", progress_callback=None):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        
        Args:
            theme_input (str): –¢–µ–º–∞—Ç–∏–∫–∞ 
            media_dir (str): –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ media
            method (str): –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            progress_callback (callable): –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
            
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        """
        if not self.silent_mode:
            print(f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è: {theme_input}")
        
        # –ü–æ–ª—É—á–∞–µ–º —É–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
        prompts, theme_data = self._generate_prompts(theme_input)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        os.makedirs(media_dir, exist_ok=True)
        
        image_names = ['main', 'about1', 'about2', 'about3', 'review1', 'review2', 'review3', 'favicon']
        generated_count = 0
        
        for i, image_name in enumerate(image_names):
            if progress_callback:
                progress_callback(f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {image_name} ({i+1}/8)...")
            
            try:
                if image_name == 'favicon':
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–≤–∏–∫–æ–Ω —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
                    result = self._generate_favicon_simple(theme_input, media_dir)
                else:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—ã—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    prompt = prompts.get(image_name, f'professional {theme_input} service')
                    result = self._generate_image_via_pollinations(
                        prompt, 
                        image_name, 
                        media_dir
                    )
                
                if result:
                    generated_count += 1
                    if not self.silent_mode:
                        print(f"‚úÖ {image_name}: –°–æ–∑–¥–∞–Ω–æ")
                else:
                    if not self.silent_mode:
                        print(f"‚ùå {image_name}: –û—à–∏–±–∫–∞")
                        
            except Exception as e:
                if not self.silent_mode:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {image_name}: {e}")
        
        if not self.silent_mode:
            print(f"üéØ –°–æ–∑–¥–∞–Ω–æ {generated_count}/8 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        return generated_count
    
    def _generate_favicon_simple(self, theme, media_dir):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∞–≤–∏–∫–æ–Ω —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä"""
        try:
            from generators.simple_thematic_favicon import generate_simple_thematic_favicon
            
            output_path = os.path.join(media_dir, "favicon.png")
            success = generate_simple_thematic_favicon(theme, output_path, silent_mode=self.silent_mode)
            
            return output_path if success else None
            
        except ImportError:
            if not self.silent_mode:
                print("‚ö†Ô∏è –ü—Ä–æ—Å—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ñ–∞–≤–∏–∫–æ–Ω–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º Pollinations")
            return self._generate_image_via_pollinations(f"{theme} icon symbol", 'favicon', media_dir)
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Ñ–∞–≤–∏–∫–æ–Ω–æ–∫: {e}")
            return self._generate_image_via_pollinations(f"{theme} icon symbol", 'favicon', media_dir)
    
    def _generate_image_via_pollinations(self, prompt, image_name, media_dir):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π API —Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ–º"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—é –∫ –ø—Ä–æ–º–ø—Ç—É
            enhanced_prompt = self._add_randomization(prompt, image_name)
            
            # API Pollinations
            api_url = "https://image.pollinations.ai/prompt/"
            full_prompt = f"{enhanced_prompt}, high quality, professional"
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if image_name == 'favicon':
                params = "?width=512&height=512&model=flux"
                target_size_kb = 50  # –§–∞–≤–∏–∫–æ–Ω—ã –¥–æ 50–∫–±
                output_path = Path(media_dir) / f"{image_name}.png"  # PNG –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
            else:
                params = "?width=1024&height=768&model=flux"
                target_size_kb = 150  # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ 150–∫–±
                output_path = Path(media_dir) / f"{image_name}.jpg"  # JPEG –¥–ª—è –ª—É—á—à–µ–≥–æ —Å–∂–∞—Ç–∏—è
            
            url = f"{api_url}{quote(full_prompt)}{params}"
            
            response = requests.get(url, timeout=30)
            if response.status_code == 200:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ PIL Image –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                image = Image.open(BytesIO(response.content))
                
                # –û–±—Ä–µ–∑–∞–µ–º –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫
                cropped_image = self._remove_pollinations_watermark_from_image(image)
                
                # –î–ª—è —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏ –¥–µ–ª–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
                if image_name == 'favicon':
                    cropped_image = self._make_favicon_transparent(cropped_image)
                
                # –°–∂–∏–º–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Ä–∞–∑–º–µ—Ä–∞
                if self._save_compressed_image(cropped_image, str(output_path), target_size_kb=target_size_kb):
                    if not self.silent_mode:
                        final_size_kb = output_path.stat().st_size / 1024
                        print(f"üé® {image_name}: –°–æ–∑–¥–∞–Ω–æ –∏ —Å–∂–∞—Ç–æ –¥–æ {final_size_kb:.1f}–∫–±")
                    return str(output_path)
                else:
                    if not self.silent_mode:
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å {image_name}")
            
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {image_name}: {e}")
        
        return None
    
    def _add_randomization(self, prompt, image_name):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—é –∫ –ø—Ä–æ–º–ø—Ç—É"""
        import random
        
        if image_name == 'favicon':
            # –°—Ç–∏–ª–∏ –¥–ª—è —Ñ–∞–≤–∏–∫–æ–Ω–æ–≤
            favicon_styles = [
                "flat design", "minimal design", "geometric design", "simple icon",
                "clean symbol", "modern icon", "vector style", "logo style"
            ]
            
            favicon_colors = [
                "bold colors", "single color", "duo-tone", "monochrome",
                "bright accent", "professional colors"
            ]
            
            selected_style = random.choice(favicon_styles)
            selected_color = random.choice(favicon_colors)
            
            return f"{prompt}, {selected_style}, {selected_color}, icon, symbol"
        else:
            # –°—Ç–∏–ª–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            styles = [
                "professional", "modern", "clean", "elegant", "minimalist",
                "sophisticated", "premium", "high-quality", "detailed"
            ]
            
            colors = [
                "vibrant colors", "soft colors", "natural tones", "warm palette",
                "cool tones", "balanced colors", "harmonious colors"
            ]
            
            composition = [
                "well-composed", "balanced composition", "dynamic composition",
                "centered composition", "artistic composition"
            ]
            
            selected_style = random.choice(styles)
            selected_color = random.choice(colors) 
            selected_comp = random.choice(composition)
            
            return f"{prompt}, {selected_style}, {selected_color}, {selected_comp}, photorealistic"
    
    def _make_favicon_transparent(self, image):
        """–î–µ–ª–∞–µ—Ç —Ñ–æ–Ω —Ñ–∞–≤–∏–∫–æ–Ω–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGBA –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if image.mode != 'RGBA':
                image = image.convert('RGBA')
            
            # –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º —É–¥–∞–ª–µ–Ω–∏—è –±–µ–ª–æ–≥–æ —Ñ–æ–Ω–∞
            data = image.getdata()
            new_data = []
            
            for item in data:
                # –ï—Å–ª–∏ –ø–∏–∫—Å–µ–ª—å –±–µ–ª—ã–π –∏–ª–∏ –±–ª–∏–∑–∫–∏–π –∫ –±–µ–ª–æ–º—É - –¥–µ–ª–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º
                if item[0] > 240 and item[1] > 240 and item[2] > 240:
                    new_data.append((255, 255, 255, 0))  # –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
                else:
                    new_data.append(item)
            
            image.putdata(new_data)
            
            if not self.silent_mode:
                print("üîç –§–æ–Ω —Ñ–∞–≤–∏–∫–æ–Ω–∞ —Å–¥–µ–ª–∞–Ω –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º")
            
            return image
            
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏: {e}")
            return image
    
    def _save_compressed_image(self, image, filepath, target_size_kb=150):
        """–£–õ–£–ß–®–ï–ù–ù–û–ï —Å–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–∞—á–µ—Å—Ç–≤–∞"""
        try:
            from PIL import Image
            import io
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞
            if filepath.lower().endswith('.png'):
                format_type = 'PNG'
            else:
                format_type = 'JPEG'
            
            # –î–ª—è PNG - –±–æ–ª–µ–µ –¥–µ–ª–∏–∫–∞—Ç–Ω–æ–µ —Å–∂–∞—Ç–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–∞—á–µ—Å—Ç–≤–∞
            if format_type == 'PNG':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                buffer = io.BytesIO()
                image.save(buffer, format='PNG', optimize=True)
                size_kb = len(buffer.getvalue()) / 1024
                
                if size_kb <= target_size_kb:
                    # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä —É–∂–µ –ø–æ–¥—Ö–æ–¥–∏—Ç - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                    with open(filepath, 'wb') as f:
                        f.write(buffer.getvalue())
                    
                    if not self.silent_mode:
                        print(f"üì¶ PNG —Å–æ—Ö—Ä–∞–Ω–µ–Ω {size_kb:.1f}–∫–± (–±–µ–∑ —Å–∂–∞—Ç–∏—è)")
                    return True
                
                # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –õ–µ–≥–∫–æ–µ —Ä–µ—Å–∞–π–∑ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–∞—á–µ—Å—Ç–≤–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∏–ª—å–Ω–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç)
                if size_kb > target_size_kb * 1.5:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –≤ 1.5 —Ä–∞–∑–∞
                    for scale in [0.95, 0.9, 0.85, 0.8]:  # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π —Ä–µ—Å–∞–π–∑
                        new_width = int(image.width * scale)
                        new_height = int(image.height * scale)
                        
                        # –í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ—Å–∞–π–∑
                        resized = image.resize((new_width, new_height), Image.LANCZOS)
                        
                        buffer = io.BytesIO()
                        resized.save(buffer, format='PNG', optimize=True)
                        size_kb = len(buffer.getvalue()) / 1024
                        
                        if size_kb <= target_size_kb:
                            with open(filepath, 'wb') as f:
                                f.write(buffer.getvalue())
                            
                            if not self.silent_mode:
                                print(f"üì¶ PNG —Å–∂–∞—Ç –¥–æ {size_kb:.1f}–∫–± (–ª–µ–≥–∫–∏–π —Ä–µ—Å–∞–π–∑ {scale:.2f}x)")
                            return True
                
                # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –î–µ–ª–∏–∫–∞—Ç–Ω–∞—è –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ü–≤–µ—Ç–æ–≤
                if image.mode == 'RGBA':
                    # –î–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –±–æ–ª—å—à–µ —Ü–≤–µ—Ç–æ–≤
                    quantized = image.quantize(colors=256, method=Image.Quantize.MEDIANCUT)
                    quantized = quantized.convert('RGBA')
                else:
                    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - —Ç–æ–∂–µ –±–æ–ª—å—à–µ —Ü–≤–µ—Ç–æ–≤
                    quantized = image.quantize(colors=256, method=Image.Quantize.MEDIANCUT)
                
                buffer = io.BytesIO()
                quantized.save(buffer, format='PNG', optimize=True)
                size_kb = len(buffer.getvalue()) / 1024
                
                if size_kb <= target_size_kb:
                    with open(filepath, 'wb') as f:
                        f.write(buffer.getvalue())
                    
                    if not self.silent_mode:
                        print(f"üì¶ PNG —Å–∂–∞—Ç –¥–æ {size_kb:.1f}–∫–± (–¥–µ–ª–∏–∫–∞—Ç–Ω–∞—è –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è 256 —Ü–≤–µ—Ç–æ–≤)")
                    return True
                
                # –ö—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
                buffer = io.BytesIO()
                image.save(buffer, format='PNG', optimize=True)
                size_kb = len(buffer.getvalue()) / 1024
                
                with open(filepath, 'wb') as f:
                    f.write(buffer.getvalue())
                
                if not self.silent_mode:
                    print(f"‚ö†Ô∏è PNG —Å–æ—Ö—Ä–∞–Ω–µ–Ω {size_kb:.1f}–∫–± (–ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç, –Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ)")
                return True
            
            else:
                # –î–ª—è JPEG - –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–∂–∞—Ç–∏–µ
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (JPEG –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å)
                if image.mode in ('RGBA', 'LA'):
                    # –°–æ–∑–¥–∞–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω
                    rgb_image = Image.new('RGB', image.size, (255, 255, 255))
                    if image.mode == 'RGBA':
                        rgb_image.paste(image, mask=image.split()[-1])
                    else:
                        rgb_image.paste(image)
                    image = rgb_image
                elif image.mode not in ('RGB', 'L'):
                    image = image.convert('RGB')
                
                # –ü—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–µ —É—Ä–æ–≤–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è JPEG
                for quality in [95, 90, 85, 80, 75, 70, 65, 60]:  # –ù–∞—á–∏–Ω–∞–µ–º —Å –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                    buffer = io.BytesIO()
                    image.save(buffer, format='JPEG', quality=quality, optimize=True)
                    size_kb = len(buffer.getvalue()) / 1024
                    
                    if size_kb <= target_size_kb:
                        with open(filepath, 'wb') as f:
                            f.write(buffer.getvalue())
                        
                        if not self.silent_mode:
                            print(f"üì¶ JPEG —Å–∂–∞—Ç –¥–æ {size_kb:.1f}–∫–± (–∫–∞—á–µ—Å—Ç–≤–æ {quality}%)")
                        return True
                
                # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è - –ª–µ–≥–∫–∏–π —Ä–µ—Å–∞–π–∑ —Å —Ö–æ—Ä–æ—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
                for scale in [0.95, 0.9, 0.85]:
                    new_width = int(image.width * scale)
                    new_height = int(image.height * scale)
                    resized = image.resize((new_width, new_height), Image.LANCZOS)
                    
                    for quality in [85, 80, 75, 70]:  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                        buffer = io.BytesIO()
                        resized.save(buffer, format='JPEG', quality=quality, optimize=True)
                        size_kb = len(buffer.getvalue()) / 1024
                        
                        if size_kb <= target_size_kb:
                            with open(filepath, 'wb') as f:
                                f.write(buffer.getvalue())
                            
                            if not self.silent_mode:
                                print(f"üì¶ JPEG —Å–∂–∞—Ç –¥–æ {size_kb:.1f}–∫–± (—Ä–µ—Å–∞–π–∑ {scale:.2f}x, –∫–∞—á–µ—Å—Ç–≤–æ {quality}%)")
                            return True
                
                # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –ø—Ä–∏–µ–º–ª–µ–º—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
                buffer = io.BytesIO()
                image.save(buffer, format='JPEG', quality=65, optimize=True)
                size_kb = len(buffer.getvalue()) / 1024
                
                with open(filepath, 'wb') as f:
                    f.write(buffer.getvalue())
                
                if not self.silent_mode:
                    if size_kb <= target_size_kb:
                        print(f"üì¶ JPEG —Å–∂–∞—Ç –¥–æ {size_kb:.1f}–∫–± (–∫–∞—á–µ—Å—Ç–≤–æ 65%)")
                    else:
                        print(f"‚ö†Ô∏è JPEG —Å–æ—Ö—Ä–∞–Ω–µ–Ω {size_kb:.1f}–∫–± (–ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç, –Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ)")
                return True
                
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è: {e}")
            return False

    def _remove_pollinations_watermark_from_image(self, image):
        """–£–¥–∞–ª—è–µ—Ç –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ —Å PIL Image –æ–±—ä–µ–∫—Ç–∞"""
        try:
            width, height = image.size
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –æ–±—Ä–µ–∑–∫–∏
            if width >= 1024 and height >= 768:
                crop_box = (0, 0, width - 80, height - 60)
            elif width >= 512 and height >= 512:
                crop_box = (0, 0, width - 50, height - 40)
            else:
                crop_box = (0, 0, width - 30, height - 25)
            
            # –û–±—Ä–µ–∑–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            cropped_img = image.crop(crop_box)
            
            if not self.silent_mode:
                new_width, new_height = cropped_img.size
                print(f"‚úÇÔ∏è –û–±—Ä–µ–∑–∞–Ω–æ —Å {width}x{height} –¥–æ {new_width}x{new_height}")
            
            return cropped_img
            
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–µ–∑–∫–∏: {e}")
            return image

    def _generate_prompts(self, theme_input):
        """–£–ú–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏"""
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–º–Ω—ã–π –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        try:
            from generators.smart_variative_prompts import create_smart_thematic_prompts
            prompts_list = create_smart_thematic_prompts(theme_input)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Å–ª–æ–≤–∞—Ä—å
            image_names = ['main', 'about1', 'about2', 'about3', 'review1', 'review2', 'review3', 'favicon']
            prompts = {}
            
            for i, name in enumerate(image_names):
                if i < len(prompts_list):
                    prompts[name] = prompts_list[i]
                else:
                    prompts[name] = f'professional {theme_input} service'
            
            theme_data = {
                'business_type': theme_input,
                'activity_type': 'service'
            }
            
            if not self.silent_mode:
                print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è {theme_input}")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–µ–º–∞—Ç–∏–∫
                if '–¥–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã' in theme_input.lower() or '–µ–¥–∞' in theme_input.lower():
                    print("üçï –í–∞—Ä–∏–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã - —Ä–∞–∑–Ω—ã–µ –±–ª—é–¥–∞ –∫–∞–∂–¥—ã–π —Ä–∞–∑!")
                if '–ø—Ä–æ–¥–∞–∂–∞ –∞–≤—Ç–æ' in theme_input.lower() or '–∞–≤—Ç–æ—Å–∞–ª–æ–Ω' in theme_input.lower():
                    print("üöó –í–∞—Ä–∏–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –∞–≤—Ç–æ - about2 –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—å–µ—Ä!")
            
            return prompts, theme_data
            
        except ImportError:
            # –§–æ–ª–ª–±—ç–∫ –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É, –µ—Å–ª–∏ —É–º–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            if not self.silent_mode:
                print("‚ö†Ô∏è –í–∞—Ä–∏–∞—Ç–∏–≤–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞")
            return self._generate_fallback_prompts(theme_input)
    
    def _generate_fallback_prompts(self, theme_input):
        """–ü—Ä–æ—Å—Ç–∞—è —Ñ–æ–ª–ª–±—ç–∫ —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤"""
        business_type = theme_input.lower()
        
        prompts = {
            'main': f"professional {business_type} business exterior, modern commercial building",
            'about1': f"{business_type} interior, professional workspace, modern facilities",
            'about2': f"professional working with {business_type}, quality service delivery",
            'about3': f"excellent {business_type} results, professional quality work",
            'review1': f"satisfied {business_type} customer, happy client experience",
            'review2': f"{business_type} consultation, professional service meeting",
            'review3': f"professional {business_type} team, experienced staff",
            'favicon': f"{business_type} icon, business symbol, professional logo"
        }
        
        theme_data = {
            'business_type': business_type,
            'activity_type': 'service'
        }
        
        return prompts, theme_data

# –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
class ThematicImageGenerator:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    
    def __init__(self, silent_mode=False):
        self.silent_mode = silent_mode
        self.image_generator = ImageGenerator(silent_mode=silent_mode)
    
    def generate_single_image(self, prompt, image_name, output_dir):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        return self.image_generator._generate_image_via_pollinations(
            prompt, image_name, output_dir
        )
    
    def get_theme_prompts(self, theme_input):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ç–µ–º—ã - –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å GUI"""
        prompts, theme_data = self.image_generator._generate_prompts(theme_input)
        return prompts, theme_data 

