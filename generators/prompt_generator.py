"""
–£–º–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
–†–∞–∑–±–∏—Ç –∏–∑ smart_prompt_generator.py –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
"""

import random
import time
import hashlib
import uuid
import os
from .translations import TRANSLATIONS, BUSINESS_TYPES

class SmartPromptGenerator:
    """–£–ú–ù–ê–Ø —Å–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –ª—é–±—ã—Ö —Ç–µ–º–∞—Ç–∏–∫ –ë–ï–ó –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"""
    
    def __init__(self):
        self.translations = TRANSLATIONS
        self.business_types = BUSINESS_TYPES
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª —Å –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û —É–Ω–∏–∫–∞–ª—å–Ω—ã–º seed
        self.rng = random.Random()
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã + —Å–ª—É—á–∞–π–Ω—ã–π UUID + ID –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        unique_seed = int(time.time() * 1000000) + hash(str(uuid.uuid4())) + os.getpid() + random.randint(1, 1000000)
        self.rng.seed(unique_seed)
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        self.style_modifiers = [
            "professional", "modern", "contemporary", "sleek", "elegant", "sophisticated",
            "premium", "high-end", "luxury", "executive", "corporate", "innovative",
            "cutting-edge", "state-of-the-art", "world-class", "top-tier", "elite",
            "progressive", "advanced", "refined", "distinguished", "exceptional"
        ]
        
        self.environment_modifiers = [
            "workspace", "facility", "center", "office", "studio", "establishment",
            "headquarters", "location", "premises", "venue", "complex", "institute",
            "organization", "enterprise", "operation", "business", "company", "firm"
        ]
        
        self.quality_descriptors = [
            "premium quality", "excellent service", "outstanding results", "superior performance",
            "exceptional standards", "top-notch quality", "first-class service", "world-class expertise",
            "professional excellence", "industry-leading", "award-winning", "certified excellence",
            "proven quality", "trusted expertise", "reliable service", "guaranteed satisfaction"
        ]
        
        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.unique_details = {
            "main": [
                "bustling activity", "professional atmosphere", "welcoming environment",
                "organized layout", "clean aesthetics", "modern architecture",
                "impressive facade", "attractive entrance", "professional signage",
                "contemporary design", "spacious interior", "bright lighting"
            ],
            "about": [
                "specialized equipment", "advanced technology", "precision tools",
                "quality materials", "efficient setup", "organized workspace",
                "professional gear", "modern systems", "reliable machinery",
                "innovative solutions", "technical expertise", "quality assurance"
            ],
            "review": [
                "genuine satisfaction", "positive experience", "happy expression",
                "grateful demeanor", "confident posture", "relaxed appearance",
                "friendly smile", "natural joy", "authentic happiness",
                "pleased reaction", "content expression", "satisfied look"
            ]
        }
    
    def analyze_theme(self, theme, silent_mode=False):
        """–ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–´–ô –∞–Ω–∞–ª–∏–∑ —Ç–µ–º–∞—Ç–∏–∫–∏ - —á–∏—Ç–∞–µ—Ç –≤—Å—é —Ñ—Ä–∞–∑—É —Ü–µ–ª–∏–∫–æ–º –∏ –ø–æ–Ω–∏–º–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        if not silent_mode:
            print(f"üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–º–∞—Ç–∏–∫–∏: {theme}")
        
        theme_lower = theme.lower().strip()
        theme_words = theme_lower.split()
        
        # –ù–û–í–ê–Ø –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê: –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–π —Ñ—Ä–∞–∑—ã —Ü–µ–ª–∏–∫–æ–º
        context_result = self._intelligent_theme_analysis(theme_lower, theme_words, silent_mode)
        
        if context_result:
            return context_result
            
        # Fallback –∫ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ –µ—Å–ª–∏ –Ω–æ–≤–∞—è –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        return self._legacy_theme_analysis(theme_lower, theme_words, silent_mode)
    
    def _intelligent_theme_analysis(self, theme_lower, theme_words, silent_mode=False):
        """
        –ù–û–í–ê–Ø –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–º–∞—Ç–∏–∫–∏
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å—é —Ñ—Ä–∞–∑—É —Ü–µ–ª–∏–∫–æ–º, –ø–æ–Ω–∏–º–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∏
        """
        
        # –£–ú–ù–´–ï –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–ò–ï –®–ê–ë–õ–û–ù–´ - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å—é —Ñ—Ä–∞–∑—É —Ü–µ–ª–∏–∫–æ–º
        semantic_patterns = {
            # –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–´–ï –¢–ï–ú–ê–¢–ò–ö–ò (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π)
            'investment_education': {
                'patterns': [
                    # –ü—Ä—è–º—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
                    '–∫—É—Ä—Å—ã –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º', '–∫—É—Ä—Å—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã',
                    '–æ–±—É—á–µ–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º', '–æ–±—É—á–µ–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–º', '—à–∫–æ–ª–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π',
                    '—Ç—Ä–µ–Ω–∏–Ω–≥–∏ –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º', '—Å–µ–º–∏–Ω–∞—Ä—ã –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º',
                    'investment courses', 'investment training', 'investment education',
                    # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
                    '–∫—É—Ä—Å—ã —Ç—Ä–µ–π–¥–∏–Ω–≥', '–æ–±—É—á–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∏–Ω–≥—É', '—à–∫–æ–ª–∞ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞',
                    '–∫—É—Ä—Å—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤', '—Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å'
                ],
                'activity_type': 'investment',
                'business_type': 'investment courses',
                'confidence': 0.95,
                'keywords': ['investment', 'education', 'training']
            },
            
            'language_education': {
                'patterns': [
                    '–∫—É—Ä—Å—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ', '–æ–±—É—á–µ–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É', '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫',
                    '–∫—É—Ä—Å—ã —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–≥–æ', '–æ–±—É—á–µ–Ω–∏–µ —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–º—É', '—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π —è–∑—ã–∫', 
                    '–∫—É—Ä—Å—ã –Ω–µ–º–µ—Ü–∫–æ–≥–æ', '–æ–±—É—á–µ–Ω–∏–µ –Ω–µ–º–µ—Ü–∫–æ–º—É', '–Ω–µ–º–µ—Ü–∫–∏–π —è–∑—ã–∫',
                    '–∫—É—Ä—Å—ã –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ', '–∫—É—Ä—Å—ã –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–≥–æ', '–∫—É—Ä—Å—ã –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ',
                    '—è–∑—ã–∫–æ–≤—ã–µ –∫—É—Ä—Å—ã', '–∏–∑—É—á–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤', '—à–∫–æ–ª–∞ —è–∑—ã–∫–æ–≤',
                    'english courses', 'language school', 'language learning'
                ],
                'activity_type': 'training',
                'business_type': lambda theme: self._extract_language_from_theme(theme) + ' courses',
                'confidence': 0.95,
                'keywords': ['training', 'education', 'language']
            },
            
            # –ê–í–¢–û–ú–û–ë–ò–õ–¨–ù–´–ï –°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò (–∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑)
            'luxury_car_import': {
                'patterns': [
                    '–ø–æ–¥–±–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏–∑ —Å—à–∞', '–∏–º–ø–æ—Ä—Ç –∞–≤—Ç–æ –∏–∑ –∞–º–µ—Ä–∏–∫–∏', '–º–∞—à–∏–Ω—ã –∏–∑ –∫–æ—Ä–µ–∏',
                    '–∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –∏–∑ –µ–≤—Ä–æ–ø—ã', '–ø–æ–¥–±–æ—Ä –º–∞—à–∏–Ω –∏–∑-–∑–∞ —Ä—É–±–µ–∂–∞',
                    'car import from usa', 'luxury car selection', 'premium car import',
                    '—ç–ª–∏—Ç–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏', '–ø—Ä–µ–º–∏—É–º –∞–≤—Ç–æ', '–ª—é–∫—Å–æ–≤—ã–µ –º–∞—à–∏–Ω—ã'
                ],
                'activity_type': 'car_import', 
                'business_type': 'luxury car import',
                'confidence': 0.9,
                'keywords': ['cars', 'import', 'luxury']
            },
            
            'chauffeur_premium': {
                'patterns': [
                    '—É—Å–ª—É–≥–∏ –≤–æ–¥–∏—Ç–µ–ª—è', '–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≤–æ–¥–∏—Ç–µ–ª—å', '–≤–æ–¥–∏—Ç–µ–ª—å —Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º',
                    '–∞—Ä–µ–Ω–¥–∞ –∞–≤—Ç–æ —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º', '—à–æ—Ñ–µ—Ä —É—Å–ª—É–≥–∏', 'personal driver',
                    'chauffeur service', 'driver rental', 'luxury transportation'
                ],
                'activity_type': 'chauffeur_service',
                'business_type': 'chauffeur service', 
                'confidence': 0.9,
                'keywords': ['driver', 'rental', 'service']
            },
            
            # –§–ò–ù–ê–ù–°–û–í–´–ï –£–°–õ–£–ì–ò (–∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑)
            'credit_analysis': {
                'patterns': [
                    '–æ—Ü–µ–Ω–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏', '–∞–Ω–∞–ª–∏–∑ –∫—Ä–µ–¥–∏—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏',
                    '–∫—Ä–µ–¥–∏—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞', '–∫—Ä–µ–¥–∏—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –±–∏–∑–Ω–µ—Å–∞',
                    'creditworthiness assessment', 'credit evaluation', 'credit analysis'
                ],
                'activity_type': 'credit_assessment',
                'business_type': 'credit assessment',
                'confidence': 0.95,
                'keywords': ['credit', 'assessment', 'analysis']
            },
            
            'financial_consulting': {
                'patterns': [
                    '—Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', '—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏', 
                    '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–µ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
                    'financial consulting', 'investment consulting', 'financial advisory'
                ],
                'activity_type': 'financial',
                'business_type': 'financial consulting',
                'confidence': 0.9,
                'keywords': ['financial', 'consulting', 'advisory']
            },
            
            # –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–¨ (–≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç)
            'foreign_real_estate': {
                'patterns': [
                    '–∑–∞—Ä—É–±–µ–∂–Ω–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', '–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –∑–∞ —Ä—É–±–µ–∂–æ–º',
                    '–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
                    'foreign real estate', 'international property', 'overseas real estate'
                ],
                'activity_type': 'foreign_real_estate',
                'business_type': 'foreign real estate',
                'confidence': 0.9,
                'keywords': ['real estate', 'foreign', 'investment']
            },
            
            'student_housing': {
                'patterns': [
                    '—Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', '–∂–∏–ª—å–µ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤', 
                    '–∞—Ä–µ–Ω–¥–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞–º', '—Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã',
                    'student housing', 'student accommodation', 'student rental'
                ],
                'activity_type': 'student_housing',
                'business_type': 'student housing',
                'confidence': 0.9,
                'keywords': ['housing', 'student', 'rental']
            },
            
            # –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –£–°–õ–£–ì–ò
            'tire_service': {
                'patterns': [
                    '—à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂', '–∑–∞–º–µ–Ω–∞ —à–∏–Ω', '—Å–µ–∑–æ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ —à–∏–Ω',
                    '–ø—Ä–æ–¥–∞–∂–∞ —à–∏–Ω', 'tire service', 'tire replacement', 'tire sales'
                ],
                'activity_type': 'tire_service',
                'business_type': 'tire service',
                'confidence': 0.9,
                'keywords': ['tire', 'service', 'replacement']
            },
            
            'landscape_design': {
                'patterns': [
                    '–ª–∞–Ω–¥—à–∞—Ñ—Ç–Ω—ã–π –¥–∏–∑–∞–π–Ω', '–±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏',
                    '–æ–∑–µ–ª–µ–Ω–µ–Ω–∏–µ —É—á–∞—Å—Ç–∫–∞', '—Å–∞–¥–æ–≤–æ-–ø–∞—Ä–∫–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã',
                    'landscape design', 'landscaping services', 'garden design'
                ],
                'activity_type': 'landscape',
                'business_type': 'landscape design',
                'confidence': 0.9,
                'keywords': ['landscape', 'design', 'garden']
            },
            
            # –û–ë–©–ò–ï –¢–ï–ú–ê–¢–ò–ö–ò (–Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            'automotive_general': {
                'patterns': [
                    '–∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å', '—Ä–µ–º–æ–Ω—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π', '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ',
                    '–∞–≤—Ç–æ–º–æ–π–∫–∞', 'car service', 'auto repair', 'car wash'
                ],
                'activity_type': 'automotive',
                'business_type': 'automotive service',
                'confidence': 0.7,
                'keywords': ['automotive', 'service', 'repair']
            },
            
            'healthcare_general': {
                'patterns': [
                    '–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏', '–ª–µ—á–µ–Ω–∏–µ', '–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä',
                    'healthcare services', 'medical treatment', 'medical center'
                ],
                'activity_type': 'healthcare',
                'business_type': 'healthcare',
                'confidence': 0.7,
                'keywords': ['healthcare', 'medical', 'treatment']
            }
        }
        
        if not silent_mode:
            print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è: '{theme_lower}'")
        
        # –ò—â–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —à–∞–±–ª–æ–Ω
        best_match = None
        highest_confidence = 0
        
        for pattern_name, pattern_data in semantic_patterns.items():
            for pattern in pattern_data['patterns']:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –∏–ª–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
                if self._semantic_match(theme_lower, pattern):
                    confidence = pattern_data['confidence']
                    
                    # –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                    if pattern.lower() == theme_lower:
                        confidence += 0.05  # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                    elif pattern.lower() in theme_lower:
                        confidence += 0.02  # –ß–∞—Å—Ç–∏—á–Ω–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
                    
                    if confidence > highest_confidence:
                        highest_confidence = confidence
                        best_match = {
                            'pattern_name': pattern_name,
                            'matched_pattern': pattern,
                            'confidence': confidence,
                            **pattern_data
                        }
                        
                        if not silent_mode:
                            print(f"   üéØ –ù–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω: {pattern_name} (—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: '{pattern}', —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")
        
        if best_match and highest_confidence >= 0.7:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ business_type
            business_type = best_match['business_type']
            if callable(business_type):
                business_type = business_type(theme_lower)
            
            context = {
                'category': 'intelligent_analysis',
                'business_type': business_type,
                'activity_type': best_match['activity_type'],
                'english_terms': best_match['keywords'],
                'confidence': best_match['confidence'],
                'keywords': best_match['keywords'][:3],
                'environment': f"professional {business_type} {best_match['activity_type']}",
                'matched_pattern': best_match['matched_pattern'],
                'analysis_method': 'semantic_pattern_matching'
            }
            
            if not silent_mode:
                print(f"‚úÖ –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –£–°–ü–ï–®–ï–ù:")
                print(f"   üéØ –¢–∏–ø –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {best_match['activity_type']}")
                print(f"   üè¢ –ë–∏–∑–Ω–µ—Å-—Ç–∏–ø: {business_type}")  
                print(f"   üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {best_match['confidence']:.2f}")
                print(f"   üîó –°–æ–≤–ø–∞–≤—à–∏–π —à–∞–±–ª–æ–Ω: '{best_match['matched_pattern']}'")
            
            return context
        
        if not silent_mode:
            print("‚ùå –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —à–∞–±–ª–æ–Ω—ã –Ω–µ –¥–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –ø–µ—Ä–µ—Ö–æ–¥ –∫ legacy –∞–Ω–∞–ª–∏–∑—É")
        
        return None
    
    def _semantic_match(self, theme, pattern):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –º–µ–∂–¥—É —Ç–µ–º–æ–π –∏ —à–∞–±–ª–æ–Ω–æ–º"""
        theme = theme.lower().strip()
        pattern = pattern.lower().strip()
        
        # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if pattern == theme:
            return True
            
        # –ü–æ–ª–Ω–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –≤ —Ç–µ–º—É
        if pattern in theme:
            return True
            
        # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (–º–∏–Ω–∏–º—É–º 70% —Å–ª–æ–≤)
        theme_words = set(theme.split())
        pattern_words = set(pattern.split())
        
        if len(pattern_words) == 0:
            return False
            
        intersection = theme_words.intersection(pattern_words)
        similarity = len(intersection) / len(pattern_words)
        
        return similarity >= 0.7
    
    def _extract_language_from_theme(self, theme):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —è–∑—ã–∫ –∏–∑ —Ç–µ–º—ã –¥–ª—è —è–∑—ã–∫–æ–≤—ã—Ö –∫—É—Ä—Å–æ–≤"""
        language_map = {
            '–∞–Ω–≥–ª–∏–π—Å–∫': 'english', 'english': 'english',
            '—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫': 'french', 'french': 'french', 
            '–Ω–µ–º–µ—Ü–∫': 'german', 'german': 'german',
            '–∏—Å–ø–∞–Ω—Å–∫': 'spanish', 'spanish': 'spanish',
            '–∏—Ç–∞–ª—å—è–Ω—Å–∫': 'italian', 'italian': 'italian',
            '–∫–∏—Ç–∞–π—Å–∫': 'chinese', 'chinese': 'chinese',
            '—è–ø–æ–Ω—Å–∫': 'japanese', 'japanese': 'japanese'
        }
        
        for lang_part, lang_full in language_map.items():
            if lang_part in theme:
                return lang_full
                
        return 'language'  # fallback
    
    def _legacy_theme_analysis(self, theme_lower, theme_words, silent_mode=False):
        """–°—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–∫ fallback"""
        if not silent_mode:
            print("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º legacy –∞–Ω–∞–ª–∏–∑ –∫–∞–∫ fallback")
            
        found_terms = []
        activity_type = 'service'
        
        # –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —Ç–µ–º–∞—Ç–∏–∫–µ (–∏–∑–±–µ–≥–∞–µ–º –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π –Ω–∞ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏)
        theme_words = theme_lower.split()  # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
        
        for ru_word, en_word in self.translations.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–æ —Å–ª–æ–≤–∞–º–∏ –∏–ª–∏ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–∞–∫ –Ω–∞—á–∞–ª–æ/–∫–æ–Ω–µ—Ü —Å–ª–æ–≤–∞
            word_found = False
            
            for theme_word in theme_words:
                # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                if ru_word == theme_word:
                    word_found = True
                    break
                # –°–ª–æ–≤–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–∫—É—Ä—Å—ã" –≤ "–∫—É—Ä—Å–∞–º")  
                elif theme_word.startswith(ru_word) and len(ru_word) >= 4:
                    word_found = True
                    break
                # –°–ª–æ–≤–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å" —Å–æ–¥–µ—Ä–∂–∏—Ç "—Å–µ—Ä–≤–∏—Å")
                elif theme_word.endswith(ru_word) and len(ru_word) >= 4:
                    word_found = True
                    break
            
            if word_found:
                found_terms.append(en_word)
        
        # –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–º–∞—Ç–∏–∫
        
        # 1. –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —É—Å–ª—É–≥–∏ - –í–´–°–®–ò–ô –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        financial_indicators = [
            '—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è', '—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π', '–∏–Ω–≤–µ—Å—Ç–∏—Ü', '–∫—Ä–µ–¥–∏—Ç', '–±–∞–Ω–∫', '—Å—Ç—Ä–∞—Ö–æ–≤',
            '–Ω–∞–ª–æ–≥', '–∞—É–¥–∏—Ç', '–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–∞–Ω–∞–ª–∏–∑', '–æ—Ü–µ–Ω–∫–∞',
            'financial', 'investment', 'banking', 'consulting', 'consultant'
        ]
        
        financial_detected = False
        for indicator in financial_indicators:
            for theme_word in theme_words:
                if theme_word == indicator or theme_word.startswith(indicator) or theme_word.endswith(indicator):
                    financial_detected = True
                    break
            if financial_detected:
                break
        
        # 1. –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏ - –í–´–°–®–ò–ô –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        credit_indicators = [
            '–∫—Ä–µ–¥–∏—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏', '–∫—Ä–µ–¥–∏—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å', 'creditworthiness', '–∫—Ä–µ–¥–∏—Ç', 'credit'
        ]
        
        credit_detected = False
        for indicator in credit_indicators:
            for theme_word in theme_words:
                if theme_word == indicator or theme_word.startswith(indicator) or theme_word.endswith(indicator):
                    credit_detected = True
                    break
            if credit_detected:
                break
        
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –∫—Ä–µ–¥–∏—Ç–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã = credit_assessment
        if credit_detected:
            activity_type = 'credit_assessment'
        
        # 2. –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏
        elif activity_type == 'service':
            legal_indicators = [
                '—é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ', '—é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ', '—é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö', '–ø—Ä–∞–≤–æ–≤–æ–µ', '–ø—Ä–∞–≤–æ–≤—ã–µ', 'legal',
                '–∞–¥–≤–æ–∫–∞—Ç', '–Ω–æ—Ç–∞—Ä–∏—É—Å', '—Å—É–¥', '–¥–æ–≥–æ–≤–æ—Ä', '—Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ', 'support'
            ]
            
            legal_detected = False
            for indicator in legal_indicators:
                for theme_word in theme_words:
                    if theme_word == indicator or theme_word.startswith(indicator) or theme_word.endswith(indicator):
                        legal_detected = True
                        break
                if legal_detected:
                    break
            
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã = legal
            if legal_detected:
                activity_type = 'legal'
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ä—É–±–µ–∂–Ω—É—é –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å
        elif activity_type == 'service':
            foreign_real_estate_indicators = ['–∑–∞—Ä—É–±–µ–∂–Ω—É—é', '–∑–∞—Ä—É–±–µ–∂–Ω–∞—è', '–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è', 'foreign', 'international']
            foreign_detected = False
            
            for indicator in foreign_real_estate_indicators:
                for theme_word in theme_words:
                    if theme_word == indicator or theme_word.startswith(indicator) or theme_word.endswith(indicator):
                        foreign_detected = True
                        break
                if foreign_detected:
                    break
            
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –∑–∞—Ä—É–±–µ–∂–Ω–∞—è + –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å + –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ = foreign_real_estate
            if foreign_detected and ('–Ω–µ–¥–≤–∏–∂–∏–º' in theme_lower or 'real estate' in ' '.join(found_terms)) and financial_detected:
                activity_type = 'foreign_real_estate'
        
        # 3. –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã + –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è = financial
        if activity_type == 'service' and financial_detected and ('–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è' in theme_lower or 'consultant' in found_terms):
            activity_type = 'financial'
        
        # 2. –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ê–í–¢–û–ú–û–ë–ò–õ–¨–ù–´–ï –¢–ï–ú–ê–¢–ò–ö–ò - –í–´–°–®–ò–ô –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        
        # –ò–º–ø–æ—Ä—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        car_import_indicators = ['–ø–æ–¥–±–æ—Ä', '–∏–º–ø–æ—Ä—Ç', '—Å—à–∞', '–∫–æ—Ä–µ—è', '–µ–≤—Ä–æ–ø–∞', 'usa', 'korea', 'europe', 'selection', 'import']
        car_import_detected = False
        
        for indicator in car_import_indicators:
            for theme_word in theme_words:
                if theme_word == indicator or theme_word.startswith(indicator) or theme_word.endswith(indicator):
                    car_import_detected = True
                    break
            if car_import_detected:
                break
        
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ + –∏–º–ø–æ—Ä—Ç/–ø–æ–¥–±–æ—Ä = car_import
        if car_import_detected and ('–∞–≤—Ç–æ' in theme_lower or '–º–∞—à–∏–Ω' in theme_lower or 'cars' in found_terms):
            activity_type = 'car_import'
        
        # –í–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ —É—Å–ª—É–≥–∏
        elif activity_type == 'service':
            chauffeur_indicators = ['–≤–æ–¥–∏—Ç–µ–ª—å', '–≤–æ–¥–∏—Ç–µ–ª–µ–º', '—à–æ—Ñ–µ—Ä', 'driver', 'chauffeur', '–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π', 'personal']
            chauffeur_detected = False
            
            for indicator in chauffeur_indicators:
                for theme_word in theme_words:
                    if theme_word == indicator or theme_word.startswith(indicator) or theme_word.endswith(indicator):
                        chauffeur_detected = True
                        break
                if chauffeur_detected:
                    break
            
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –≤–æ–¥–∏—Ç–µ–ª—å + –∞—Ä–µ–Ω–¥–∞/–∞–≤—Ç–æ = chauffeur_service
            if chauffeur_detected and ('–∞—Ä–µ–Ω–¥–∞' in theme_lower or 'rental' in found_terms or '–∞–≤—Ç–æ' in theme_lower):
                activity_type = 'chauffeur_service'
        
        # 3. –®–∏–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ - –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–∞—è —Ç–µ–º–∞—Ç–∏–∫–∞
        if activity_type == 'service':
            tire_indicators = ['—à–∏–Ω', 'tire', '—Å–µ–∑–æ–Ω–Ω–∞—è', 'seasonal', '–∑–∞–º–µ–Ω–∞', 'replacement', '–∫–æ–ª–µ—Å']
            tire_detected = False
            
            for indicator in tire_indicators:
                for theme_word in theme_words:
                    if theme_word == indicator or theme_word.startswith(indicator) or theme_word.endswith(indicator):
                        tire_detected = True
                        break
                if tire_detected:
                    break
            
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —à–∏–Ω—ã + –ø—Ä–æ–¥–∞–∂–∞/–∑–∞–º–µ–Ω–∞ = tire_service
            if tire_detected and ('–ø—Ä–æ–¥–∞–∂–∞' in theme_lower or '–∑–∞–º–µ–Ω–∞' in theme_lower or 'sales' in found_terms):
                activity_type = 'tire_service'
        
        # 4. –û–±—ã—á–Ω–∞—è –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–∞—è —Ç–µ–º–∞—Ç–∏–∫–∞  
        if activity_type == 'service':  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ
            automotive_indicators = [
                '–∞–≤—Ç–æ–º–æ–±–∏–ª', '–º–∞—à–∏–Ω', '–∞–≤—Ç–æ', '–∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å', '–∞–≤—Ç–æ–º–æ–π–∫–∞', '—ç–≤–∞–∫—É–∞—Ç–æ—Ä',
                '—Ç—é–Ω–∏–Ω–≥', '—à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂', '–∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏', '–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', 'cars', 'automotive'
            ]
            
            for indicator in automotive_indicators:
                for theme_word in theme_words:
                    if theme_word == indicator or theme_word.startswith(indicator) or theme_word.endswith(indicator):
                        activity_type = 'automotive'
                        break
                if activity_type == 'automotive':
                    break
        
        # 5. –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å - –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø —Ç–µ–º–∞—Ç–∏–∫–∞
        if activity_type == 'service':
            real_estate_indicators = [
                '–∫–≤–∞—Ä—Ç–∏—Ä', '—É—á–∞—Å—Ç–∫–æ–≤', '–Ω–µ–¥–≤–∏–∂–∏–º', '–∞—Ä–µ–Ω–¥–∞', '–ø—Ä–æ–¥–∞–∂–∞', 'apartments', 'plots', 
                'real estate', 'rental', 'estate', '–¥–∞—á–∞', '—Ñ–µ—Ä–º–∞', '–∑–∞–≥–æ—Ä–æ–¥–Ω—ã—Ö'
            ]
            real_estate_detected = False
            
            for indicator in real_estate_indicators:
                for theme_word in theme_words:
                    if theme_word == indicator or theme_word.startswith(indicator) or theme_word.endswith(indicator):
                        real_estate_detected = True
                        break
                if real_estate_detected:
                    break
            
            # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–¥—Ç–∏–ø—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
            if real_estate_detected:
                if '—Å—Ç—É–¥–µ–Ω—Ç' in theme_lower or 'student' in found_terms:
                    activity_type = 'student_housing'
                elif '–∑–∞–≥–æ—Ä–æ–¥–Ω—ã—Ö' in theme_lower or '—É—á–∞—Å—Ç–∫–æ–≤' in theme_lower or '–¥–∞—á–∞' in theme_lower:
                    activity_type = 'land_plots'
                elif '–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è' in theme_lower or 'short' in found_terms:
                    activity_type = 'short_rental'
                else:
                    activity_type = 'real_estate'
        
        # 6. –õ–∞–Ω–¥—à–∞—Ñ—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã - –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø —Ç–µ–º–∞—Ç–∏–∫–∞  
        if activity_type == 'service':
            landscape_indicators = [
                '–ª–∞–Ω–¥—à–∞—Ñ—Ç', 'landscape', '—Å–∞–¥–æ–≤–æ', 'garden', '–±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', '–æ–∑–µ–ª–µ–Ω–µ–Ω–∏–µ'
            ]
            landscape_detected = False
            
            for indicator in landscape_indicators:
                for theme_word in theme_words:
                    if theme_word == indicator or theme_word.startswith(indicator) or theme_word.endswith(indicator):
                        landscape_detected = True
                        break
                if landscape_detected:
                    break
            
            if landscape_detected:
                activity_type = 'landscape'
        
        # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –ù–ï —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–µ–º–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if activity_type == 'service':
            # –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º/–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ—Ä–º–∏–Ω–∞–º
            
            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω—ã–µ —Ñ—Ä–∞–∑—ã –≤ —Å–∞–º–æ–π —Ç–µ–º–µ (–±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ)
            theme_phrase = theme_lower.strip()
            priority_matches = []
            
            for business_type, keywords in self.business_types.items():
                for keyword in keywords:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ —Ñ—Ä–∞–∑—ã –≤ —Ç–µ–º—É
                    if keyword in theme_phrase:
                        priority_matches.append((business_type, len(keyword), keyword))
            
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –≤—ã–±–∏—Ä–∞–µ–º —Å–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ (–±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ)
            if priority_matches:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–ª–∏–Ω–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ (–±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–µ = –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ)
                priority_matches.sort(key=lambda x: x[1], reverse=True)
                activity_type = priority_matches[0][0]
                print(f"ÔøΩÔøΩ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {priority_matches[0][2]} ‚Üí {activity_type}")
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –±–∏–∑–Ω–µ—Å–∞
                for business_type, keywords in self.business_types.items():
                    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ —Ç–µ—Ä–º–∏–Ω–∞–º–∏
                    for found_term in found_terms:
                        if found_term in keywords:
                            activity_type = business_type
                            break
                    if activity_type != 'service':
                        break
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —Ç–µ—Ä–º–∏–Ω–∞–º, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ä—É—Å—Å–∫–∏–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ —Ç–µ–º–µ
                if activity_type == 'service':
                    for business_type, keywords in self.business_types.items():
                        for keyword in keywords:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
                            keyword_found = False
                            
                            for theme_word in theme_words:
                                # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                                if keyword == theme_word:
                                    keyword_found = True
                                    break
                                # –°–ª–æ–≤–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞  
                                elif theme_word.startswith(keyword) and len(keyword) >= 4:
                                    keyword_found = True
                                    break
                                # –°–ª–æ–≤–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º
                                elif theme_word.endswith(keyword) and len(keyword) >= 4:
                                    keyword_found = True
                                    break
                            
                            if keyword_found:
                                activity_type = business_type
                                break
                        if activity_type != 'service':
                            break
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É
        main_topic = self._extract_main_topic(theme_lower, found_terms)
        
        context = {
            'category': 'smart_analysis',
            'business_type': main_topic,
            'activity_type': activity_type,
            'english_terms': found_terms[:5],  # –¢–æ–ø-5 —Ç–µ—Ä–º–∏–Ω–æ–≤
            'confidence': 0.9 if found_terms else 0.6,
            'keywords': found_terms[:3],
            'environment': f"professional {main_topic} {activity_type}"
        }
        
        if not silent_mode:
            print(f"üéØ –¢–∏–ø –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {activity_type}")
            print(f"üî§ –ù–∞–π–¥–µ–Ω—ã —Ç–µ—Ä–º–∏–Ω—ã: {', '.join(found_terms[:3])}")
        
        return context
    
    def _extract_main_topic(self, theme_lower, found_terms):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç–∏"""
        if not found_terms:
            return theme_lower.split()[0] if theme_lower else 'business'
        
        # –ü–†–ò–û–†–ò–¢–ï–¢–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–º
        
        # –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏
        if 'creditworthiness' in found_terms or 'assessment' in found_terms:
            if 'client' in found_terms or 'business' in found_terms:
                return 'credit assessment'
            return 'creditworthiness'
        
        # –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏
        if 'legal' in found_terms or 'support' in found_terms:
            if 'transactions' in found_terms or 'investments' in found_terms:
                return 'legal services'  # –≤–º–µ—Å—Ç–æ transactions
            return 'legal'
        
        # –ò–º–ø–æ—Ä—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π  
        if 'selection' in found_terms and 'cars' in found_terms:
            return 'car import'
        
        # –ó–∞—Ä—É–±–µ–∂–Ω–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å
        if 'foreign' in found_terms and 'real estate' in ' '.join(found_terms):
            return 'foreign real estate'
        
        # –í–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ —É—Å–ª—É–≥–∏
        if 'driver' in found_terms or 'chauffeur' in found_terms:
            return 'chauffeur service'
        
        # –î–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ —Å–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ç–µ–º—É
        if 'investment' in found_terms and 'training' in found_terms:
            return 'investment courses'
        
        # –î–ª—è —è–∑—ã–∫–æ–≤—ã—Ö –∫—É—Ä—Å–æ–≤ —Å–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–∞–≤–Ω—É—é —Ç–µ–º—É
        if 'training' in found_terms:
            languages = ['english', 'french', 'german', 'spanish', 'italian', 'chinese', 'japanese']
            found_language = None
            
            for lang in languages:
                if lang in found_terms:
                    found_language = lang
                    break
            
            if found_language:
                return f"{found_language} courses"
        
        # –ò—â–µ–º —Å–∞–º—ã–π —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π —Ç–µ—Ä–º–∏–Ω (—Å–æ—Å—Ç–∞–≤–Ω—ã–µ —Ñ—Ä–∞–∑—ã –≤–∞–∂–Ω–µ–µ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Å–ª–æ–≤)
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–ª–∏–Ω–µ - –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –æ–±—ã—á–Ω–æ –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã
        sorted_terms = sorted(found_terms, key=len, reverse=True)
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–æ—Å—Ç–∞–≤–Ω—ã–º —Ç–µ—Ä–º–∏–Ω–∞–º (—Å–æ–¥–µ—Ä–∂–∞—â–∏–º –ø—Ä–æ–±–µ–ª—ã)
        for term in sorted_terms:
            if ' ' in term:  # —Å–æ—Å—Ç–∞–≤–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã —Ç–∏–ø–∞ "car service", "food delivery"
                return term
        
        # –ï—Å–ª–∏ —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö –Ω–µ—Ç, –±–µ—Ä–µ–º —Å–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ç–µ—Ä–º–∏–Ω
        return sorted_terms[0]
    
    def generate_prompts(self, theme, silent_mode=False):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞–±–æ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —Ç–µ–º–∞—Ç–∏–∫–∏"""
        context = self.analyze_theme(theme, silent_mode)
        
        business_type = context['business_type']
        activity_type = context['activity_type']
        
        # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –ø–æ —Ç–∏–ø—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ - –ü–†–ò–û–†–ò–¢–ï–¢!
        specialized = self._get_specialized_prompts(activity_type, business_type)
        
        # –ë–∞–∑–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –ø—Ä–æ–º–ø—Ç–æ–≤
        base_prompts = [
            f"professional {business_type} service office interior",
            f"modern {business_type} equipment and workspace",
            f"expert team providing {business_type} services",
            f"high quality {business_type} process in action",
            f"satisfied customer receiving {business_type} service",
            f"clean organized {business_type} business environment",
            f"professional {business_type} consultation meeting",
            f"reliable {business_type} service delivery"
        ]
        
        # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ø–µ—Ä–≤—ã–º–∏, –∑–∞—Ç–µ–º –±–∞–∑–æ–≤—ã–µ
        all_prompts = specialized + base_prompts
        
        # –í—ã–±–∏—Ä–∞–µ–º 8 –ª—É—á—à–∏—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ (—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ)
        selected_prompts = self._select_best_prompts(all_prompts, 8)
        
        if not silent_mode:
            print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(selected_prompts)} –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è {theme}")
        
        return selected_prompts
    
    def _get_specialized_prompts(self, activity_type, business_type):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –ø–æ —Ç–∏–ø—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –ø—Ä–æ–º–ø—Ç–æ–≤ –ø–æ —Ç–∏–ø–∞–º –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        activity_templates = {
            'automotive': [
                f"professional automotive service garage with modern {business_type} equipment",
                f"clean well-organized automotive workshop with professional tools",
                f"experienced auto mechanic working on vehicle in modern garage",
                f"comfortable customer waiting area in automotive service center",
                f"high-tech diagnostic equipment for {business_type}",
                f"professional automotive technician using modern tools",
                f"modern vehicle service bay with professional equipment",
                f"mobile {business_type} van with professional automotive tools"
            ],
            'investment': [
                f"professional financial consultant explaining {business_type} strategies in modern office environment",
                f"expert investment advisor presenting market analysis and portfolio management solutions",
                f"modern financial consultation office with charts, graphs and {business_type} documentation",
                f"confident financial specialist providing personalized {business_type} guidance and expertise",
                f"professional investment presentation showcasing growth opportunities and financial strategies",
                f"experienced financial advisor explaining {business_type} principles with detailed market analysis",
                f"modern investment consultation setting with professional financial planning resources",
                f"expert investment counselor providing comprehensive {business_type} education and guidance"
            ],
            'training': [
                f"modern classroom with students learning {business_type}",
                f"professional instructor teaching {business_type} lesson",
                f"interactive {business_type} learning session",
                f"students engaged in {business_type} conversation practice",
                f"educational environment for {business_type} courses",
                f"group study session for {business_type} learning",
                f"modern language school classroom with {business_type} materials",
                f"teacher explaining {business_type} grammar on whiteboard"
            ],
            'food': [
                f"professional kitchen preparing {business_type}",
                f"fresh ingredients for {business_type} dishes",
                f"chef creating delicious {business_type} meal",
                f"elegant restaurant serving {business_type}",
                f"appetizing {business_type} presentation on plate"
            ],
            'healthcare': [
                f"clean medical facility for {business_type}",
                f"professional healthcare provider offering {business_type}",
                f"modern medical equipment for {business_type}",
                f"comfortable patient area in {business_type} clinic",
                f"sterile medical environment for {business_type} procedures"
            ],
            'beauty': [
                f"elegant salon interior for {business_type} services",
                f"professional stylist providing {business_type}",
                f"relaxing spa environment for {business_type}",
                f"modern beauty equipment for {business_type}",
                f"luxurious treatment room for {business_type} services"
            ],
            'construction': [
                f"professional construction site with {business_type} work",
                f"modern construction equipment for {business_type}",
                f"skilled workers performing {business_type} tasks",
                f"well-organized workshop for {business_type} projects",
                f"high-quality materials for {business_type} construction"
            ],
            'retail': [
                f"modern showroom displaying {business_type}",
                f"well-organized store with {business_type} products",
                f"professional sales environment for {business_type}",
                f"attractive product display of {business_type}",
                f"customer-friendly retail space for {business_type}"
            ],
            'tire_service': [
                f"professional tire service facility with {business_type} expertise",
                f"modern tire installation bay with professional {business_type} equipment",
                f"experienced tire technician working with {business_type} tools",
                f"comprehensive tire showroom with {business_type} selection",
                f"quality tire service center with professional {business_type} standards"
            ],
            'student_housing': [
                f"modern student accommodation with {business_type} facilities",
                f"comfortable student apartment showcasing {business_type} amenities",
                f"professional student housing office with {business_type} services",
                f"student-friendly living space with {business_type} features",
                f"quality student housing complex with {business_type} standards"
            ],
            'land_plots': [
                f"beautiful rural property showcasing {business_type} potential",
                f"scenic country land with {business_type} development opportunities",
                f"professional real estate consultation for {business_type} investment",
                f"expansive agricultural land with {business_type} possibilities",
                f"country property office specializing in {business_type} sales"
            ],
            'short_rental': [
                f"elegant vacation rental with {business_type} amenities",
                f"professional short-term accommodation with {business_type} services",
                f"luxurious rental property featuring {business_type} comfort",
                f"modern vacation rental office with {business_type} booking",
                f"quality short-term housing with {business_type} hospitality"
            ],
            'landscape': [
                f"professional landscaping project with {business_type} design",
                f"beautiful garden transformation using {business_type} expertise",
                f"modern landscaping equipment for {business_type} work",
                f"expert landscape design consultation for {business_type} projects",
                f"quality outdoor space creation with {business_type} craftsmanship"
            ]
        }
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã
        if 'food delivery' in business_type.lower() or 'delivery' in business_type.lower():
            return [
                "delicious hot pizza ready for delivery",
                "fresh salad bowls and healthy meals",
                "gourmet burger and fries meal",
                "asian noodle dishes and sushi platters",
                "professional food delivery packaging"
            ]
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
        if activity_type == 'investment' and ('–∫—É—Ä—Å—ã' in business_type.lower() or 'courses' in business_type.lower()):
            return [
                f"professional investment education classroom with financial analysis on screens and whiteboards",
                f"experienced investment instructor explaining market strategies to engaged students",
                f"modern financial education center with charts, graphs and investment learning materials",
                f"interactive investment course with students analyzing portfolio management and market trends",
                f"professional investment training environment with financial software and educational resources",
                f"expert financial educator teaching investment principles in well-equipped classroom",
                f"students practicing investment analysis with professional trading simulation software",
                f"comprehensive investment education facility with market data displays and learning tools"
            ]
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —è–∑—ã–∫–æ–≤—ã—Ö –∫—É—Ä—Å–æ–≤
        if 'courses' in business_type.lower() and activity_type == 'training':
            return [
                f"modern classroom with students learning {business_type}",
                f"professional teacher explaining {business_type} lesson",
                f"interactive {business_type} conversation practice",
                f"students engaged in {business_type} group study",
                f"language school classroom with {business_type} materials",
                f"instructor teaching {business_type} grammar",
                f"students practicing {business_type} speaking skills",
                f"modern educational environment for {business_type}"
            ]
        
        # –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –¥–ª—è –Ω–æ–≤—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–º–∞—Ç–∏–∫
        
        # –®–∏–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏
        if activity_type == 'tire_service':
            return [
                f"professional tire shop with modern wheel alignment equipment and seasonal tire storage",
                f"expert tire technician installing new tires on vehicle in modern automotive service bay",
                f"comprehensive tire showroom displaying premium tire brands and seasonal tire options",
                f"professional tire replacement service with advanced tire mounting and balancing equipment",
                f"modern tire service center with quality tire storage and professional installation tools",
                f"experienced tire specialist providing tire consultation and seasonal tire change services",
                f"well-organized tire warehouse with extensive tire inventory and professional service area",
                f"professional automotive tire service with modern diagnostic equipment and tire expertise"
            ]
        
        # –°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å
        elif activity_type == 'student_housing':
            return [
                f"modern student apartment complex with comfortable living spaces and study areas",
                f"professional student housing manager showing apartment to prospective student tenants",
                f"well-furnished student apartment with modern amenities and study-friendly environment",
                f"student housing office with professional rental consultation and lease agreement services",
                f"comfortable student dormitory exterior with modern student housing facilities",
                f"friendly student housing team providing rental assistance and housing solutions",
                f"modern student apartment interior showcasing comfortable and affordable student living",
                f"professional student housing consultation with rental options and housing guidance"
            ]
        
        # –ó–∞–≥–æ—Ä–æ–¥–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏  
        elif activity_type == 'land_plots':
            return [
                f"beautiful rural land plots with scenic countryside views and development potential",
                f"professional real estate agent showcasing premium agricultural land and country properties",
                f"picturesque country property with farmhouse potential and agricultural land development",
                f"expert land consultant providing guidance on rural property investment and land development",
                f"expansive agricultural land with fertile soil perfect for farming and country living",
                f"professional land sales office with rural property portfolios and development consultation",
                f"scenic country property with beautiful landscape views and agricultural potential",
                f"experienced real estate specialist presenting country land opportunities and rural investments"
            ]
        
        # –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –∞—Ä–µ–Ω–¥–∞
        elif activity_type == 'short_rental':
            return [
                f"elegant short-term rental apartment with modern furnishings and guest amenities",
                f"professional short-term rental manager providing accommodation services and guest support",
                f"luxurious vacation rental interior with comfortable furnishings and modern conveniences",
                f"short-term rental office with professional booking services and guest accommodation",
                f"beautiful vacation rental property exterior with attractive amenities and guest facilities"
            ]
        
        # –õ–∞–Ω–¥—à–∞—Ñ—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
        elif activity_type == 'landscape':
            return [
                f"professional landscape designer creating beautiful garden design with modern landscaping tools",
                f"expert landscaping team transforming outdoor spaces with creative garden design and installation",
                f"beautiful landscaping project showcasing professional garden design and quality workmanship",
                f"modern landscaping equipment and tools for professional garden construction and maintenance",
                f"experienced landscape architect planning outdoor space transformation with design expertise"
            ]
        
        # –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏
        elif activity_type == 'credit_assessment':
            return [
                f"professional credit analyst reviewing client financial documents",
                f"modern financial analysis office with credit assessment systems",
                f"expert credit specialist conducting creditworthiness evaluation",
                f"financial evaluation center with credit scoring technology",
                f"experienced credit advisor providing assessment consultation",
                f"professional banking office with credit analysis tools",
                f"modern credit bureau with financial data analysis",
                f"expert financial analyst evaluating business creditworthiness"
            ]
        
        # –ò–º–ø–æ—Ä—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        elif activity_type == 'car_import':
            return [
                f"luxury imported cars from USA, Korea, and Europe in premium showroom",
                f"professional car import specialist explaining vehicle documentation and specifications",
                f"high-end imported vehicles displayed in modern automotive gallery with international certificates",
                f"expert consultant showing imported car specifications and import documentation",
                f"premium car selection service with international vehicle portfolio and expertise",
                f"modern office with imported car catalogs and international automotive expertise",
                f"professional car import consultation with vehicle history and legal documentation",
                f"luxury automotive showroom featuring premium imported vehicles from overseas markets"
            ]
        
        # –ó–∞—Ä—É–±–µ–∂–Ω–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å
        if activity_type == 'foreign_real_estate':
            return [
                f"professional international real estate consultant with global property investment portfolio", 
                f"modern office with world map showing foreign real estate opportunities and market analysis",
                f"luxury international property presentations and investment documentation with global expertise",
                f"expert advisor explaining foreign real estate investment strategies and overseas opportunities",
                f"premium international real estate facility with global market expertise and guidance"
            ]
        
        # –í–æ–¥–∏—Ç–µ–ª—å/—à–æ—Ñ–µ—Ä —É—Å–ª—É–≥–∏ 
        if activity_type == 'chauffeur_service':
            return [
                f"professional chauffeur in elegant uniform standing beside luxury vehicle fleet",
                f"premium car rental service with experienced professional driver in elegant attire",
                f"luxury vehicle interior showcasing comfort and professional chauffeur service",
                f"experienced driver providing personalized luxury transportation service with professional standards",
                f"elegant chauffeur service office with luxury car fleet display and professional team",
                f"professional driver consultation explaining premium transportation options and luxury services",
                f"luxury car rental facility with professional chauffeur team and premium vehicle selection",
                f"premium transportation service with skilled professional drivers and luxury vehicle fleet"
            ]
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —à–∞–±–ª–æ–Ω—ã –¥–ª—è —Ç–∏–ø–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–ª–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ
        return activity_templates.get(activity_type, [
            f"professional {business_type} service environment",
            f"modern {business_type} workplace setup",
            f"quality {business_type} service delivery",
            f"trusted {business_type} business facility",
            f"expert team providing {business_type} services"
        ])
    
    def _select_best_prompts(self, prompts, count):
        """–í—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–µ –ø—Ä–æ–º–ø—Ç—ã –∏–∑–±–µ–≥–∞—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
        selected = []
        used_keywords = set()
        used_combinations = set()
        
        for prompt in prompts:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Å–ª–æ–≤ (–Ω–µ —Ç–æ–ª—å–∫–æ –¥–ª–∏–Ω–Ω—ã—Ö)
            words = prompt.lower().split()
            key_words = [w for w in words if len(w) > 3]  # –ü–æ–Ω–∏–∑–∏–ª–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ —Å 4 –¥–æ 3
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–≤—ã—Ö 3 —Å–ª–æ–≤ –¥–ª—è –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            word_combination = ' '.join(sorted(key_words[:5]))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º, —Ç–∞–∫ –∏ –ø–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º
            if (not any(word in used_keywords for word in key_words[:3]) and 
                word_combination not in used_combinations):
                
                selected.append(prompt)
                used_keywords.update(key_words[:3])
                used_combinations.add(word_combination)
                
                if len(selected) >= count:
                    break
        
        # –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è–º–∏
        while len(selected) < count and len(selected) < len(prompts):
            for prompt in prompts:
                if prompt not in selected:
                    # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                    unique_modifier = self._generate_unique_modifier()
                    modified_prompt = f"{prompt}, {unique_modifier}"
                    selected.append(modified_prompt)
                    if len(selected) >= count:
                        break
        
        return selected
    
    def _generate_unique_modifier(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞"""
        timestamp = str(int(time.time()))[-4:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –≤—Ä–µ–º–µ–Ω–∏
        unique_id = str(uuid.uuid4())[:8]
        
        modifiers = [
            f"detailed view {timestamp}",
            f"professional angle {unique_id[:4]}",
            f"quality focus {timestamp}",
            f"expert perspective {unique_id[:6]}",
            f"premium shot {timestamp[-3:]}",
            f"skilled composition {unique_id[-4:]}"
        ]
        
        return self.rng.choice(modifiers)
    
    def _add_uniqueness_to_prompt(self, base_prompt, image_type, business_type):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫ –±–∞–∑–æ–≤–æ–º—É –ø—Ä–æ–º–ø—Ç—É"""
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å
        style = self.rng.choice(self.style_modifiers)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è —Ç–∏–ø–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        detail_type = "main" if image_type == "main" else ("about" if "about" in image_type else "review")
        unique_detail = self.rng.choice(self.unique_details.get(detail_type, self.unique_details["main"]))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞
        quality = self.rng.choice(self.quality_descriptors)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
        timestamp = str(int(time.time() * 1000))[-6:]  # –ú–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        unique_element = f"composition_{timestamp}"
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–º–µ—Å—Ç–µ
        enhanced_prompt = f"{style} {base_prompt}, {unique_detail}, {quality}, {unique_element}"
        
        return enhanced_prompt
    
    def _ensure_prompt_uniqueness(self, prompts_dict):
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –≤ –Ω–∞–±–æ—Ä–µ"""
        used_words = set()
        enhanced_prompts = {}
        
        for key, prompt in prompts_dict.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ –ø—Ä–æ–º–ø—Ç–µ
            main_words = [word.lower() for word in prompt.split() if len(word) > 4][:5]
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –¥–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
            if any(word in used_words for word in main_words):
                unique_suffix = f", enhanced_{str(uuid.uuid4())[:6]}"
                enhanced_prompts[key] = f"{prompt}{unique_suffix}"
            else:
                enhanced_prompts[key] = prompt
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
            used_words.update(main_words)
        
        return enhanced_prompts
    
    def _calculate_uniqueness_score(self, prompts_dict):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –æ—Ü–µ–Ω–∫—É —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–º–ø—Ç–æ–≤"""
        all_words = []
        for prompt in prompts_dict.values():
            words = [word.lower() for word in prompt.split() if len(word) > 3]
            all_words.extend(words)
        
        unique_words = len(set(all_words))
        total_words = len(all_words)
        
        if total_words == 0:
            return 0
        
        uniqueness_score = (unique_words / total_words) * 100
        return round(uniqueness_score, 1)
    
    def _select_random_variant(self, variants):
        """–í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å—é"""
        if not variants:
            return ""
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        selected = self.rng.choice(variants)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
        timestamp = str(int(time.time() * 1000))[-3:]
        return f"{selected}, variant_{timestamp}"
    
    def _create_clean_about_prompt(self, base_content, prefixes, prompt_num):
        """–°–æ–∑–¥–∞–µ—Ç —á–∏—Å—Ç—ã–π about –ø—Ä–æ–º–ø—Ç –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –∏ —Å—Ç—Ä–∞–Ω–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π"""
        
        # –£–º–Ω—ã–µ —Å—É—Ñ—Ñ–∏–∫—Å—ã –ø–æ –Ω–æ–º–µ—Ä—É –ø—Ä–æ–º–ø—Ç–∞
        smart_suffixes = {
            1: ["", "and tools", "for professionals", "with expertise"],  # –ö–æ—Ä–æ—Ç–∫–∏–µ, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ
            2: ["in action", "with precision", "and quality", "ensuring results"],  # –ü—Ä–æ—Ü–µ—Å—Å—ã  
            3: ["and environment", "with standards", "ensuring excellence", "and reliability"]  # –ú–µ—Å—Ç–∞/—Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã
        }
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
        prefix = self.rng.choice(prefixes)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ —Å–ª–æ–≤–æ –≤ base_content
        base_words = set(base_content.lower().split())
        
        # –ï—Å–ª–∏ –ø—Ä–µ—Ñ–∏–∫—Å —É–∂–µ –µ—Å—Ç—å –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º, –±–µ—Ä–µ–º –¥—Ä—É–≥–æ–π
        attempts = 0
        while prefix.lower() in base_words and attempts < 5:
            prefix = self.rng.choice(prefixes)
            attempts += 1
        
        # –ï—Å–ª–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å
        if prefix.lower() in base_words:
            prefix = "high-quality"
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—É—Ñ—Ñ–∏–∫—Å
        suffix = self.rng.choice(smart_suffixes.get(prompt_num, smart_suffixes[1]))
        
        # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–ø—Ç
        if suffix:
            prompt = f"{prefix} {base_content} {suffix}"
        else:
            prompt = f"{prefix} {base_content}"
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏ —Å–ª–æ–≤ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        prompt = self._remove_word_duplicates(prompt)
        
        return prompt
    
    def _remove_word_duplicates(self, text):
        """–£–±–∏—Ä–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å"""
        words = text.split()
        seen = set()
        result = []
        
        for word in words:
            word_clean = word.lower().strip('.,!?;:')
            if word_clean not in seen:
                seen.add(word_clean)
                result.append(word)
            # –ï—Å–ª–∏ —Å–ª–æ–≤–æ —É–∂–µ –±—ã–ª–æ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
        
        return ' '.join(result)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –¥—Ä—É–≥–∏–º–∏ –º–æ–¥—É–ª—è–º–∏
def create_thematic_prompts(theme_input):
    """–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–´ –í–°–ï –í–ù–ï–®–ù–ò–ï –ò–ò - —Ç–æ–ª—å–∫–æ –Ω–∞–¥–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞!"""
    print("üî• create_thematic_prompts: –í–°–ï –í–ù–ï–®–ù–ò–ï –ò–ò –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–´!")
    
    # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ü–†–û–ü–£–°–ö–ê–ï–ú –í–°–ï –í–ù–ï–®–ù–ò–ï –ò–ò
    # –°—Ä–∞–∑—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–¥–µ–∂–Ω—É—é fallback —Å–∏—Å—Ç–µ–º—É
    generator = SmartPromptGenerator()
    return generator.generate_prompts(theme_input, silent_mode=True)

# –ì–õ–û–ë–ê–õ–¨–ù–´–ô –ö–≠–® –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –ª–∏—Ü –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
_FACE_CACHE = {
    'used_combinations': set(),
    'last_reset': time.time() if 'time' in globals() else 0,
    'session_counter': 0
}

def create_human_focused_review_prompts():
    """
    –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –ª–∏—Ü –¥–ª—è review –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    –û–¢–ö–õ–Æ–ß–ï–ù–´ –í–°–ï –í–ù–ï–®–ù–ò–ï –ò–ò - —Ç–æ–ª—å–∫–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ!
    + –°–ò–°–¢–ï–ú–ê –†–û–¢–ê–¶–ò–ò –ü–û–î–¢–ò–ü–û–í –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
    + –ì–õ–û–ë–ê–õ–¨–ù–´–ô –ö–≠–® –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    """
    # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –û–¢–ö–õ–Æ–ß–ê–ï–ú –í–°–ï –í–ù–ï–®–ù–ò–ï –ò–ò-–°–ò–°–¢–ï–ú–´
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–£–Æ —Å–∏—Å—Ç–µ–º—É —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
    
    import random
    import time
    import uuid
    import hashlib
    
    global _FACE_CACHE
    
    print("üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –†–ê–ó–ù–û–û–ë–†–ê–ó–ò–Ø –õ–ò–¶!")
    print("üö´ –í–°–ï –í–ù–ï–®–ù–ò–ï –ò–ò –û–¢–ö–õ–Æ–ß–ï–ù–´ - –¢–û–õ–¨–ö–û –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û–ï –†–ê–ó–ù–û–û–ë–†–ê–ó–ò–ï!")
    print("üîÑ –ê–ö–¢–ò–í–ù–ê –°–ò–°–¢–ï–ú–ê –†–û–¢–ê–¶–ò–ò –ü–û–î–¢–ò–ü–û–í!")
    print("üíæ –ê–ö–¢–ò–í–ï–ù –ì–õ–û–ë–ê–õ–¨–ù–´–ô –ö–≠–® –ü–†–ï–î–û–¢–í–†–ê–©–ï–ù–ò–Ø –ü–û–í–¢–û–†–ï–ù–ò–ô!")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –∏–ª–∏ –∫–∞–∂–¥—ã–µ 50 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    current_time = time.time()
    _FACE_CACHE['session_counter'] += 1
    if (current_time - _FACE_CACHE['last_reset'] > 300 or  # 5 –º–∏–Ω—É—Ç
        _FACE_CACHE['session_counter'] > 50):  # 50 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        _FACE_CACHE['used_combinations'].clear()
        _FACE_CACHE['last_reset'] = current_time
        _FACE_CACHE['session_counter'] = 0
        print("üîÑ –ö–≠–® –°–ë–†–û–®–ï–ù - –ù–ê–ß–ò–ù–ê–ï–ú –ù–û–í–´–ô –¶–ò–ö–õ –†–ê–ó–ù–û–û–ë–†–ê–ó–ò–Ø")
    
    print(f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: {len(_FACE_CACHE['used_combinations'])}")
    print(f"üî¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è #{_FACE_CACHE['session_counter']}")
    
    # –°–£–ü–ï–†-–†–û–¢–ê–¢–û–† –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –ª–∏—Ü –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—ã–∑–æ–≤–µ
    current_time_factor = int(time.time()) % 1000  # –ú–µ–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    rotation_seed = (current_time_factor + 
                    random.randint(1, 999999) + 
                    hash(str(uuid.uuid4())) + 
                    os.getpid() +
                    _FACE_CACHE['session_counter'])  # –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–µ—Å—Å–∏–∏
    
    print(f"üé≤ –§–∞–∫—Ç–æ—Ä —Ä–æ—Ç–∞—Ü–∏–∏: {current_time_factor}")
    
    def generate_unique_combination(base_type, subtype_choices, attempt=0):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é, –∏–∑–±–µ–≥–∞—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π"""
        # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ü–∏–∫–ª—ã
        if attempt > 20:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –Ω–∞–π—Ç–∏ —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é
            print(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ ({attempt}), —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –¥–ª—è {base_type}")
            _FACE_CACHE['used_combinations'].clear()
            return f"{base_type}_reset_{int(time.time())}"
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
        if not subtype_choices or len(subtype_choices) == 0:
            print(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ subtype_choices –¥–ª—è {base_type}")
            return f"{base_type}_default_{attempt}_{int(time.time())}"
            
        # –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —ç–Ω—Ç—Ä–æ–ø–∏–µ–π
        import random
        extra_entropy = random.randint(1, 999999)
        subtype_index = (rotation_seed + attempt + extra_entropy) % len(subtype_choices)
        combo_key = f"{base_type}_{subtype_index}_{attempt}_{extra_entropy}_{int(time.time() * 1000) % 100000}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–º –ª–∏–º–∏—Ç–æ–º
        if combo_key in _FACE_CACHE['used_combinations']:
            return generate_unique_combination(base_type, subtype_choices, attempt + 1)
        
        _FACE_CACHE['used_combinations'].add(combo_key)
        return combo_key
    
    # –ü–û–î–•–û–î 1: –ï–í–†–û–ü–ï–ô–°–ö–ò–ï/–ó–ê–ü–ê–î–ù–´–ï –¢–ò–ü–´ –õ–ò–¶–ê (—Å —Ä–æ—Ç–∞—Ü–∏–µ–π –ø–æ–¥—Ç–∏–ø–æ–≤)
    def generate_western_face():
        rng1 = random.Random()
        # –°–£–ü–ï–†-—ç–Ω—Ç—Ä–æ–ø–∏–π–Ω—ã–π seed –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        mega_seed = (int(time.time() * 9999999) + 
                    hash(str(uuid.uuid4())) + 
                    os.getpid() + 
                    random.getrandbits(64) + 
                    hash(str(time.perf_counter())) +
                    random.randint(1000000, 9999999) +
                    rotation_seed +
                    _FACE_CACHE['session_counter'] * 1000)
        rng1.seed(mega_seed)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
        unique_combo = generate_unique_combination("western", ["scand", "south", "central"])
        
        # –†–û–¢–ê–¶–ò–Ø: —Ä–∞–∑–Ω—ã–µ –ø–æ–¥—Ç–∏–ø—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏
        if rotation_seed % 3 == 0:
            # –°–ö–ê–ù–î–ò–ù–ê–í–°–ö–ò–ô –ø–æ–¥—Ç–∏–ø
            ethnicities = ["Nordic blonde professional", "Swedish businesswoman", "Norwegian executive", 
                          "Danish manager", "Finnish specialist", "Icelandic consultant"]
            hair_colors = ["platinum blonde", "golden blonde", "ash blonde", "light blonde", "white blonde"]
            eye_colors = ["piercing blue eyes", "ice blue eyes", "crystal blue eyes", "arctic blue eyes"]
            subtype_id = "scand"
        elif rotation_seed % 3 == 1:
            # –Æ–ñ–ù–û-–ï–í–†–û–ü–ï–ô–°–ö–ò–ô –ø–æ–¥—Ç–∏–ø  
            ethnicities = ["Mediterranean beauty", "Italian elegance", "Spanish charm", 
                          "Greek professional", "Portuguese executive", "French sophistication"]
            hair_colors = ["dark brunette", "chestnut brown", "auburn red", "espresso brown", "mahogany"]
            eye_colors = ["warm hazel eyes", "deep brown eyes", "olive green eyes", "amber eyes"]
            subtype_id = "south"
        else:
            # –¶–ï–ù–¢–†–ê–õ–¨–ù–û-–ï–í–†–û–ü–ï–ô–°–ö–ò–ô –ø–æ–¥—Ç–∏–ø
            ethnicities = ["Germanic features", "Austrian professional", "Swiss executive",
                          "Dutch businesswoman", "Belgian manager", "Bavarian specialist"]
            hair_colors = ["honey brown", "caramel blonde", "light brunette", "copper red", "strawberry blonde"]
            eye_colors = ["emerald green eyes", "steel gray eyes", "forest green eyes", "violet blue eyes"]
            subtype_id = "central"
        
        ages = ["young adult 22-28", "early thirties 29-35", "mid-thirties 36-42", "early forties 43-50",
               "late twenties 27-32", "professional 33-39", "experienced 40-47", "mature 48-55"]
        expressions = ["radiant genuine smile", "confident satisfied expression", "warm friendly demeanor",
                      "professional pleasant look", "authentic happy face", "sincere grateful expression"]
        clothing = ["elegant business attire", "contemporary professional outfit", "smart casual ensemble",
                   "sophisticated styling", "modern executive wear", "polished appearance"]
        
        # –¢—Ä–æ–π–Ω–∞—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å + –∫—ç—à ID
        unique_id1 = str(uuid.uuid4())[:8]
        unique_id2 = str(uuid.uuid4())[9:17]
        timestamp = str(int(time.time() * 9999999))[-10:]
        cache_id = str(hash(unique_combo))[-6:] if unique_combo else "000000"
        
        return (f"professional portrait of {rng1.choice(ethnicities)}, {rng1.choice(ages)}, "
                f"{rng1.choice(hair_colors)}, {rng1.choice(eye_colors)}, {rng1.choice(expressions)}, "
                f"{rng1.choice(clothing)}, high quality headshot photography, natural lighting, "
                f"HUMAN FACE ONLY, NO OBJECTS, western_{unique_id1}, euro_{unique_id2}, time_{timestamp}, "
                f"rot_{rotation_seed%3}, cache_{cache_id}, {subtype_id}")
    
    # –ü–û–î–•–û–î 2: –ê–ó–ò–ê–¢–°–ö–ò–ï/–í–û–°–¢–û–ß–ù–´–ï –¢–ò–ü–´ –õ–ò–¶–ê (—Å —Ä–æ—Ç–∞—Ü–∏–µ–π –ø–æ–¥—Ç–∏–ø–æ–≤)
    def generate_asian_face():
        rng2 = random.Random()
        # –°–£–ü–ï–†-—ç–Ω—Ç—Ä–æ–ø–∏–π–Ω—ã–π seed —Å –¥—Ä—É–≥–æ–π –±–∞–∑–æ–π
        mega_seed = (int(time.time() * 7777777) + 
                    hash(str(uuid.uuid4())) + 
                    os.getpid() + 
                    random.getrandbits(64) + 
                    hash(str(time.perf_counter())) +
                    random.randint(2000000, 8888888) + 555555 +
                    rotation_seed * 2 +
                    _FACE_CACHE['session_counter'] * 2000)
        rng2.seed(mega_seed)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
        unique_combo = generate_unique_combination("asian", ["east", "southeast", "south", "central"])
        
        # –†–û–¢–ê–¶–ò–Ø: —Ä–∞–∑–Ω—ã–µ –ø–æ–¥—Ç–∏–ø—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏
        if rotation_seed % 4 == 0:
            # –í–û–°–¢–û–ß–ù–û-–ê–ó–ò–ê–¢–°–ö–ò–ô –ø–æ–¥—Ç–∏–ø
            ethnicities = ["Korean businesswoman", "Japanese executive", "Chinese manager", 
                          "Taiwanese specialist", "Hong Kong professional"]
            subtype_id = "east"
        elif rotation_seed % 4 == 1:
            # –Æ–ì–û-–í–û–°–¢–û–ß–ù–ê–Ø –ê–ó–ò–Ø –ø–æ–¥—Ç–∏–ø
            ethnicities = ["Vietnamese consultant", "Thai specialist", "Filipino expert",
                          "Indonesian professional", "Malaysian business leader", "Singaporean executive"]
            subtype_id = "southeast"
        elif rotation_seed % 4 == 2:
            # –Æ–ñ–ù–ê–Ø –ê–ó–ò–Ø –ø–æ–¥—Ç–∏–ø
            ethnicities = ["Indian professional", "Pakistani executive", "Bangladeshi manager",
                          "Sri Lankan specialist", "Nepalese consultant"]
            subtype_id = "south"
        else:
            # –¶–ï–ù–¢–†–ê–õ–¨–ù–ê–Ø –ê–ó–ò–Ø –ø–æ–¥—Ç–∏–ø
            ethnicities = ["Mongolian professional", "Kazakh executive", "Uzbek businesswoman",
                          "Kyrgyz specialist", "Tajik manager"]
            subtype_id = "central"
        
        ages = ["young professional 24-30", "established career 31-38", "experienced worker 39-46", 
               "senior specialist 47-55", "rising star 25-32", "accomplished 33-40", "veteran 41-48"]
        features = ["elegant refined features", "striking beautiful appearance", "graceful professional look", 
                   "sophisticated charm", "distinctive attractive features", "classic beauty", "modern elegance"]
        styles = ["contemporary business attire", "sophisticated professional outfit", "elegant work ensemble",
                 "polished executive style", "modern professional dress", "refined business wear"]
        expressions = ["confident professional smile", "warm genuine expression", "satisfied pleased demeanor",
                      "authentic happy face", "sincere grateful look", "positive radiant smile"]
        
        # –¢—Ä–æ–π–Ω–∞—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å + –∫—ç—à ID
        unique_id1 = str(uuid.uuid4())[:8]
        unique_id2 = str(uuid.uuid4())[18:26]
        timestamp = str(int(time.time() * 7777777))[-10:]
        session_hash = hashlib.md5(f"{time.time()}_{random.random()}_{rng2.random()}".encode()).hexdigest()[:10]
        cache_id = str(hash(unique_combo))[-6:] if unique_combo else "000000"
        
        return (f"professional portrait of {rng2.choice(ethnicities)}, {rng2.choice(ages)}, "
                f"{rng2.choice(features)}, {rng2.choice(expressions)}, {rng2.choice(styles)}, "
                f"high quality business photography, professional lighting, confident demeanor, "
                f"HUMAN FACE ONLY, NO OBJECTS, asian_{unique_id1}, orient_{unique_id2}, time_{timestamp}, "
                f"hash_{session_hash}, rot_{rotation_seed%4}, cache_{cache_id}, {subtype_id}")
    
    # –ü–û–î–•–û–î 3: –ê–§–†–ò–ö–ê–ù–°–ö–ò–ï/–õ–ê–¢–ò–ù–û–ê–ú–ï–†–ò–ö–ê–ù–°–ö–ò–ï –¢–ò–ü–´ –õ–ò–¶–ê (—Å —Ä–æ—Ç–∞—Ü–∏–µ–π –ø–æ–¥—Ç–∏–ø–æ–≤)
    def generate_diverse_face():
        rng3 = random.Random()
        # –°–£–ü–ï–†-—ç–Ω—Ç—Ä–æ–ø–∏–π–Ω—ã–π seed —Å —Ç—Ä–µ—Ç—å–µ–π –±–∞–∑–æ–π
        mega_seed = (int(time.time() * 5555555) + 
                    hash(str(uuid.uuid4())) + 
                    os.getpid() + 
                    random.getrandbits(64) + 
                    hash(str(time.perf_counter())) +
                    random.randint(3000000, 7777777) + 999999 +
                    rotation_seed * 3 +
                    _FACE_CACHE['session_counter'] * 3000)
        rng3.seed(mega_seed)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
        unique_combo = generate_unique_combination("diverse", ["african", "latino", "middle", "indian", "mixed"])
        
        # –†–û–¢–ê–¶–ò–Ø: —Ä–∞–∑–Ω—ã–µ –ø–æ–¥—Ç–∏–ø—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏
        if rotation_seed % 5 == 0:
            # –ê–§–†–ò–ö–ê–ù–°–ö–ò–ô –ø–æ–¥—Ç–∏–ø
            ethnicities = ["African American professional", "Nigerian businesswoman", "Ethiopian executive", 
                          "Kenyan manager", "Ghanaian specialist", "South African consultant"]
            subtype_id = "african"
        elif rotation_seed % 5 == 1:
            # –õ–ê–¢–ò–ù–û–ê–ú–ï–†–ò–ö–ê–ù–°–ö–ò–ô –ø–æ–¥—Ç–∏–ø
            ethnicities = ["Latina businesswoman", "Brazilian manager", "Mexican consultant", 
                          "Colombian expert", "Argentine professional", "Peruvian specialist"]
            subtype_id = "latino"
        elif rotation_seed % 5 == 2:
            # –ë–õ–ò–ñ–ù–ï–í–û–°–¢–û–ß–ù–´–ô –ø–æ–¥—Ç–∏–ø
            ethnicities = ["Middle Eastern executive", "Arab professional", "Egyptian business leader", 
                          "Moroccan executive", "Lebanese specialist", "Turkish manager"]
            subtype_id = "middle"
        elif rotation_seed % 5 == 3:
            # –ò–ù–î–ò–ô–°–ö–ò–ô –ø–æ–¥—Ç–∏–ø
            ethnicities = ["Indian specialist", "Pakistani professional", "Bangladeshi executive",
                          "Sri Lankan manager", "Indian-American businesswoman"]
            subtype_id = "indian"
        else:
            # –°–ú–ï–®–ê–ù–ù–´–ô –ø–æ–¥—Ç–∏–ø
            ethnicities = ["mixed heritage professional", "biracial executive", "multicultural businesswoman",
                          "international background manager", "global citizen specialist"]
            subtype_id = "mixed"
        
        ages = ["dynamic young professional 23-29", "accomplished career woman 30-37", "experienced leader 38-45", 
               "senior executive 46-53", "rising professional 26-33", "established expert 34-41"]
        features = ["striking natural beauty", "warm expressive features", "confident attractive appearance", 
                   "radiant professional presence", "distinctive elegant look", "captivating smile"]
        styles = ["professional power suit", "elegant business ensemble", "contemporary work attire",
                 "sophisticated office wear", "polished executive outfit", "modern professional styling"]
        emotions = ["genuinely thrilled", "deeply satisfied", "extremely pleased", "authentically grateful", 
                   "remarkably content", "profoundly happy", "sincerely delighted", "truly appreciative"]
        contexts = ["celebrating success", "expressing satisfaction", "showing gratitude", "radiating confidence",
                   "demonstrating joy", "displaying happiness", "conveying appreciation", "expressing delight"]
        
        # –ß–µ—Ç–≤–µ—Ä–Ω–∞—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å + –∫—ç—à ID
        unique_id1 = str(uuid.uuid4())[:6]
        unique_id2 = str(uuid.uuid4())[9:15]
        unique_id3 = str(uuid.uuid4())[24:30]
        timestamp = str(int(time.time() * 5555555))[-10:]
        random_hash = hashlib.sha256(f"{time.time()}_{random.random()}_{uuid.uuid4()}_{rng3.random()}".encode()).hexdigest()[:12]
        cache_id = str(hash(unique_combo))[-6:] if unique_combo else "000000"
        
        return (f"professional portrait of {rng3.choice(ethnicities)}, {rng3.choice(ages)}, "
                f"{rng3.choice(features)}, {rng3.choice(emotions)}, {rng3.choice(contexts)}, "
                f"{rng3.choice(styles)}, premium business photography, natural professional lighting, "
                f"HUMAN FACE ONLY, NO OBJECTS, diverse_{unique_id1}, multi_{unique_id2}, global_{unique_id3}, "
                f"time_{timestamp}, hash_{random_hash}, rot_{rotation_seed%5}, cache_{cache_id}, {subtype_id}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 3 –ö–ê–†–î–ò–ù–ê–õ–¨–ù–û —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
    review_prompts = [
        generate_western_face(),
        generate_asian_face(), 
        generate_diverse_face()
    ]
    
    print("‚úÖ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–´ 3 –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û –†–ê–ó–ù–´–• –¢–ò–ü–ê –õ–ò–¶:")
    print(f"   üåç –ó–∞–ø–∞–¥–Ω—ã–π/–ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–π (–ø–æ–¥—Ç–∏–ø {rotation_seed%3}): {len(review_prompts[0])} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"   üåè –ê–∑–∏–∞—Ç—Å–∫–∏–π/–í–æ—Å—Ç–æ—á–Ω—ã–π (–ø–æ–¥—Ç–∏–ø {rotation_seed%4}): {len(review_prompts[1])} —Å–∏–º–≤–æ–ª–æ–≤") 
    print(f"   üåé –ê—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∏–π/–õ–∞—Ç–∏–Ω–æ–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π (–ø–æ–¥—Ç–∏–ø {rotation_seed%5}): {len(review_prompts[2])} —Å–∏–º–≤–æ–ª–æ–≤")
    print("   üéØ –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û–ï –†–ê–ó–ù–û–û–ë–†–ê–ó–ò–ï: 100% - –í–ù–ï–®–ù–ò–ï –ò–ò –û–¢–ö–õ–Æ–ß–ï–ù–´!")
    print("   üîÑ –°–ò–°–¢–ï–ú–ê –†–û–¢–ê–¶–ò–ò –ê–ö–¢–ò–í–ù–ê - –ü–û–î–¢–ò–ü–´ –ú–ï–ù–Ø–Æ–¢–°–Ø –ö–ê–ñ–î–£–Æ –°–ï–ö–£–ù–î–£!")
    print("   üíæ –ì–õ–û–ë–ê–õ–¨–ù–´–ô –ö–≠–® –ü–†–ï–î–û–¢–í–†–ê–©–ê–ï–¢ –ü–û–í–¢–û–†–ï–ù–ò–Ø –í –°–ï–°–°–ò–ò!")
    
    return review_prompts


def create_complete_prompts_dict(theme_input):
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–∫–ª—é—á–∞—è review —Å –ª—é–¥—å–º–∏
    –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–´ –í–°–ï –í–ù–ï–®–ù–ò–ï –ò–ò - —Ç–æ–ª—å–∫–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ!
    """
    print("üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–´ –í–°–ï –í–ù–ï–®–ù–ò–ï –ò–ò!")
    print("üéØ –ò–°–ü–û–õ–¨–ó–£–ï–ú –¢–û–õ–¨–ö–û –°–ò–°–¢–ï–ú–£ –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û–ì–û –†–ê–ó–ù–û–û–ë–†–ê–ó–ò–Ø –õ–ò–¶!")
    
    try:
        # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ü–†–û–ü–£–°–ö–ê–ï–ú –í–°–ï –í–ù–ï–®–ù–ò–ï –ò–ò-–°–ò–°–¢–ï–ú–´
        # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞—à–µ–π –Ω–∞–¥–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        import random  # –î–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è main –ø—Ä–æ–º–ø—Ç–æ–≤
        import time    # –î–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
        import uuid    # –î–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID
        
        print("üìù –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä...")
        generator = SmartPromptGenerator()
        
        print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–º–∞—Ç–∏–∫—É...")
        context = generator.analyze_theme(theme_input, silent_mode=True)
        
        business_type = context['business_type']
        activity_type = context['activity_type']
        print(f"üìä –¢–∏–ø –±–∏–∑–Ω–µ—Å–∞: {business_type}, –¢–∏–ø –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {activity_type}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏ —Å –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ô —ç–Ω—Ç—Ä–æ–ø–∏–µ–π
        session_rng = random.Random()
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã + —Å–ª—É—á–∞–π–Ω—ã–π UUID + ID –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        unique_seed = int(time.time() * 1000000) + hash(str(uuid.uuid4())) + os.getpid() + random.randint(1, 1000000)
        session_rng.seed(unique_seed)
        print(f"üé≤ Seed: {unique_seed}")
        
        print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
        
        # –£–ú–ù–ê–Ø –ê–î–ê–ü–¢–ò–í–ù–ê–Ø –°–ü–ï–¶–ò–§–ò–ß–ù–û–°–¢–¨: 8.5+ –±–∞–ª–ª–æ–≤
        
        # –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        core_base = f"professional {business_type} {activity_type} service"
        quality_base = f"modern high quality expert {business_type}"
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –ø–æ —Ç–∏–ø—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –†–ê–ó–ù–û–û–ë–†–ê–ó–ù–´–ú–ò main –ø—Ä–æ–º–ø—Ç–∞–º–∏
        adaptive_details = {
            'automotive': {
                'main': session_rng.choice([
                    'modern automotive service center exterior with professional signage and clean facility',
                    'skilled mechanic team working on vehicles in well-equipped garage',
                    'satisfied customers receiving keys to their serviced vehicles',
                    'professional automotive workshop showcasing expertise and quality service',
                    'clean organized automotive facility with modern equipment and branding'
                ]),
                'about1': 'specialized diagnostic equipment and professional automotive tools',
                'about2': 'hands-on vehicle service process with technical expertise',
                'about3': 'certified automotive workshop with quality assurance standards'
            },
            'healthcare': {
                'main': session_rng.choice([
                    'compassionate healthcare professional providing excellent patient care',
                    'modern medical facility exterior with professional healthcare branding',
                    'successful patient recovery showcasing positive healthcare outcomes',
                    'advanced medical technology ensuring precise diagnosis and treatment',
                    'welcoming healthcare reception with comfortable patient environment'
                ]),
                'about1': 'advanced medical equipment and specialized healthcare tools',
                'about2': 'patient care process with medical expertise and compassion',
                'about3': 'sterile healthcare environment with medical quality standards'
            },
            # –ù–û–í–´–ï –°–ü–ï–¶–ò–§–ò–ß–ù–´–ï –î–ï–¢–ê–õ–ò –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
            'investment': {
                'main': session_rng.choice([
                    'professional investment education classroom with students analyzing market charts',
                    'expert financial instructor explaining investment strategies to engaged learners',
                    'modern financial training center with investment analysis equipment',
                    'interactive investment seminar with real market data and professional guidance',
                    'comprehensive investment education facility with financial software and learning resources'
                ]),
                'about1': 'advanced financial analysis software and investment tracking systems',
                'about2': 'interactive investment education process with market simulation tools',
                'about3': 'professional investment learning environment with real-time market data'
            },
            'training': {
                'main': session_rng.choice([
                    'modern classroom environment with engaged students and professional instructor',
                    'interactive learning session with educational materials and teaching technology',
                    'professional training center with comprehensive educational resources',
                    'dynamic educational environment with students practicing new skills',
                    'well-equipped learning facility with modern teaching equipment'
                ]),
                'about1': 'modern educational technology and interactive learning tools',
                'about2': 'hands-on training process with practical skill development',
                'about3': 'professional learning environment with comprehensive educational resources'
            },
            'chauffeur_service': {
                'main': session_rng.choice([
                    'professional chauffeur in elegant uniform beside luxury vehicle fleet',
                    'premium transportation service with experienced drivers and luxury cars',
                    'elegant chauffeur service office with luxury vehicle display',
                    'professional driver consultation with premium transportation options',
                    'luxury car rental facility with professional chauffeur team'
                ]),
                'about1': 'luxury vehicle fleet and professional chauffeur equipment',
                'about2': 'premium transportation service process with professional standards',
                'about3': 'elegant chauffeur service facility with luxury vehicle maintenance'
            },
            'car_import': {
                'main': session_rng.choice([
                    'luxury imported cars from USA, Korea and Europe in premium showroom',
                    'professional car import specialist with international vehicle documentation',
                    'premium automotive gallery featuring high-end imported vehicles',
                    'expert car selection consultant with global vehicle portfolio',
                    'modern car import facility with international automotive expertise'
                ]),
                'about1': 'international vehicle documentation and import certification systems',
                'about2': 'professional car selection process with global automotive expertise',
                'about3': 'premium car import facility with international vehicle inspection standards'
            },
            'credit_assessment': {
                'main': session_rng.choice([
                    'professional credit analyst reviewing client financial documents',
                    'modern financial analysis office with credit assessment systems',
                    'expert credit specialist conducting creditworthiness evaluation',
                    'comprehensive credit evaluation center with financial analysis tools',
                    'professional banking office with credit scoring technology'
                ]),
                'about1': 'advanced credit analysis software and financial assessment tools',
                'about2': 'thorough creditworthiness evaluation process with expert analysis',
                'about3': 'professional credit assessment facility with secure financial data systems'
            },
            'foreign_real_estate': {
                'main': session_rng.choice([
                    'professional international real estate consultant with global property portfolio',
                    'modern office with world map showing foreign property opportunities',
                    'luxury international property presentations and investment documentation',
                    'expert advisor explaining overseas real estate investment strategies',
                    'premium international real estate facility with global market expertise'
                ]),
                'about1': 'international property documentation and global market analysis tools',
                'about2': 'comprehensive foreign real estate investment process with expert guidance',
                'about3': 'professional international property facility with global investment resources'
            },
            'tire_service': {
                'main': session_rng.choice([
                    'professional tire service facility with modern wheel alignment equipment',
                    'expert tire technician installing new tires in modern service bay',
                    'comprehensive tire showroom displaying premium tire brands',
                    'professional tire replacement service with advanced mounting equipment',
                    'modern tire service center with quality tire storage systems'
                ]),
                'about1': 'professional tire installation equipment and wheel alignment systems',
                'about2': 'comprehensive tire service process with quality tire brands',
                'about3': 'modern tire service facility with seasonal tire storage solutions'
            },
            'landscape': {
                'main': session_rng.choice([
                    'professional landscape designer creating beautiful garden design',
                    'expert landscaping team transforming outdoor spaces with modern tools',
                    'beautiful landscaping project showcasing professional garden design',
                    'modern landscaping equipment for professional garden construction',
                    'experienced landscape architect planning outdoor space transformation'
                ]),
                'about1': 'professional landscaping tools and garden design equipment',
                'about2': 'comprehensive landscape design process with creative garden planning',
                'about3': 'modern landscaping facility with outdoor design and construction resources'
            },
            'financial': {
                'main': session_rng.choice([
                    'professional financial consultant providing expert financial advice',
                    'modern financial advisory office with investment analysis tools',
                    'expert financial advisor explaining wealth management strategies',
                    'comprehensive financial planning consultation with market analysis',
                    'professional financial services office with investment planning resources'
                ]),
                'about1': 'advanced financial planning software and investment analysis tools',
                'about2': 'comprehensive financial consultation process with expert advisory services',
                'about3': 'professional financial advisory facility with market research resources'
            },
            'student_housing': {
                'main': session_rng.choice([
                    'modern student apartment complex with comfortable living spaces',
                    'professional student housing manager showing apartment facilities',
                    'well-furnished student accommodation with study-friendly environment',
                    'student housing office with rental consultation services',
                    'comfortable student dormitory with modern housing amenities'
                ]),
                'about1': 'modern student housing amenities and comfortable living facilities',
                'about2': 'professional student accommodation process with rental guidance',
                'about3': 'student-friendly housing facility with study and living support services'
            },
            'legal': {
                'main': session_rng.choice([
                    'professional law office with experienced legal practitioners',
                    'modern legal consultation room with comprehensive legal resources',
                    'expert legal advisor providing professional legal guidance',
                    'professional legal services office with case documentation systems',
                    'comprehensive legal facility with court preparation resources'
                ]),
                'about1': 'professional legal documentation systems and case management tools',
                'about2': 'comprehensive legal consultation process with expert legal guidance',
                'about3': 'professional law office with legal research and case preparation resources'
            },
            'service': {
                'main': session_rng.choice([
                    f'professional {business_type} team delivering excellent service to satisfied customers',
                    f'modern {business_type} facility exterior with professional branding and signage',
                    f'successful {business_type} results showcasing quality work and expertise',
                    f'expert specialists working with {business_type} using professional techniques',
                    f'premium {business_type} service environment with modern equipment and professional atmosphere'
                ]),
                'about1': 'specialized equipment and professional service tools',
                'about2': 'efficient service process with expert knowledge and care',
                'about3': 'organized facility with professional quality standards'
            }
        }
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ
        details = adaptive_details.get(activity_type, adaptive_details['service'])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –£–ù–ò–ö–ê–õ–¨–ù–´–ï –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        about_prefixes = [
            'professional', 'modern', 'expert', 'advanced', 'quality', 'specialized',
            'premium', 'innovative', 'cutting-edge', 'sophisticated', 'elite', 'world-class'
        ]
        about_styles = [
            'workspace', 'environment', 'facility', 'office', 'center', 'operation',
            'establishment', 'studio', 'headquarters', 'complex', 'institute', 'venue'
        ]
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        main_prompts = {
            'main': generator._add_uniqueness_to_prompt(details['main'], 'main', business_type),
            'about1': generator._create_clean_about_prompt(details['about1'], about_prefixes, 1),
            'about2': generator._create_clean_about_prompt(details['about2'], about_prefixes, 2),
            'about3': generator._create_clean_about_prompt(details['about3'], about_prefixes, 3)
        }
        
        print("üé≠ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ß–ï–õ–û–í–ï–ß–ï–°–ö–ò–ï review –ø—Ä–æ–º–ø—Ç—ã...")
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ß–ï–õ–û–í–ï–ß–ï–°–ö–ò–ï review –ø—Ä–æ–º–ø—Ç—ã
        human_reviews = create_human_focused_review_prompts()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Ñ–∞–≤–∏–∫–æ–Ω–∫—É
        favicon_variants = [
            f"{theme_input} icon symbol, simple minimalist logo, business emblem",
            f"{theme_input} professional icon, clean business symbol, modern logo",
            f"{theme_input} corporate emblem, sleek icon design, minimal logo",
            f"{theme_input} business symbol, contemporary icon, elegant logo",
            f"{theme_input} company icon, modern symbol design, professional emblem"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫ favicon
        base_favicon = session_rng.choice(favicon_variants)
        favicon_timestamp = str(int(time.time() * 1000))[-4:]
        favicon_prompt = f"{base_favicon}, icon_{favicon_timestamp}"
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–º–µ—Å—Ç–µ
        complete_prompts = {
            'main': main_prompts['main'],
            'about1': main_prompts['about1'],
            'about2': main_prompts['about2'], 
            'about3': main_prompts['about3'],
            # review –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            'favicon': favicon_prompt
        }
        
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–æ–º–ø—Ç—ã: {list(complete_prompts.keys())}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –≤ –Ω–∞–±–æ—Ä–µ
        # –ù–û –ù–ï –¥–ª—è about –ø—Ä–æ–º–ø—Ç–æ–≤ - –æ–Ω–∏ —É–∂–µ —á–∏—Å—Ç—ã–µ
        prompts_to_enhance = {k: v for k, v in complete_prompts.items() 
                             if not k.startswith('about')}
        enhanced_prompts = generator._ensure_prompt_uniqueness(prompts_to_enhance)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —á–∏—Å—Ç—ã–µ about –ø—Ä–æ–º–ø—Ç—ã —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏
        for key in complete_prompts:
            if key.startswith('about'):
                enhanced_prompts[key] = complete_prompts[key]
        
        complete_prompts = enhanced_prompts
        
        # –ö–†–ò–¢–ò–ß–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤
        try:
            from .prompt_optimizer import optimize_prompts_for_api
            complete_prompts = optimize_prompts_for_api(complete_prompts)
        except ImportError:
            # Fallback —Å–∏—Å—Ç–µ–º–∞, –µ—Å–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            max_lengths = {
                'main': 100, 'about1': 90, 'about2': 90, 'about3': 90,
                'review1': 110, 'review2': 110, 'review3': 110, 'favicon': 70
            }
            
            for key, prompt in complete_prompts.items():
                max_len = max_lengths.get(key, 90)
                if len(prompt) > max_len:
                    words = prompt.split()
                    truncated = []
                    current_length = 0
                    
                    for word in words:
                        if current_length + len(word) + 1 <= max_len:
                            truncated.append(word)
                            current_length += len(word) + 1
                        else:
                            break
                    
                    complete_prompts[key] = ' '.join(truncated)
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        uniqueness_score = generator._calculate_uniqueness_score(complete_prompts)
        print(f"üéØ –û—Ü–µ–Ω–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–º–ø—Ç–æ–≤: {uniqueness_score}% (—á–µ–º –±–æ–ª—å—à–µ, —Ç–µ–º –ª—É—á—à–µ)")
        
        return complete_prompts
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return None

def create_landing_prompt(country, city, language, domain, theme):
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–µ–Ω–¥–∏–Ω–≥–∞
    
    Args:
        country (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
        city (str): –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
        language (str): –Ø–∑—ã–∫ –ª–µ–Ω–¥–∏–Ω–≥–∞ (–∫–æ–¥)
        domain (str): –î–æ–º–µ–Ω —Å–∞–π—Ç–∞
        theme (str): –¢–µ–º–∞—Ç–∏–∫–∞ –ª–µ–Ω–¥–∏–Ω–≥–∞
    
    Returns:
        str: –ì–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Cursor AI
    """
    from shared.helpers import get_current_year, get_language_display_name, get_language_name_by_code
    
    current_year = get_current_year()
    
    # –ü–æ–ª—É—á–∞–µ–º —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞
    # –ï—Å–ª–∏ —è–∑—ã–∫ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω –≤—Ä—É—á–Ω—É—é ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ –∫–æ–¥—É, –∏–Ω–∞—á–µ –ø–æ —Å—Ç—Ä–∞–Ω–µ
    language_display = get_language_name_by_code(language) if language else get_language_display_name(country)
    
    return f"""You are an experienced web developer commissioned to build a fully functional business website. The site must be highly realistic, complete, and written as if it was handcrafted by real people ‚Äî not generated by AI.

Each site is built in a new, isolated project, with no memory of previous work. No site should resemble any other. Use a different style, structure, and visual approach each time you generate a site.

---

## üìå Input Parameters:

- Domain: {domain}  
- Language and country: {language_display}, {country}  
- Website topic: {theme}  
- Image folder: media  

IMPORTANT ‚Äì FILESYSTEM RULES (STRICT):
- Use the CURRENT working directory as the project root. Do NOT create any extra top‚Äëlevel folder (including a folder named after the domain). Put all files directly into the current folder.
- Create the image directory only as "./media" inside the current folder.
- Do NOT create or modify anything inside "./media". The folder already exists and must be used as‚Äëis.
- Never generate or save new images/icons/SVGs. Do not create files with extensions: .svg, .png, .jpg, .jpeg, .webp, .gif, .ico, .avif (or any other image/binary assets).
- Do not inline SVG markup or base64‚Äëencoded images into HTML/CSS/JS. Only reference already existing files.
- Never nest the project into an additional subfolder. If your scaffolder suggests creating a parent folder ‚Äî do not do it; save files right here.

---

## üìÑ Requirements:

### 1. Structure & Architecture:
- The site structure must be randomly selected. It can be:
  - A one-page landing site
  - A multi-page corporate site
  - A site with a blog (with several articles)
  - A site with a gallery, case studies, team section, etc.
- Each time, choose a different structure ‚Äî as if you're creating a new site for a unique business client with different needs.

### 2. Home Page:
- The home page must be named: `index.html`
- However, in all internal links, always reference the file as `index.php`  
  ‚ùå Do not use: `href=\"index.html\"`  
  ‚úÖ Only use: `href=\"index.php\"` or `href=\"index.php#section\"`

### 3. Content:
- Fill the site with detailed, rich content:
  - At least 5‚Äì7 different sections on the home page
  - Use lists, icons, images, forms, quotes, cards, etc.
  - Write diverse text content that feels like it was written by a real copywriter
- **Use images from the folder specified in the \"Image folder\" parameter**:
  - Example: `./media/file.jpg`  
  - No other image directories allowed.
  - Do NOT create or modify files in `./media`. The folder is provided and must remain unchanged.
  - Do NOT generate or embed SVGs (including inline `<svg>`), nor any new bitmap assets; reference existing files only.

### 4. Order Form (Required):
- On the home page, include a complete order form with:
  - Name, email, phone, message or service selection
  - Form settings:
    - `action=\"order.php\"`
    - `method=\"POST\"`
- Do not create the `order.php` file ‚Äî just link to it

### 5. Legal Pages (Required):
- Create actual, separate HTML files:
  - `privacy.html`
  - `terms.html`
  - `cookies.html`
- These pages must:
  - Be written in the specified language ({language_display})
  - Contain realistic, complete content
  - Include a working link back to the homepage: `<a href=\"index.php\">Home</a>`
- All links across the site must be relative. Never use absolute links like https://{domain}/privacy.

### 6. Cookie Notification (MUST BE 100% WORKING):
- Display a cookie consent banner on first page load.
- Include a working "Accept" button that:
  - Hides the banner instantly.
  - Saves user consent in `localStorage` or a browser cookie.
  - Prevents the banner from appearing again until at least 1 year later.
  - Also log to console: `console.log('cookies_accepted')`.
- Must work equally well on desktop and mobile.
- The banner MUST NOT cause horizontal scrolling at any viewport width:
  - Do not use `overflow-x: hidden` or `overflow-x: auto`.
  - Use `position: fixed; left: 0; right: 0;` with `max-width: 100vw` and `box-sizing: border-box`.
  - Avoid horizontal translations; animate vertically (Y) or via opacity only.
  - Ensure paddings/margins do not exceed viewport width on 320, 768, 1024, 1440px.
- Style the banner so it doesn't overlap with important site elements.

### 7. Mobile Menu (MUST BE 100% WORKING):
- Include a mobile-friendly menu that:
  - Expands/collapses with a button (hamburger icon) using JavaScript.
  - Works on all screen sizes without page reload.
  - Supports smooth animation.
  - Is implemented with plain JS or explicitly included frameworks (no broken dependencies).
- Ensure links inside the mobile menu work and close the menu when clicked.
- The mobile menu MUST NOT introduce horizontal scrollbars:
  - Do not use `overflow-x: hidden` or `overflow-x: auto` to mask layout issues.
  - Use `max-width: 100vw` and `box-sizing: border-box`; avoid off-canvas widths > 100vw.
  - Prefer vertical slide or fade animations without X-axis overflow.
  - Test at 320, 768, 1024, 1440px.

### 8. Design & Styling:
- Use unique color schemes, fonts, spacing, layout techniques, and frameworks (or none at all)
- Each site must look and feel different from the others
- Use different front-end approaches (randomly choose):
  - Flexbox, CSS Grid, Bootstrap, Tailwind, native CSS, etc.
- Do not reuse block structures, section orders, or styling patterns

### 9. Realism:
- All links, buttons, and sections must function correctly
- Populate contact details, social media links, and addresses with plausible but random data ‚Äî never leave them empty
- Avoid placeholders or filler text like "company name," "lorem ipsum," or "sample text"

### 10. SEO & Metadata:
- Add the following (all in the specified language and relevant to the topic):
  - `<title>` and `<meta name=\"description\">`
  - Open Graph meta tags
  - `<meta charset=\"UTF-8\">`, `<meta name=\"viewport\" ... >`
  - Favicon (randomly selected from the specified image folder)

### 11. Code Quality:
- Make the code look like it was written by a real developer, not an AI:
  - Use a mix of formatting styles (some compact, some spaced out, some commented)
  - Mix techniques: inline styles in one section, CSS classes in another
- Obfuscate the code structure slightly so it doesn't look like a generic boilerplate

### 12. External Links & Embeds (Randomized):
- Add 1‚Äì3 external links or embedded elements, like a real website would:
  - Links to maps, social platforms, blogs, partners, or external articles
  - Embedded iframe for Google Maps or YouTube
  - CDN-based CSS libraries or icon sets
- These external elements must be relevant to the business topic and feel naturally integrated

### 13. Additional Details:
- City: {city}
- Current year for all dates: {current_year}
- Ensure all content is realistic and professional
- Contact information should include:
  - Email with domain: contact@{domain}
  - Realistic phone number for {country}
  - Realistic address in {city}, {country}""" 