"""
–£–º–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
–†–∞–∑–±–∏—Ç –∏–∑ smart_prompt_generator.py –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
"""


class SmartPromptGenerator:
    """–£–ú–ù–ê–Ø —Å–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –ª—é–±—ã—Ö —Ç–µ–º–∞—Ç–∏–∫ –ë–ï–ó –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"""
    

        
       
    
    def _extract_language_from_theme(self, theme):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —è–∑—ã–∫ –∏–∑ —Ç–µ–º—ã –¥–ª—è —è–∑—ã–∫–æ–≤—ã—Ö –∫—É—Ä—Å–æ–≤"""
        language_map = {
            '–∞–Ω–≥–ª–∏–π—Å–∫': 'english', 'english': 'english',
            '—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫': 'french', 'french': 'french', 
            '–Ω–µ–º–µ—Ü–∫': 'german', 'german': 'german',
            '–∏—Å–ø–∞–Ω—Å–∫': 'spanish', 'spanish': 'spanish',
            '–∏—Ç–∞–ª—å—è–Ω—Å–∫': 'italian', 'italian': 'italian',
            '–∫–∏—Ç–∞–π—Å–∫': 'chinese', 'chinese': 'chinese',
            '—è–ø–æ–Ω—Å–∫': 'japanese', 'japanese': 'japanese'
        }
        
        for lang_part, lang_full in language_map.items():
            if lang_part in theme:
                return lang_full
                
        return 'language'  # fallback
    

        
        

    
 

def create_landing_prompt(country, city, language, domain, theme):
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–µ–Ω–¥–∏–Ω–≥–∞
    
    Args:
        country (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
        city (str): –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
        language (str): –Ø–∑—ã–∫ –ª–µ–Ω–¥–∏–Ω–≥–∞ (–∫–æ–¥)
        domain (str): –î–æ–º–µ–Ω —Å–∞–π—Ç–∞
        theme (str): –¢–µ–º–∞—Ç–∏–∫–∞ –ª–µ–Ω–¥–∏–Ω–≥–∞
    
    Returns:
        str: –ì–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Cursor AI
    """
    from shared.helpers import get_current_year, get_language_display_name, get_language_name_by_code
    
    current_year = get_current_year()
    
    # –ü–æ–ª—É—á–∞–µ–º —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞
    # –ï—Å–ª–∏ —è–∑—ã–∫ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω –≤—Ä—É—á–Ω—É—é ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ –∫–æ–¥—É, –∏–Ω–∞—á–µ –ø–æ —Å—Ç—Ä–∞–Ω–µ
    language_display = get_language_name_by_code(language) if language else get_language_display_name(country)
    
    return f"""You are an experienced web developer commissioned to build a fully functional business website. The site must be highly realistic, complete, and written as if it was handcrafted by real people ‚Äî not generated by AI.

Each site is built in a new, isolated project, with no memory of previous work. No site should resemble any other. Use a different style, structure, and visual approach each time you generate a site.

---

## üìå Input Parameters:

- Domain: {domain}  
- Language and country: {language_display}, {country}  
- Website topic: {theme}  
- Image folder: media  

IMPORTANT ‚Äì FILESYSTEM RULES (STRICT):
- Use the CURRENT working directory as the project root. Do NOT create any extra top‚Äëlevel folder (including a folder named after the domain). Put all files directly into the current folder.
- Create the image directory only as "./media" inside the current folder.
- Do NOT create or modify anything inside "./media". The folder already exists and must be used as‚Äëis.
- Never generate or save new images/icons/SVGs. Do not create files with extensions: .svg, .png, .jpg, .jpeg, .webp, .gif, .ico, .avif (or any other image/binary assets).
- Do not inline SVG markup or base64‚Äëencoded images into HTML/CSS/JS. Only reference already existing files.
- Never nest the project into an additional subfolder. If your scaffolder suggests creating a parent folder ‚Äî do not do it; save files right here.

---

## üìÑ Requirements:

### 1. Structure & Architecture:
- The site structure must be randomly selected. It can be:
  - A one-page landing site
  - A multi-page corporate site
  - A site with a blog (with several articles)
  - A site with a gallery, case studies, team section, etc.
- Each time, choose a different structure ‚Äî as if you're creating a new site for a unique business client with different needs.

### 2. Home Page:
- The home page must be named: `index.html`
- However, in all internal links, always reference the file as `index.php`  
  ‚ùå Do not use: `href=\"index.html\"`  
  ‚úÖ Only use: `href=\"index.php\"` or `href=\"index.php#section\"`

### 3. Content:
- Fill the site with detailed, rich content:
  - At least 5‚Äì7 different sections on the home page
  - Use lists, icons, images, forms, quotes, cards, etc.
  - Write diverse text content that feels like it was written by a real copywriter
- **Use images from the folder specified in the \"Image folder\" parameter**:
  - Example: `./media/file.jpg`  
  - No other image directories allowed.
  - Do NOT create or modify files in `./media`. The folder is provided and must remain unchanged.
  - Do NOT generate or embed SVGs (including inline `<svg>`), nor any new bitmap assets; reference existing files only.

### 4. Order Form (Required):
- On the home page, include a complete order form with:
  - Name, email, phone, message or service selection
  - Form settings:
    - `action=\"order.php\"`
    - `method=\"POST\"`
- Do not create the `order.php` file ‚Äî just link to it

### 5. Legal Pages (Required):
- Create actual, separate HTML files:
  - `privacy.html`
  - `terms.html`
  - `cookies.html`
- These pages must:
  - Be written in the specified language ({language_display})
  - Contain realistic, complete content
  - Include a working link back to the homepage: `<a href=\"index.php\">Home</a>`
- All links across the site must be relative. Never use absolute links like https://{domain}/privacy.

### 6. Cookie Notification (MUST BE 100% WORKING):
- Display a cookie consent banner on first page load.
- Include a working "Accept" button that:
  - Hides the banner instantly.
  - Saves user consent in `localStorage` or a browser cookie.
  - Prevents the banner from appearing again until at least 1 year later.
  - Also log to console: `console.log('cookies_accepted')`.
- Must work equally well on desktop and mobile.
- The banner MUST NOT cause horizontal scrolling at any viewport width:
  - Do not use `overflow-x: hidden` or `overflow-x: auto`.
  - Use `position: fixed; left: 0; right: 0;` with `max-width: 100vw` and `box-sizing: border-box`.
  - Avoid horizontal translations; animate vertically (Y) or via opacity only.
  - Ensure paddings/margins do not exceed viewport width on 320, 768, 1024, 1440px.
- Style the banner so it doesn't overlap with important site elements.

### 7. Mobile Menu (MUST BE 100% WORKING):
- Include a mobile-friendly menu that:
  - Expands/collapses with a button (hamburger icon) using JavaScript.
  - Works on all screen sizes without page reload.
  - Supports smooth animation.
  - Is implemented with plain JS or explicitly included frameworks (no broken dependencies).
- Ensure links inside the mobile menu work and close the menu when clicked.
- The mobile menu MUST NOT introduce horizontal scrollbars:
  - Do not use `overflow-x: hidden` or `overflow-x: auto` to mask layout issues.
  - Use `max-width: 100vw` and `box-sizing: border-box`; avoid off-canvas widths > 100vw.
  - Prefer vertical slide or fade animations without X-axis overflow.
  - Test at 320, 768, 1024, 1440px.

### 8. Design & Styling:
- Use unique color schemes, fonts, spacing, layout techniques, and frameworks (or none at all)
- Each site must look and feel different from the others
- Use different front-end approaches (randomly choose):
  - Flexbox, CSS Grid, Bootstrap, Tailwind, native CSS, etc.
- Do not reuse block structures, section orders, or styling patterns

### 9. Realism:
- All links, buttons, and sections must function correctly
- Populate contact details, social media links, and addresses with plausible but random data ‚Äî never leave them empty
- Avoid placeholders or filler text like "company name," "lorem ipsum," or "sample text"

### 10. SEO & Metadata:
- Add the following (all in the specified language and relevant to the topic):
  - `<title>` and `<meta name=\"description\">`
  - Open Graph meta tags
  - `<meta charset=\"UTF-8\">`, `<meta name=\"viewport\" ... >`
  - Favicon (randomly selected from the specified image folder)

### 11. Code Quality:
- Make the code look like it was written by a real developer, not an AI:
  - Use a mix of formatting styles (some compact, some spaced out, some commented)
  - Mix techniques: inline styles in one section, CSS classes in another
- Obfuscate the code structure slightly so it doesn't look like a generic boilerplate

### 12. External Links & Embeds (Randomized):
- Add 1‚Äì3 external links or embedded elements, like a real website would:
  - Links to maps, social platforms, blogs, partners, or external articles
  - Embedded iframe for Google Maps or YouTube
  - CDN-based CSS libraries or icon sets
- These external elements must be relevant to the business topic and feel naturally integrated

### 13. Additional Details:
- City: {city}
- Current year for all dates: {current_year}
- Ensure all content is realistic and professional
- Contact information should include:
  - Email with domain: contact@{domain}
  - Realistic phone number for {country}
  - Realistic address in {city}, {country}""" 