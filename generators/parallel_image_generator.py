#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üöÄ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ô –ì–ï–ù–ï–†–ê–¢–û–† –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô üöÄ
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç—ã –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –û–î–ù–û–í–†–ï–ú–ï–ù–ù–û –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏!
"""

import os
import time
import asyncio
import threading
from concurrent.futures import ThreadPoolExecutor, as_completed
from pathlib import Path
from PIL import Image
from io import BytesIO
import requests
from urllib.parse import quote
import hashlib

class ParallelImageGenerator:
    """üöÄ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä - –ø—Ä–æ–º–ø—Ç—ã –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ!"""
    
    def __init__(self, silent_mode=False):
        self.silent_mode = silent_mode
        self.generated_prompts = {}
        self.generation_results = {}
        
        if not self.silent_mode:
            print("üöÄ ParallelImageGenerator - –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø!")
    
    def generate_thematic_set_parallel(self, theme_input, media_dir, method="1", progress_callback=None):
        """
        üöÄ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è - –ø—Ä–æ–º–ø—Ç—ã –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ!
        """
        if not self.silent_mode:
            print(f"üöÄ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è: {theme_input}")
        
        if progress_callback:
            progress_callback("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É
        os.makedirs(media_dir, exist_ok=True)
        
        image_names = ['main', 'about1', 'about2', 'about3', 'review1', 'review2', 'review3', 'favicon']
        
        # üöÄ –≠–¢–ê–ü 1: –ë—ã—Å—Ç—Ä–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º fallback –ø—Ä–æ–º–ø—Ç—ã –∏ –Ω–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞—Ä—Ç–∏–Ω–æ–∫
        if progress_callback:
            progress_callback("‚ö° –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤...")
        
        fallback_prompts = self._generate_fallback_prompts_fast(theme_input)
        self.generated_prompts = fallback_prompts.copy()
        
        # üöÄ –≠–¢–ê–ü 2: –ó–∞–ø—É—Å–∫–∞–µ–º –í–°–ï –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        with ThreadPoolExecutor(max_workers=6) as executor:
            futures = []
            
            # üß† –ó–ê–î–ê–ß–ê 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ (–≤ —Ñ–æ–Ω–µ)
            if progress_callback:
                progress_callback("üß† –ó–∞–ø—É—Å–∫ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –≤ —Ñ–æ–Ω–µ...")
            
            future_prompts = executor.submit(self._generate_quality_prompts_async, theme_input)
            futures.append(('prompts', future_prompts))
            
            # üé® –ó–ê–î–ê–ß–ê 2-9: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (—Å—Ä–∞–∑—É —Å fallback –ø—Ä–æ–º–ø—Ç–∞–º–∏)
            if progress_callback:
                progress_callback("üé® –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫...")
            
            for i, image_name in enumerate(image_names):
                prompt = fallback_prompts.get(image_name, f'professional {theme_input} service')
                future_image = executor.submit(
                    self._generate_image_with_retry, 
                    prompt, image_name, media_dir, i+1, len(image_names)
                )
                futures.append((image_name, future_image))
            
            # üîÑ –≠–¢–ê–ü 3: –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–µ—Ä–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            generated_count = 0
            quality_prompts_ready = False
            
            for future in as_completed([f[1] for f in futures]):
                # –ù–∞—Ö–æ–¥–∏–º –∫–∞–∫–∞—è –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å
                for task_name, task_future in futures:
                    if task_future == future:
                        try:
                            result = future.result()
                            
                            if task_name == 'prompts':
                                # üß† –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –≥–æ—Ç–æ–≤—ã!
                                if result:
                                    self.generated_prompts.update(result)
                                    quality_prompts_ready = True
                                    if not self.silent_mode:
                                        print("‚úÖ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –≥–æ—Ç–æ–≤—ã!")
                                    if progress_callback:
                                        progress_callback("‚úÖ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –≥–æ—Ç–æ–≤—ã!")
                            
                            elif result:  # –ö–∞—Ä—Ç–∏–Ω–∫–∞ –≥–æ—Ç–æ–≤–∞
                                generated_count += 1
                                if not self.silent_mode:
                                    print(f"‚úÖ {task_name}: –°–æ–∑–¥–∞–Ω–æ ({generated_count}/{len(image_names)})")
                                if progress_callback:
                                    progress_callback(f"‚úÖ –ì–æ—Ç–æ–≤–æ {generated_count}/{len(image_names)} –∫–∞—Ä—Ç–∏–Ω–æ–∫")
                        
                        except Exception as e:
                            if not self.silent_mode:
                                print(f"‚ùå –û—à–∏–±–∫–∞ {task_name}: {e}")
                        break
        
        # üéØ –≠–¢–ê–ü 4: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏
        if quality_prompts_ready and generated_count < len(image_names):
            if progress_callback:
                progress_callback("üîÑ –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏...")
            
            # –†–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ—É–¥–∞—á–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏
            self._regenerate_failed_images(theme_input, media_dir, image_names, generated_count)
        
        if not self.silent_mode:
            print(f"üéØ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {generated_count}/{len(image_names)}")
        
        if progress_callback:
            progress_callback(f"üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {generated_count}/{len(image_names)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        return generated_count
    
    def _generate_fallback_prompts_fast(self, theme_input):
        """‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤"""
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º–∞—Ç–∏–∫
        if '—É—á–∞—Å—Ç–∫' in theme_input.lower() or '–¥–∞—á–∞' in theme_input.lower():
            return {
                'main': "beautiful rural property with scenic countryside views and development potential",
                'about1': "professional real estate consultation with property documents and plans",
                'about2': "land survey equipment and property measurement tools",
                'about3': "rural property development and planning documentation",
                'review1': "satisfied property buyer smiling happily with rural landscape background",
                'review2': "pleased customer at rural property with natural surroundings",
                'review3': "grateful client reviewing property documents outdoors",
                'favicon': "simple house icon with tree symbol minimalist property logo"
            }
        
        # –û–±—ã—á–Ω—ã–µ fallback –ø—Ä–æ–º–ø—Ç—ã
        return {
            'main': f'professional {theme_input} service office modern high quality',
            'about1': f'modern {theme_input} professional equipment workspace',
            'about2': f'expert {theme_input} team working with professional tools',
            'about3': f'quality {theme_input} facility with modern standards',
            'review1': 'satisfied customer smiling happy positive professional photo',
            'review2': 'pleased client confident satisfied expression headshot',
            'review3': 'grateful person positive smile content photograph',
            'favicon': f'{theme_input} simple minimalist icon logo business symbol'
        }
    
    def _generate_quality_prompts_async(self, theme_input):
        """üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        try:
            if not self.silent_mode:
                print("üß† –ó–∞–ø—É—Å–∫ DeepSeek –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ DeepSeek/Ollama
            from generators.ollama_ai_enhancer import create_ollama_enhanced_prompts
            quality_prompts = create_ollama_enhanced_prompts(theme_input)
            
            if not self.silent_mode:
                print("‚úÖ DeepSeek –ø—Ä–æ–º–ø—Ç—ã –≥–æ—Ç–æ–≤—ã!")
            
            return quality_prompts
            
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤: {e}")
            return None
    
    def _generate_image_with_retry(self, prompt, image_name, media_dir, current, total):
        """üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        try:
            if not self.silent_mode:
                print(f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {image_name} ({current}/{total}): {prompt[:50]}...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ Pollinations API
            result = self._generate_image_pollinations_fast(prompt, image_name, media_dir)
            
            if result:
                if not self.silent_mode:
                    print(f"‚úÖ {image_name}: –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ")
                return result
            else:
                if not self.silent_mode:
                    print(f"‚ùå {image_name}: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å")
                return None
                
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå –û—à–∏–±–∫–∞ {image_name}: {e}")
            return None
    
    def _generate_image_pollinations_fast(self, prompt, image_name, media_dir):
        """üåê –ë–´–°–¢–†–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Pollinations API"""
        try:
            # –£–ª—É—á—à–∞–µ–º –ø—Ä–æ–º–ø—Ç
            enhanced_prompt = f"{prompt}, high quality, professional, detailed"
            
            # –°–æ–∑–¥–∞–µ–º URL
            api_params = "?width=1024&height=1024&nologo=true&enhance=true"
            if image_name == 'favicon':
                api_params = "?width=512&height=512&nologo=true&enhance=true"
            
            api_url = f"https://image.pollinations.ai/prompt/{quote(enhanced_prompt)}{api_params}"
            
            # –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—Ä–æ—Å
            response = requests.get(api_url, timeout=(10, 30))
            
            if response.status_code == 200 and len(response.content) > 1000:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                output_path = Path(media_dir) / f"{image_name}.jpg"
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image = Image.open(BytesIO(response.content))
                
                # –î–ª—è —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏ - PNG —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
                if image_name == 'favicon':
                    output_path = Path(media_dir) / f"{image_name}.png"
                    image = self._make_favicon_transparent(image)
                    image.save(output_path, "PNG", optimize=True)
                else:
                    # –°–∂–∏–º–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    image = image.convert('RGB')
                    image.save(output_path, "JPEG", quality=85, optimize=True)
                
                return str(output_path)
            
            return None
            
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå Pollinations –æ—à–∏–±–∫–∞ –¥–ª—è {image_name}: {e}")
            return None
    
    def _make_favicon_transparent(self, image):
        """üé® –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–≥–æ —Ñ–æ–Ω–∞ –¥–ª—è —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGBA
            image = image.convert("RGBA")
            
            # –î–µ–ª–∞–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º
            data = image.getdata()
            new_data = []
            
            for item in data:
                # –ï—Å–ª–∏ –ø–∏–∫—Å–µ–ª—å –±–µ–ª—ã–π –∏–ª–∏ –ø–æ—á—Ç–∏ –±–µ–ª—ã–π, –¥–µ–ª–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º
                if item[0] > 240 and item[1] > 240 and item[2] > 240:
                    new_data.append((255, 255, 255, 0))  # –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π
                else:
                    new_data.append(item)
            
            image.putdata(new_data)
            return image
            
        except:
            return image
    
    def _regenerate_failed_images(self, theme_input, media_dir, image_names, successful_count):
        """üîÑ –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫ —Å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
            missing_images = []
            for image_name in image_names:
                jpg_path = Path(media_dir) / f"{image_name}.jpg"
                png_path = Path(media_dir) / f"{image_name}.png"
                
                if not jpg_path.exists() and not png_path.exists():
                    missing_images.append(image_name)
            
            if missing_images and self.generated_prompts:
                if not self.silent_mode:
                    print(f"üîÑ –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è {len(missing_images)} –∫–∞—Ä—Ç–∏–Ω–æ–∫...")
                
                for image_name in missing_images:
                    if image_name in self.generated_prompts:
                        quality_prompt = self.generated_prompts[image_name]
                        self._generate_image_pollinations_fast(quality_prompt, image_name, media_dir)
                        
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
def create_parallel_generator(silent_mode=False):
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä"""
    return ParallelImageGenerator(silent_mode=silent_mode) 