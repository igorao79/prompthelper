#!/usr/bin/env python3
"""
–£–º–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
–°–æ–∑–¥–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–∞–∂–¥—ã–π —Ä–∞–∑, –Ω–æ –∏—Å–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ª–æ–≤–∞
"""

import random

class SmartVariativePrompts:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ —Å —É–º–Ω—ã–º–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏"""
    
    def __init__(self):
        # –ë–∞–∑–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤
        self.business_elements = {
            '–¥–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã': {
                'objects': ['delicious pizza delivery', 'fresh sushi delivery', 'gourmet burger delivery', 'hot pasta delivery', 'asian noodles takeout', 'healthy salad delivery', 'italian cuisine delivery', 'mexican food delivery', 'chinese takeout delivery', 'french pastry delivery'],
                'actions': ['preparing for delivery', 'packing for delivery', 'delivering food', 'food delivery service', 'takeout preparation', 'delivery packaging', 'courier delivering food', 'delivering hot food'],
                'qualities': ['fresh delivered', 'hot delivery', 'fast delivery', 'gourmet delivery', 'home delivery', 'quick delivery', 'express delivery', 'premium delivery'],
                'environments': ['delivery kitchen', 'takeout restaurant', 'food delivery counter', 'delivery preparation area', 'courier service area'],
                'delivery_elements': ['delivery bag', 'delivery scooter', 'takeout container', 'delivery service', 'food courier', 'delivery process', 'delivery man with food'],
                'banned_words': [],  # –£–±–∏—Ä–∞–µ–º –±–∞–Ω-—Å–ª–æ–≤–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
                'favicon_symbols': ['üçï', 'üçî', 'ü•ò', 'üöö', 'üõµ', 'üì¶']
            },
            '–ø—Ä–æ–¥–∞–∂–∞ –∞–≤—Ç–æ': {
                'objects': ['luxury car', 'new vehicle', 'sports car', 'sedan', 'suv', 'car interior', 'dashboard', 'steering wheel', 'car seats'],
                'actions': ['displaying', 'showcasing', 'presenting', 'consulting', 'demonstrating'],
                'qualities': ['premium', 'luxury', 'modern', 'elegant', 'sleek', 'sophisticated'],
                'environments': ['showroom', 'dealership', 'car lot', 'sales office', 'exhibition hall'],
                'banned_words': ['mechanic', 'repair', 'tool', '–º–µ—Ö–∞–Ω–∏–∫', '—Ä–µ–º–æ–Ω—Ç'],  # –°–¢–†–û–ì–û –ó–ê–ü–†–ï–©–ï–ù–û –¥–ª—è about2
                'about2_safe': ['car interior', 'leather seats', 'dashboard design', 'comfort features', 'modern controls'],
                'favicon_symbols': ['üöó', 'üöô', 'üèéÔ∏è', 'üîë', 'üõû', 'üöò']
            },
            '–∫–∞—Ñ–µ': {
                'objects': ['coffee cup', 'espresso', 'cappuccino', 'latte art', 'coffee beans', 'pastry', 'croissant'],
                'actions': ['brewing', 'serving', 'enjoying', 'relaxing', 'socializing'],
                'qualities': ['aromatic', 'fresh', 'premium', 'artisan', 'cozy', 'warm'],
                'environments': ['coffee shop', 'cafe interior', 'coffee bar', 'seating area', 'barista station'],
                'favicon_symbols': ['‚òï', 'üç∞', 'ü•ê', 'ü´ò', 'üßÅ', 'üç™']
            },
            '–∞–≤—Ç–æ–º–æ–π–∫–∞': {
                'objects': ['clean car', 'washing equipment', 'soap foam', 'shiny vehicle', 'water spray'],
                'actions': ['washing', 'cleaning', 'polishing', 'detailing', 'drying'],
                'qualities': ['spotless', 'gleaming', 'professional', 'thorough', 'careful'],
                'environments': ['car wash bay', 'service area', 'cleaning station', 'wash tunnel'],
                'favicon_symbols': ['üöø', 'üßΩ', 'üöó', 'üíß', 'ü´ß', '‚ú®']
            }
        }
        
        # –û–±—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–µ–º–∞—Ç–∏–∫
        self.general_elements = {
            'objects': ['service', 'workspace', 'equipment', 'facility', 'interior'],
            'actions': ['working', 'providing', 'delivering', 'maintaining', 'operating'],
            'qualities': ['professional', 'modern', 'quality', 'efficient', 'reliable'],
            'environments': ['office', 'workplace', 'service area', 'facility', 'center'],
            'favicon_symbols': ['üè¢', 'üîß', '‚öôÔ∏è', 'üìä', 'üíº', 'üéØ']
        }
        
        # –°—Ç–∏–ª–∏ –∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        self.styles = ['professional photography', 'commercial style', 'high quality', 'studio lighting', 'natural lighting']
        self.compositions = ['centered composition', 'close-up view', 'wide angle', 'detailed shot', 'atmospheric']
        self.moods = ['bright', 'warm', 'inviting', 'modern', 'elegant', 'clean', 'vibrant']
        
        # –í–∞—Ä–∏–∞—Ç–∏–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Ñ–∞–≤–∏–∫–æ–Ω–æ–≤
        self.favicon_styles = ['flat design', 'minimal design', 'geometric', 'modern icon', 'clean symbol', 'vector style']
        self.favicon_colors = ['blue gradient', 'orange gradient', 'green gradient', 'purple gradient', 'red gradient', 'teal gradient']
    
    def generate_prompts(self, theme_input):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ç–µ–º–∞—Ç–∏–∫–∏"""
        theme_lower = theme_input.lower().strip()
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        elements = self._get_theme_elements(theme_lower)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        prompts = {}
        
        # Main - –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞
        prompts['main'] = self._generate_main_prompt(elements, theme_input, theme_lower)
        
        # About1 - –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ —É—Å–ª—É–≥–µ  
        prompts['about1'] = self._generate_about1_prompt(elements, theme_input, theme_lower)
        
        # About2 - –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï - –∑–¥–µ—Å—å –ù–ï –î–û–õ–ñ–ù–û –±—ã—Ç—å –º–µ—Ö–∞–Ω–∏–∫–æ–≤ –¥–ª—è –∞–≤—Ç–æ
        prompts['about2'] = self._generate_about2_prompt(elements, theme_input, theme_lower)
        
        # About3 - —Ç—Ä–µ—Ç—å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        prompts['about3'] = self._generate_about3_prompt(elements, theme_input, theme_lower)
        
        # Review –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –ª—é–¥–∏
        prompts['review1'] = self._generate_review_prompt()
        prompts['review2'] = self._generate_review_prompt() 
        prompts['review3'] = self._generate_review_prompt()
        
        # Favicon - –í–ê–†–ò–ê–¢–ò–í–ù–´–ô —Å–∏–º–≤–æ–ª
        prompts['favicon'] = self._generate_favicon_prompt(elements, theme_input, theme_lower)
        
        return prompts
    
    def _get_theme_elements(self, theme_lower):
        """–ü–æ–ª—É—á–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ç–µ–º–∞—Ç–∏–∫–∏"""
        # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        for key, elements in self.business_elements.items():
            if key in theme_lower or any(word in theme_lower for word in key.split()):
                return elements
                
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –≤–∞—Ä–∏–∞—Ü–∏–π
        if any(word in theme_lower for word in ['–µ–¥–∞', '–µ–¥—ã', 'food', 'delivery', '–¥–æ—Å—Ç–∞–≤–∫']):
            return self.business_elements['–¥–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã']
        elif any(word in theme_lower for word in ['–∞–≤—Ç–æ', '–º–∞—à–∏–Ω', 'car', 'vehicle', '–ø—Ä–æ–¥–∞–∂']):
            return self.business_elements['–ø—Ä–æ–¥–∞–∂–∞ –∞–≤—Ç–æ']
        elif any(word in theme_lower for word in ['–∫–æ—Ñ–µ', 'coffee', '–∫–∞—Ñ–µ', 'cafe']):
            return self.business_elements['–∫–∞—Ñ–µ']
        elif any(word in theme_lower for word in ['–º–æ–π–∫–∞', 'wash', 'clean']):
            return self.business_elements['–∞–≤—Ç–æ–º–æ–π–∫–∞']
        
        return self.general_elements
    
    def _generate_main_prompt(self, elements, theme, theme_lower):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
        obj = random.choice(elements['objects'])
        quality = random.choice(elements['qualities'])
        env = random.choice(elements['environments'])
        style = random.choice(self.styles)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∞–≤–æ—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –µ–¥—ã
        if any(word in theme_lower for word in ['–µ–¥–∞', '–µ–¥—ã', 'food', 'delivery', '–¥–æ—Å—Ç–∞–≤–∫']):
            delivery_element = random.choice(elements.get('delivery_elements', []))
            return f"{quality} {obj} with {delivery_element} in {env}, {style}"
        
        return f"{quality} {obj} in {env}, {style}"
    
    def _generate_about1_prompt(self, elements, theme, theme_lower):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä–≤—ã–π about –ø—Ä–æ–º–ø—Ç"""
        obj = random.choice(elements['objects'])
        action = random.choice(elements['actions'])
        mood = random.choice(self.moods)
        
        return f"{action} {obj}, {mood} atmosphere, professional quality"
    
    def _generate_about2_prompt(self, elements, theme, theme_lower):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –º–µ—Ç–æ–¥ - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç about2 –ë–ï–ó –º–µ—Ö–∞–Ω–∏–∫–æ–≤ –¥–ª—è –∞–≤—Ç–æ"""
        # –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –ê–í–¢–û –¢–ï–ú–ê–¢–ò–ö
        if any(word in theme_lower for word in ['–∞–≤—Ç–æ', '–º–∞—à–∏–Ω', 'car', '–ø—Ä–æ–¥–∞–∂', '—Å–∞–ª–æ–Ω']):
            # –î–ª—è –∞–≤—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–õ–¨–ö–û –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
            if 'about2_safe' in elements:
                safe_obj = random.choice(elements['about2_safe'])
                quality = random.choice(elements['qualities'])
                return f"{quality} {safe_obj}, interior design, comfort features"
            else:
                return "elegant car interior with leather seats, premium comfort"
        
        # –î–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã - –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∞–≤–æ—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        if any(word in theme_lower for word in ['–µ–¥–∞', '–µ–¥—ã', 'food', 'delivery', '–¥–æ—Å—Ç–∞–≤–∫']):
            delivery_element = random.choice(elements.get('delivery_elements', []))
            obj = random.choice(elements['objects'])
            comp = random.choice(self.compositions)
            return f"{delivery_element} with {obj}, {comp}, delivery service"
        
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–º–∞—Ç–∏–∫ - –æ–±—ã—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        obj = random.choice(elements['objects'])
        quality = random.choice(elements['qualities'])
        comp = random.choice(self.compositions)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
        prompt = f"{quality} {obj}, {comp}, detailed view"
        
        if 'banned_words' in elements:
            for banned in elements['banned_words']:
                if banned.lower() in prompt.lower():
                    # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
                    return self._generate_safe_about2(elements, theme)
        
        return prompt
    
    def _generate_safe_about2(self, elements, theme):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π about2 –ø—Ä–æ–º–ø—Ç"""
        quality = random.choice(elements['qualities'])
        comp = random.choice(self.compositions)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        safe_variants = [
            f"{quality} service environment, {comp}",
            f"professional workspace, {quality} facilities",
            f"{quality} interior design, modern setup"
        ]
        
        return random.choice(safe_variants)
    
    def _generate_about3_prompt(self, elements, theme, theme_lower):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç—Ä–µ—Ç–∏–π about –ø—Ä–æ–º–ø—Ç"""
        obj = random.choice(elements['objects'])
        action = random.choice(elements['actions'])
        style = random.choice(self.styles)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∞–≤–æ—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –µ–¥—ã
        if any(word in theme_lower for word in ['–µ–¥–∞', '–µ–¥—ã', 'food', 'delivery', '–¥–æ—Å—Ç–∞–≤–∫']):
            delivery_element = random.choice(elements.get('delivery_elements', []))
            return f"{action} {obj} via {delivery_element}, results showcase, {style}"
        
        return f"{action} {obj}, results showcase, {style}"
    
    def _generate_review_prompt(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤ - —Ç–æ–ª—å–∫–æ –ª—é–¥–∏"""
        people_variants = [
            "happy satisfied customer smiling",
            "pleased client with positive expression", 
            "delighted customer showing satisfaction",
            "cheerful person expressing joy",
            "content customer with thumbs up",
            "satisfied client in consultation",
            "happy customer receiving service"
        ]
        
        return random.choice(people_variants)
    
    def _generate_favicon_prompt(self, elements, theme, theme_lower):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω—ã–π —Ñ–∞–≤–∏–∫–æ–Ω –ø—Ä–æ–º–ø—Ç"""
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª –¥–ª—è —Ç–µ–º–∞—Ç–∏–∫–∏
        if 'favicon_symbols' in elements:
            symbol = random.choice(elements['favicon_symbols'])
        else:
            symbol = random.choice(self.general_elements['favicon_symbols'])
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª—å –∏ —Ü–≤–µ—Ç
        style = random.choice(self.favicon_styles)
        color = random.choice(self.favicon_colors)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        if any(word in theme_lower for word in ['–µ–¥–∞', '–µ–¥—ã', 'food', 'delivery', '–¥–æ—Å—Ç–∞–≤–∫']):
            base_name = 'food delivery'
        elif any(word in theme_lower for word in ['–∞–≤—Ç–æ', '–º–∞—à–∏–Ω', 'car', 'vehicle', '–ø—Ä–æ–¥–∞–∂']):
            base_name = 'car sales'
        elif any(word in theme_lower for word in ['–∫–æ—Ñ–µ', 'coffee', '–∫–∞—Ñ–µ', 'cafe']):
            base_name = 'coffee shop'
        elif any(word in theme_lower for word in ['–º–æ–π–∫–∞', 'wash', 'clean']):
            base_name = 'car wash'
        else:
            base_name = 'business'
        
        return f"{base_name} icon {symbol}, {style}, {color}, professional logo"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def create_smart_thematic_prompts(theme_input):
    """–°–æ–∑–¥–∞–µ—Ç –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω—ã–µ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–º–ø—Ç—ã"""
    generator = SmartVariativePrompts()
    prompts_dict = generator.generate_prompts(theme_input)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    return [
        prompts_dict['main'],
        prompts_dict['about1'], 
        prompts_dict['about2'],
        prompts_dict['about3'],
        prompts_dict['review1'],
        prompts_dict['review2'],
        prompts_dict['review3'],
        prompts_dict['favicon']
    ]

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
    generator = SmartVariativePrompts()
    
    test_themes = ["–¥–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã", "–ø—Ä–æ–¥–∞–∂–∞ –∞–≤—Ç–æ", "–∫–∞—Ñ–µ"]
    
    for theme in test_themes:
        print(f"\n=== {theme.upper()} - –¢–ï–°–¢ –í–ê–†–ò–ê–¢–ò–í–ù–û–°–¢–ò ===")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 3 —Ä–∞–∑–Ω—ã—Ö –Ω–∞–±–æ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
        for i in range(3):
            print(f"\n–í–∞—Ä–∏–∞–Ω—Ç {i+1}:")
            prompts = generator.generate_prompts(theme)
            
            for key, prompt in prompts.items():
                print(f"  {key}: {prompt}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
                if theme == "–¥–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã":
                    if any(bad in prompt.lower() for bad in ['box', '–∫–æ—Ä–æ–±–∫']):
                        print(f"    ‚ùå –ù–ê–ô–î–ï–ù–´ –ö–û–†–û–ë–ö–ò!")
                    elif 'delivery' in prompt.lower():
                        print(f"    ‚úÖ –ï—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∞!")
                    else:
                        print(f"    ‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –ø—Ä–æ–º–ø—Ç–µ")
                elif theme == "–ø—Ä–æ–¥–∞–∂–∞ –∞–≤—Ç–æ" and key == "about2" and any(bad in prompt.lower() for bad in ['mechanic', '–º–µ—Ö–∞–Ω–∏–∫']):
                    print(f"    ‚ùå –ù–ê–ô–î–ï–ù –ú–ï–•–ê–ù–ò–ö!")
                else:
                    print(f"    ‚úÖ –ü—Ä–æ–º–ø—Ç –±–µ–∑–æ–ø–∞—Å–µ–Ω") 