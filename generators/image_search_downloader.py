"""
–ú–æ–¥—É–ª—å –ø–æ–∏—Å–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Pixabay, Unsplash –∏ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä API –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
–ü–†–ï–ò–ú–£–©–ï–°–¢–í–û: –†–µ–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –≤–º–µ—Å—Ç–æ AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!
"""

import os
import requests
import time
import random
from urllib.parse import quote
from PIL import Image
from io import BytesIO
from pathlib import Path
import json

class ImageSearchDownloader:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Ç–µ–º–∞—Ç–∏–∫–µ –∏–∑ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    
    def __init__(self, silent_mode=False):
        self.silent_mode = silent_mode
        
        # API endpoints
        self.pixabay_api = "https://pixabay.com/api/"
        self.unsplash_api = "https://api.unsplash.com/search/photos"
        self.aggregate_api = "https://mulberry-tiny-washer.glitch.me/data"
        
        # API –∫–ª—é—á–∏ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
        self.pixabay_key = "46654479-d809d8c0df4c3b9a6768ee3a9"  # –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        self.unsplash_key = None  # –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞ unsplash.com/developers
        
        if not self.silent_mode:
            print("üîç ImageSearchDownloader - –ø–æ–∏—Å–∫ –†–ï–ê–õ–¨–ù–´–• —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π!")
    
    def search_and_download_thematic_set(self, theme_input, media_dir, progress_callback=None):
        """
        –ò—â–µ—Ç –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Ç–µ–º–∞—Ç–∏–∫–µ
        
        Args:
            theme_input (str): –¢–µ–º–∞—Ç–∏–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä "—à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂")
            media_dir (str): –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            progress_callback (callable): –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        """
        if not self.silent_mode:
            print(f"üîç –ü–û–ò–°–ö –†–ï–ê–õ–¨–ù–´–• –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –ø–æ —Ç–µ–º–µ: {theme_input}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É
        try:
            os.makedirs(media_dir, exist_ok=True)
            if not self.silent_mode:
                print(f"üìÅ –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {media_dir}")
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏: {e}")
            return 0
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        search_queries = self._generate_search_queries(theme_input)
        
        image_names = ['main', 'about1', 'about2', 'about3', 'review1', 'review2', 'review3', 'favicon']
        downloaded_count = 0
        
        for i, image_name in enumerate(image_names):
            if progress_callback:
                progress_callback(f"üîç –ü–æ–∏—Å–∫ {image_name} ({i+1}/8)...")
            
            if not self.silent_mode:
                print(f"üîç –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_name} ({i+1}/8)...")
            
            query = search_queries.get(image_name, theme_input)
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            result = self._download_single_image(query, image_name, media_dir)
            
            if result:
                downloaded_count += 1
                if not self.silent_mode:
                    print(f"‚úÖ {image_name}: –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞!")
            else:
                if not self.silent_mode:
                    print(f"‚ùå {image_name}: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        
        if not self.silent_mode:
            print(f"üéØ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {downloaded_count}/8 –†–ï–ê–õ–¨–ù–´–• –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!")
        
        return downloaded_count
    
    def _generate_search_queries(self, theme_input):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–º–∞—Ç–∏–∫—É –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞
        theme_en = self._translate_theme_to_english(theme_input)
        
        return {
            'main': f"{theme_en} business professional service",
            'about1': f"{theme_en} team work professional",
            'about2': f"{theme_en} process workflow modern",  
            'about3': f"{theme_en} equipment tools technology",
            'review1': "happy customer smiling portrait business",
            'review2': "satisfied client woman professional",
            'review3': "pleased customer man testimonial",
            'favicon': f"{theme_en} icon logo symbol simple"
        }
    
    def _translate_theme_to_english(self, theme_ru):
        """–ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ–º–∞—Ç–∏–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"""
        translations = {
            '—à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂': 'tire service auto repair',
            '–∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å': 'auto service car repair', 
            '—Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫': 'plumber plumbing service',
            '—ç–ª–µ–∫—Ç—Ä–∏–∫': 'electrician electrical service',
            '–∫–ª–∏–Ω–∏–Ω–≥': 'cleaning service housekeeping',
            '—Ä–µ–º–æ–Ω—Ç': 'repair service maintenance',
            '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ': 'construction building',
            '–º–µ–¥–∏—Ü–∏–Ω–∞': 'medical healthcare clinic',
            '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': 'education learning school',
            '—é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏': 'legal services lawyer',
            '–±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è': 'accounting bookkeeping finance',
            '–∫—Ä–∞—Å–æ—Ç–∞': 'beauty salon cosmetics',
            '—Ñ–∏—Ç–Ω–µ—Å': 'fitness gym sport',
            '—Ä–µ—Å—Ç–æ—Ä–∞–Ω': 'restaurant food dining',
            '–¥–æ—Å—Ç–∞–≤–∫–∞': 'delivery shipping logistics',
            '–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å': 'real estate property',
            '—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ': 'insurance financial',
            '—Ç—É—Ä–∏–∑–º': 'travel tourism vacation'
        }
        
        # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        for ru_key, en_value in translations.items():
            if ru_key.lower() in theme_ru.lower():
                return en_value
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å + business
        return f"{theme_ru} business service"
    
    def _download_single_image(self, query, image_name, media_dir):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø—Ä–æ–±—É—è —Ä–∞–∑–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏"""
        
        # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        sources = [
            ('pixabay', self._search_pixabay),
            ('aggregate', self._search_aggregate_api),
            ('unsplash', self._search_unsplash) if self.unsplash_key else None
        ]
        
        # –£–±–∏—Ä–∞–µ–º None
        sources = [s for s in sources if s is not None]
        
        for source_name, search_func in sources:
            if not self.silent_mode:
                print(f"üîç –ü—Ä–æ–±—É–µ–º {source_name} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query}")
            
            try:
                image_url = search_func(query, image_name)
                if image_url:
                    downloaded_path = self._download_image_from_url(
                        image_url, image_name, media_dir
                    )
                    if downloaded_path:
                        if not self.silent_mode:
                            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ {source_name}: {image_url[:50]}...")
                        return downloaded_path
                    
            except Exception as e:
                if not self.silent_mode:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ {source_name}: {str(e)[:50]}...")
                continue
        
        return None
    
    def _search_pixabay(self, query, image_name):
        """–ü–æ–∏—Å–∫ –≤ Pixabay API"""
        params = {
            'key': self.pixabay_key,
            'q': query,
            'image_type': 'photo',
            'orientation': 'horizontal',
            'category': 'business',
            'min_width': 640,
            'min_height': 480,
            'safesearch': 'true',
            'per_page': 20
        }
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
        if image_name == 'favicon':
            params.update({
                'orientation': 'all',
                'category': 'symbols',
                'image_type': 'vector'
            })
        elif 'review' in image_name:
            params.update({
                'category': 'people',
                'orientation': 'vertical'
            })
        
        response = requests.get(self.pixabay_api, params=params, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('hits'):
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ç–æ–ø–∞
                hit = data['hits'][0]
                return hit.get('webformatURL') or hit.get('largeImageURL')
        
        return None
    
    def _search_aggregate_api(self, query, image_name):
        """–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä API"""
        params = {
            'query': query,
            'service': 'unsplash,pixabay'  # –ò—Å–∫–ª—é—á–∞–µ–º –ø–ª–∞—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        }
        
        response = requests.get(self.aggregate_api, params=params, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('imageData'):
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image_data = data['imageData'][0]
                return image_data.get('src')
        
        return None
    
    def _search_unsplash(self, query, image_name):
        """–ü–æ–∏—Å–∫ –≤ Unsplash API (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á)"""
        if not self.unsplash_key:
            return None
            
        headers = {'Authorization': f'Client-ID {self.unsplash_key}'}
        params = {
            'query': query,
            'orientation': 'landscape',
            'per_page': 20
        }
        
        if 'review' in image_name:
            params['orientation'] = 'portrait'
        
        response = requests.get(self.unsplash_api, headers=headers, params=params, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('results'):
                result = data['results'][0]
                return result.get('urls', {}).get('regular')
        
        return None
    
    def _download_image_from_url(self, image_url, image_name, media_dir):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–≥–æ"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            response = requests.get(image_url, timeout=30, stream=True)
            
            if response.status_code == 200:
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image = Image.open(BytesIO(response.content))
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                if image_name == 'favicon':
                    output_path = Path(media_dir) / f"{image_name}.png"
                    target_size_kb = 50
                    # –î–ª—è —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏ –¥–µ–ª–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π
                    image = self._make_favicon(image)
                else:
                    output_path = Path(media_dir) / f"{image_name}.jpg"
                    target_size_kb = 150
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å —Å–∂–∞—Ç–∏–µ–º
                if self._save_compressed_image(image, str(output_path), target_size_kb):
                    return str(output_path)
            
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {image_url[:30]}...: {e}")
        
        return None
    
    def _make_favicon(self, image):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–≤–∏–∫–æ–Ω–∫—É –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ RGBA
            if image.mode != 'RGBA':
                image = image.convert('RGBA')
            
            # –î–µ–ª–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π 512x512
            image = image.resize((512, 512), Image.Resampling.LANCZOS)
            
            return image
            
        except Exception:
            return image
    
    def _save_compressed_image(self, image, filepath, target_size_kb=150):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω—É–∂–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç
            if filepath.endswith('.png'):
                format_type = 'PNG'
                image.save(filepath, format=format_type, optimize=True)
            else:
                format_type = 'JPEG'
                # –î–ª—è JPEG –ø–æ–¥–±–∏—Ä–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
                for quality in [95, 85, 75, 65, 55, 45]:
                    image.save(filepath, format=format_type, quality=quality, optimize=True)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
                    file_size_kb = os.path.getsize(filepath) / 1024
                    if file_size_kb <= target_size_kb:
                        break
            
            return True
            
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
def create_image_search_generator(silent_mode=False):
    """–°–æ–∑–¥–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    return ImageSearchDownloader(silent_mode=silent_mode)


# –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º  
class ThematicImageSearcher:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –ø–æ–∏—Å–∫ –≤–º–µ—Å—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    
    def __init__(self, silent_mode=False):
        self.silent_mode = silent_mode
        self.searcher = ImageSearchDownloader(silent_mode=silent_mode)
    
    def generate_thematic_set(self, theme_input, media_dir, method="search", progress_callback=None):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞–±–æ—Ä —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ –≤–º–µ—Å—Ç–æ AI"""
        return self.searcher.search_and_download_thematic_set(
            theme_input, media_dir, progress_callback
        ) 