from PySide6 import QtWidgets, QtGui, QtCore
import sys
import platform
from pathlib import Path

from shared.settings_manager import SettingsManager, get_desktop_path
from core.version import VERSION
from shared.helpers import validate_domain, get_language_by_country, get_language_display_name, check_directory_exists, ensure_empty_zip_for_landing, sanitize_filename, get_country_short_code
from shared.city_generator import CityGenerator
from shared.data import COUNTRIES_DATA
from core.cursor_manager import CursorManager
from generators.prompt_generator import create_landing_prompt
from core.update_checker import UpdateChecker


class QtMainWindow(QtWidgets.QMainWindow):
	def __init__(self):
		super().__init__()
		self.setWindowTitle("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –õ–µ–Ω–¥–∏–Ω–≥–æ–≤ v2.0 ‚Äî Qt")
		self.resize(1100, 780)
		self.setMinimumSize(980, 720)

		self.settings = SettingsManager()
		self.cursor_manager = CursorManager()
		self.city_generator = CityGenerator()

		self.country = ""
		self.city = ""
		self.theme = ""
		self.domain = ""

		self._bg_threads = []
		self.max_parallel = 5
		self._active_builds = 0
		self._build_queue = []  # list of params dicts
		self._active_jobs = []  # running params
		self._job_seq = 1
		self._last_city_by_country = {}
		self._pending_update_sha = None
		# –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–æ–≤ —è–∑—ã–∫–æ–≤ –¥–ª—è —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
		self._language_code_to_display = {
			"en": "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π",
			"ru": "—Ä—É—Å—Å–∫–∏–π",
			"uk": "—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π",
			"be": "–±–µ–ª–æ—Ä—É—Å—Å–∫–∏–π",
			"kk": "–∫–∞–∑–∞—Ö—Å–∫–∏–π",
			"de": "–Ω–µ–º–µ—Ü–∫–∏–π",
			"fr": "—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π",
			"it": "–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π",
			"es": "–∏—Å–ø–∞–Ω—Å–∫–∏–π",
			"pl": "–ø–æ–ª—å—Å–∫–∏–π",
			"cs": "—á–µ—à—Å–∫–∏–π",
			"tr": "—Ç—É—Ä–µ—Ü–∫–∏–π",
			"zh": "–∫–∏—Ç–∞–π—Å–∫–∏–π",
			"ja": "—è–ø–æ–Ω—Å–∫–∏–π",
			"ko": "–∫–æ—Ä–µ–π—Å–∫–∏–π",
			"hi": "—Ö–∏–Ω–¥–∏",
			"pt": "–ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π",
		}
		self._build_ui()
		self._apply_modern_style()
		self._load_initial_state()
		self._init_city()

		# –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
		try:
			QtCore.QTimer.singleShot(2000, self._check_updates_on_start)
			self._updates_timer = QtCore.QTimer(self)
			self._updates_timer.setInterval(30 * 60 * 1000)  # –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
			self._updates_timer.timeout.connect(self._check_updates_on_start)
			self._updates_timer.start()
		except Exception:
			pass
 
		# –û—Ç–∫–ª—é—á–µ–Ω–æ: –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
		# –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –µ—Å–ª–∏ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω —Ä–∞–Ω–µ–µ
		try:
			prev_prompt = self.settings.get_prompt()
			if prev_prompt:
				self._custom_prompt = prev_prompt
		except Exception:
			pass

	def _build_ui(self):
		central = QtWidgets.QWidget()
		self.setCentralWidget(central)

		main = QtWidgets.QVBoxLayout(central)
		main.setContentsMargins(12, 12, 12, 12)
		main.setSpacing(10)

		# Header actions
		header = QtWidgets.QHBoxLayout()
		header.setSpacing(8)
		self.edit_prompt_btn = QtWidgets.QPushButton("‚úèÔ∏è –ü—Ä–æ–º–ø—Ç")
		self.reset_prompt_btn = QtWidgets.QPushButton("üîÑ –°–±—Ä–æ—Å")
		self.update_btn = QtWidgets.QPushButton("‚¨áÔ∏è –û–±–Ω–æ–≤–∏—Ç—å")
		self.settings_btn = QtWidgets.QPushButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
		self.grid_btn = QtWidgets.QPushButton("üß© –°–µ—Ç–∫–∞")
		self.stop_btn = QtWidgets.QPushButton("‚èπÔ∏è –°—Ç–æ–ø")
		self.create_btn = QtWidgets.QPushButton("üöÄ –°–û–ó–î–ê–¢–¨ ‚ú®")
		self.create_btn.setObjectName("PrimaryButton")
		header.addWidget(self.edit_prompt_btn)
		header.addWidget(self.reset_prompt_btn)
		header.addWidget(self.update_btn)
		header.addWidget(self.settings_btn)
		header.addWidget(self.grid_btn)
		header.addWidget(self.stop_btn)
		self.version_label = QtWidgets.QLabel(f"v: {VERSION}")
		self.version_label.setStyleSheet("color:#94a3b8;font-size:12px;")
		header.addStretch(1)
		header.addWidget(self.version_label)
		header.addWidget(self.create_btn)
		main.addLayout(header)

		# Form grid (compact)
		form = QtWidgets.QGridLayout()
		form.setHorizontalSpacing(10)
		form.setVerticalSpacing(8)
		row = 0

		# Save path
		self.path_edit = QtWidgets.QLineEdit(self.settings.get_save_path())
		browse_btn = QtWidgets.QPushButton("üìÅ –í—ã–±—Ä–∞—Ç—å")
		browse_btn.clicked.connect(self._browse_path)
		desk_btn = QtWidgets.QPushButton("üè† –†–∞–±–æ—á–∏–π —Å—Ç–æ–ª")
		desk_btn.clicked.connect(self._reset_to_desktop)
		form.addWidget(QtWidgets.QLabel("–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤"), row, 0)
		form.addWidget(self.path_edit, row, 1)
		btns = QtWidgets.QHBoxLayout()
		btns.addWidget(desk_btn)
		btns.addWidget(browse_btn)
		w_btns = QtWidgets.QWidget()
		w_btns.setLayout(btns)
		form.addWidget(w_btns, row, 2)
		row += 1

		# Theme (history)
		self.theme_combo = QtWidgets.QComboBox()
		self.theme_combo.setEditable(True)
		self.theme_combo.setInsertPolicy(QtWidgets.QComboBox.NoInsert)
		self.theme_combo.setPlaceholderText("–ü—Ä–∏–º–µ—Ä—ã: –ü—Ä–æ–¥–∞–∂–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –¥–æ–º–æ–≤‚Ä¶")
		form.addWidget(QtWidgets.QLabel("–¢–µ–º–∞—Ç–∏–∫–∞ –ª–µ–Ω–¥–∏–Ω–≥–∞"), row, 0)
		form.addWidget(self.theme_combo, row, 1, 1, 2)
		row += 1

		# Country + favorites + City
		self.country_combo = QtWidgets.QComboBox()
		self.country_combo.setEditable(True)
		self.country_combo.setInsertPolicy(QtWidgets.QComboBox.NoInsert)
		self.country_combo.currentTextChanged.connect(self._on_country_change)
		self.fav_btn = QtWidgets.QPushButton("‚òÜ")
		self.fav_btn.setFixedSize(32, 32)
		self.fav_btn.setToolTip("–î–æ–±–∞–≤–∏—Ç—å/—É–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
		self.fav_btn.setStyleSheet("QPushButton{font-size:18px; padding:0;}")
		self.fav_btn.clicked.connect(self._toggle_favorite_country)
		self.city_btn = QtWidgets.QPushButton("üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä–æ–¥")
		self.city_btn.clicked.connect(self._generate_city)
		form.addWidget(QtWidgets.QLabel("–°—Ç—Ä–∞–Ω–∞"), row, 0)
		cc = QtWidgets.QHBoxLayout()
		cc.setContentsMargins(0, 0, 0, 0)
		cc.setSpacing(6)
		cc_container = QtWidgets.QWidget()
		cc_container.setLayout(cc)
		cc.addWidget(self.country_combo, 1)
		cc.addWidget(self.fav_btn, 0)
		form.addWidget(cc_container, row, 1)
		form.addWidget(self.city_btn, row, 2, alignment=QtCore.Qt.AlignTop)
		row += 1

		# Language override (checkbox + combobox)
		self.custom_lang_cb = QtWidgets.QCheckBox("–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —è–∑—ã–∫")
		self.custom_lang_combo = QtWidgets.QComboBox()
		self.custom_lang_combo.addItems(["en","ru","uk","be","kk","de","fr","it","es","pl","cs","tr","zh","ja","ko","hi","pt"])
		self.custom_lang_combo.setEnabled(False)
		self.custom_lang_cb.toggled.connect(self._on_custom_lang_toggle)
		self.custom_lang_combo.currentTextChanged.connect(self._on_custom_lang_changed)
		form.addWidget(self.custom_lang_cb, row, 0)
		form.addWidget(self.custom_lang_combo, row, 1)
		row += 1

		# Domain
		self.domain_edit = QtWidgets.QLineEdit()
		form.addWidget(QtWidgets.QLabel("–î–æ–º–µ–Ω"), row, 0)
		form.addWidget(self.domain_edit, row, 1)
		self.no_images_checkbox = QtWidgets.QCheckBox("–ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
		self.no_images_checkbox.setToolTip("–°–æ–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–∞–ø–∫–∏ –∏ –æ—Ç–∫—Ä—ã—Ç—å Cursor —Å –ø—Ä–æ–º–ø—Ç–æ–º")
		form.addWidget(self.no_images_checkbox, row, 2)
		row += 1

		# –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ (—Ñ–æ—Ä–º–∞ + —Å—Ç–∞—Ç—É—Å + –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã)
		right_v = QtWidgets.QVBoxLayout()
		right_v.setSpacing(10)
		right_v.addLayout(form)

		# Status bar (custom)
		self.status_label = QtWidgets.QLabel("‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
		self.status_label.setObjectName("StatusLabel")
		right_v.addWidget(self.status_label)
		# Mini queue panel
		queue_group = QtWidgets.QGroupBox("–û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á")
		ql = QtWidgets.QVBoxLayout(queue_group)
		self.queue_list = QtWidgets.QListWidget()
		self.queue_list.setMaximumHeight(120)
		ql.addWidget(self.queue_list)
		self.queue_label = QtWidgets.QLabel("–û—á–µ—Ä–µ–¥—å: 0")
		self.queue_label.setStyleSheet("color:#94a3b8; font-size:12px;")
		ql.addWidget(self.queue_label)
		right_v.addWidget(queue_group)

		# Image generation settings (model selection)
		model_group = QtWidgets.QGroupBox("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
		model_layout = QtWidgets.QHBoxLayout(model_group)
		model_layout.addWidget(QtWidgets.QLabel("–ú–æ–¥–µ–ª—å Ideogram:"))
		self.model_combo = QtWidgets.QComboBox()
		self.model_combo.addItems(["3.0 Turbo"]) 
		current_model = self.settings.settings.get("ideogram_model", "3.0 Turbo")
		idx = self.model_combo.findText(current_model)
		self.model_combo.setCurrentIndex(idx if idx >= 0 else 0)
		self.model_combo.currentTextChanged.connect(self._on_model_change)
		model_layout.addWidget(self.model_combo)
		right_v.addWidget(model_group)

		# –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ ‚Äî –ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã + –ò—Å—Ç–æ—Ä–∏—è –ª–µ–Ω–¥–∏–Ω–≥–æ–≤
		left_group = QtWidgets.QGroupBox("–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø")
		left_layout = QtWidgets.QVBoxLayout(left_group)
		self.last_country_label = QtWidgets.QLabel("")
		self.last_country_label.setStyleSheet("color:#94a3b8; font-size:12px;")
		left_layout.addWidget(self.last_country_label)
		# –ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã (–∫–æ–º–ø–∞–∫—Ç–Ω–µ–µ)
		fav_title = QtWidgets.QLabel("–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã")
		fav_title.setStyleSheet("color:#cbd5e1; font-size:12px;")
		left_layout.addWidget(fav_title)
		self.fav_list = QtWidgets.QListWidget()
		self.fav_list.setMaximumHeight(180)
		self.fav_list.itemClicked.connect(self._on_favorite_clicked)
		self.fav_list.itemDoubleClicked.connect(self._on_favorite_double_clicked)
		left_layout.addWidget(self.fav_list)
		# –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–µ–Ω–¥–∏–Ω–≥–æ–≤
		hist_title = QtWidgets.QLabel("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ª–µ–Ω–¥–∏–Ω–≥–æ–≤")
		hist_title.setStyleSheet("color:#cbd5e1; font-size:12px; margin-top:6px;")
		left_layout.addWidget(hist_title)
		self.hist_list = QtWidgets.QListWidget()
		self.hist_list.setToolTip("–ö–ª–∏–∫ ‚Äî —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
		self.hist_list.itemClicked.connect(self._on_history_clicked)
		left_layout.addWidget(self.hist_list)

		# –£–∫–ª–∞–¥—ã–≤–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ —Ä—è–¥–æ–º
		right_widget = QtWidgets.QWidget()
		right_widget.setLayout(right_v)
		content = QtWidgets.QHBoxLayout()
		content.setSpacing(12)
		content.addWidget(left_group, 1)
		content.addWidget(right_widget, 3)
		main.addLayout(content)

		# Signals
		self.create_btn.clicked.connect(self._on_create)
		self.reset_prompt_btn.clicked.connect(self._reset_prompt)
		self.edit_prompt_btn.clicked.connect(self._edit_prompt)
		# –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: –≤ Windows —Å–∫–∞—á–∏–≤–∞–µ–º EXE, –≤ –¥—Ä—É–≥–∏—Ö –û–° ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å—Ç–∞–≤–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤
		if platform.system().lower() == 'windows':
			self.update_btn.clicked.connect(self._download_latest_program)
		else:
			self.update_btn.clicked.connect(self._manual_check_updates)
		self.settings_btn.clicked.connect(self._open_settings_dialog)
		self.grid_btn.clicked.connect(self._open_grid_dialog)
		self.stop_btn.clicked.connect(self._stop_all)

		# –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –Ω–∞–ª–∏—á–∏—é API –∫–ª—é—á–∞
		self._refresh_no_images_state()

	def _download_latest_program(self):
		"""–°–∫–∞—á–∏–≤–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π LandGen.exe —Å —Ä–µ–ª–∏–∑–∞ latest –Ω–∞ –†–∞–±–æ—á–∏–π —Å—Ç–æ–ª."""
		try:
			from pathlib import Path
			import requests
			self.status_label.setText("‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ LandGen.exe...")
			# –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–µ—à–µ–π, –∏ cache-busting –ø–∞—Ä–∞–º–µ—Ç—Ä
			base = "https://github.com/igorao79/prompthelper/releases/latest/download/LandGen.exe"
			import time, os
			url = f"{base}?t={int(time.time())}"
			# –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—É—é –ø–∞–ø–∫—É: Desktop ‚Üí Downloads ‚Üí CWD ‚Üí TEMP
			def _candidate_dirs():
				dirs = []
				try:
					dirs.append(Path(str(get_desktop_path())))
				except Exception:
					pass
				dirs.extend([
					Path.home() / "Downloads",
					Path.home() / "–ó–∞–≥—Ä—É–∑–∫–∏",
					Path.cwd(),
					Path(os.environ.get("TEMP", os.environ.get("TMP", str(Path.home()))))
				])
				return dirs
			def _first_writable_dir():
				for d in _candidate_dirs():
					try:
						d.mkdir(parents=True, exist_ok=True)
						probe = d / ".__lg_probe.tmp"
						with open(probe, "wb") as f:
							f.write(b"ok")
						probe.unlink(missing_ok=True)
						return d
					except PermissionError:
						continue
					except Exception:
						continue
				# –§–æ–ª–ª–±–µ–∫ –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–π TEMP
				import tempfile
				return Path(tempfile.gettempdir())
			dest_dir = _first_writable_dir()
			dest = dest_dir / "LandGen.exe"
			def _bg_download():
				try:
					r = requests.get(url, stream=True, timeout=60, headers={"Cache-Control":"no-cache","Pragma":"no-cache","User-Agent":"LandGen-Client"})
					if r.status_code != 200:
						raise RuntimeError(f"HTTP {r.status_code}")
					length = int(r.headers.get("Content-Length", "0") or 0)
					written = 0
					# –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞—Ç–∞–ª–æ–≥–∞—Ö –ø–æ –æ—á–µ—Ä–µ–¥–∏
					candidates = []
					for d in _candidate_dirs():
						try:
							d.mkdir(parents=True, exist_ok=True)
							probe = d / ".__lg_probe.tmp"
							with open(probe, "wb") as pf:
								pf.write(b"ok")
							probe.unlink(missing_ok=True)
							candidates.append(d)
						except Exception:
							continue
					if not candidates:
						candidates = [dest.parent]
					saved_path = None
					last_err = None
					for target_dir in candidates:
						try:
							cur_dest = target_dir / "LandGen.exe"
							with open(cur_dest, "wb") as f:
								for chunk in r.iter_content(chunk_size=1024 * 64):
									if not chunk:
										continue
									f.write(chunk)
									written += len(chunk)
									if length:
										pct = int(written * 100 / length)
										QtCore.QMetaObject.invokeMethod(
											self.status_label, "setText", QtCore.Qt.QueuedConnection, QtCore.Q_ARG(str, f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ LandGen.exe... {pct}%")
										)
							saved_path = str(cur_dest)
							break
						except PermissionError as pe:
							last_err = pe
							continue
						except Exception as we:
							last_err = we
							break
					if not saved_path:
						raise last_err or RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª")
					QtCore.QMetaObject.invokeMethod(
						self.status_label, "setText", QtCore.Qt.QueuedConnection, QtCore.Q_ARG(str, "‚úÖ LandGen.exe —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
					)
					QtCore.QMetaObject.invokeMethod(
						self, "_on_download_done", QtCore.Qt.QueuedConnection, QtCore.Q_ARG(str, str(saved_path))
					)
				except PermissionError as e:
					QtCore.QMetaObject.invokeMethod(
						self.status_label, "setText", QtCore.Qt.QueuedConnection, QtCore.Q_ARG(str, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è EXE: –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞")
					)
					QtCore.QMetaObject.invokeMethod(
						self, "_on_download_error", QtCore.Qt.QueuedConnection, QtCore.Q_ARG(str, f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –ø–∞–ø–∫—É –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
					)
					return
				except Exception as e:
					QtCore.QMetaObject.invokeMethod(
						self.status_label, "setText", QtCore.Qt.QueuedConnection, QtCore.Q_ARG(str, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è EXE")
					)
					QtCore.QMetaObject.invokeMethod(
						self, "_on_download_error", QtCore.Qt.QueuedConnection, QtCore.Q_ARG(str, self._mask_urls(str(e)))
					)
			worker = QtCore.QThread(self)
			worker.run = _bg_download  # type: ignore
			self._bg_threads.append(worker)
			worker.finished.connect(lambda: self._bg_threads.remove(worker) if worker in self._bg_threads else None)
			worker.start()
		except Exception as e:
			QtWidgets.QMessageBox.critical(self, "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å EXE. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")
			self.status_label.setText("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è EXE")

	@QtCore.Slot(str)
	def _on_download_done(self, dest: str):
		try:
			QtWidgets.QMessageBox.information(self, "–°–∫–∞—á–∞–Ω–æ", f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {dest}")
			# –ü–æ–¥—Å–≤–µ—Ç–∏–º —Ñ–∞–π–ª –≤ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–µ, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç UI
			QtGui.QDesktopServices.openUrl(QtCore.QUrl.fromLocalFile(str(Path(dest).parent)))
			if getattr(self, "_pending_update_sha", None):
				self.settings.set_last_update_sha(self._pending_update_sha)
				self._pending_update_sha = None
			# –ê–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–≤–µ—Ä—Ö (Windows): –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω—ã –∏–∑ EXE ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏–º –∑–∞–º–µ–Ω—É –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
			if platform.system().lower() == 'windows':
				try:
					cur_path = Path(sys.argv[0]).resolve()
					if cur_path.suffix.lower() == '.exe' and Path(dest).exists():
						res = QtWidgets.QMessageBox.question(
							self,
							"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
							"–ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ–π—á–∞—Å?",
							QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
							QtWidgets.QMessageBox.Yes
						)
						if res == QtWidgets.QMessageBox.Yes:
							self._install_downloaded_exe_in_place(dest, str(cur_path))
				except Exception:
					pass
		except Exception:
			pass

	def _install_downloaded_exe_in_place(self, downloaded_path: str, current_exe_path: str):
		"""Windows: –∑–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π EXE —Å–∫–∞—á–∞–Ω–Ω—ã–º, –∑–∞—Ç–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å. –î–µ–ª–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–π .bat."""
		try:
			import subprocess, tempfile
			tmpdir = Path(tempfile.gettempdir())
			bat_path = tmpdir / "landgen_self_update.bat"
			src = Path(downloaded_path).resolve()
			dst = Path(current_exe_path).resolve()
			bat_content = (
				"@echo off\r\n"
				"setlocal\r\n"
				f"set SRC=\"{src}\"\r\n"
				f"set DST=\"{dst}\"\r\n"
				"echo Updating...\r\n"
				":wait\r\n"
				"timeout /t 1 /nobreak >nul\r\n"
				"copy /y %SRC% %DST% >nul 2>&1\r\n"
				"if errorlevel 1 goto wait\r\n"
				"start \"\" %DST%\r\n"
				"del %SRC% >nul 2>&1\r\n"
				"del \"%~f0\" >nul 2>&1\r\n"
				"endlocal\r\n"
			)
			with open(bat_path, 'w', encoding='utf-8') as f:
				f.write(bat_content)
			# –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞—Ç–Ω–∏–∫ –±–µ–∑ –æ–∫–Ω–∞
			try:
				si = subprocess.STARTUPINFO()
				si.dwFlags |= subprocess.STARTF_USESHOWWINDOW
				creationflags = 0x08000000
			except Exception:
				si = None
				creationflags = 0
			subprocess.Popen(["cmd", "/c", str(bat_path)], startupinfo=si, creationflags=creationflags)
			# –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª
			QtWidgets.QApplication.quit()
		except Exception as e:
			QtWidgets.QMessageBox.critical(self, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É: {e}")

	@QtCore.Slot(str)
	def _on_download_error(self, message: str):
		try:
			QtWidgets.QMessageBox.critical(self, "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ", self._mask_urls(message))
		except Exception:
			pass

	def _mask_urls(self, text: str) -> str:
		"""–°–∫—Ä—ã–≤–∞–µ—Ç —è–≤–Ω—ã–µ URL –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –æ–± –æ—à–∏–±–∫–∞—Ö (–¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–æ–∫)."""
		try:
			import re
			return re.sub(r"https?://[^\s]+", "<hidden>", text or "")
		except Exception:
			return text or ""

	def _on_model_change(self, text: str):
		try:
			self.settings.settings["ideogram_model"] = text.strip()
			self.settings.save_settings()
			self.status_label.setText(f"‚úÖ –ú–æ–¥–µ–ª—å Ideogram: {text}")
		except Exception:
			pass

	def _init_city(self):
		# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
		try:
			country = self.country_combo.currentText().strip()
			if country:
				self._generate_city()
		except Exception:
			pass

	def _check_updates_on_start(self):
		try:
			# –í dev-—Ä–µ–∂–∏–º–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞—à–∫—É –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
			try:
				if isinstance(VERSION, str) and 'dev' in VERSION.lower():
					return
			except Exception:
				pass
			checker = UpdateChecker(self.settings)
			info = checker.check()
			if info.available:
				res = QtWidgets.QMessageBox.question(
					self,
					"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ",
					"–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ. –û–±–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å?",
					QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
					QtWidgets.QMessageBox.Yes
				)
				if res == QtWidgets.QMessageBox.Yes:
					if platform.system().lower() == 'windows':
						self._start_windows_exe_download_for_update(info.latest_sha)
					else:
						self._download_and_apply_update(info.latest_sha, info.zip_url, getattr(info, 'binary_url', None))
		except Exception:
			pass

	def _start_windows_exe_download_for_update(self, latest_sha: str):
		try:
			self._pending_update_sha = latest_sha
			self._download_latest_program()
		except Exception:
			pass

	def _download_and_apply_update(self, latest_sha: str, zip_url: str, binary_url: str | None = None):
		try:
			self.status_label.setText("‚¨áÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–±–æ—Ä–∫—É...")
			import requests, io, zipfile
			def _bg_update():
				try:
					# 1) Windows: –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ EXE —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ö–∞–Ω–∏–∑–º
					if platform.system().lower() == 'windows':
						QtCore.QMetaObject.invokeMethod(self, "_start_windows_exe_download_for_update", QtCore.Qt.QueuedConnection, QtCore.Q_ARG(str, latest_sha))
						return
					# 2) –ò–Ω–∞—á–µ ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ zip —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –∏ –±—ç–∫–∞–ø
					r = requests.get(zip_url, timeout=60)
					r.raise_for_status()
					zf = zipfile.ZipFile(io.BytesIO(r.content))
					import tempfile, shutil, os, time as _time
					with tempfile.TemporaryDirectory() as tmpdir:
						zf.extractall(tmpdir)
						names = zf.namelist()
						root_name = names[0].split('/')[0] if names else ''
						src_root = Path(tmpdir) / root_name if root_name else Path(tmpdir)
						whitelist = {"core", "generators", "gui", "shared", "tools", "main.py", "README.md", "requirements.txt"}
						backup_dir = Path(".backup_update") / _time.strftime("%Y%m%d_%H%M%S")
						backup_dir.mkdir(parents=True, exist_ok=True)
						for item in whitelist:
							src_path = src_root / item
							if not src_path.exists():
								continue
							dst_path = Path(item)
							# –ë—ç–∫–∞–ø —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
							try:
								if dst_path.exists():
									if dst_path.is_dir():
										shutil.copytree(dst_path, backup_dir / item)
									else:
										(backup_dir / dst_path.parent).mkdir(parents=True, exist_ok=True)
										shutil.copy2(dst_path, backup_dir / item)
							except Exception:
								pass
							# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö
							try:
								if src_path.is_dir():
									for root, dirs, files in os.walk(src_path):
										rel_root = Path(root).relative_to(src_path)
										target_root = dst_path / rel_root
										target_root.mkdir(parents=True, exist_ok=True)
										for fname in files:
											shutil.copy2(Path(root) / fname, target_root / fname)
								else:
									dst_path.parent.mkdir(parents=True, exist_ok=True)
									shutil.copy2(src_path, dst_path)
							except Exception:
								pass
					QtCore.QMetaObject.invokeMethod(self, "_apply_update_mark", QtCore.Qt.QueuedConnection, QtCore.Q_ARG(str, latest_sha))
					QtCore.QMetaObject.invokeMethod(
						self, "_on_update_sources_applied_with_backup", QtCore.Qt.QueuedConnection, QtCore.Q_ARG(str, str(backup_dir))
					)
				except Exception as e:
					QtCore.QMetaObject.invokeMethod(
						self, "_on_update_error", QtCore.Qt.QueuedConnection, QtCore.Q_ARG(str, str(e))
					)
			worker = QtCore.QThread(self)
			worker.run = _bg_update  # type: ignore
			self._bg_threads.append(worker)
			worker.finished.connect(lambda: self._bg_threads.remove(worker) if worker in self._bg_threads else None)
			worker.start()
		except Exception as e:
			QtWidgets.QMessageBox.critical(self, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			self.status_label.setText("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

	@QtCore.Slot()
	def _on_update_binary_downloaded(self):
		try:
			QtWidgets.QMessageBox.information(self, "–°–∫–∞—á–∞–Ω–æ", "–°–∫–∞—á–∞–Ω LandGen.exe —Ä—è–¥–æ–º —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π. –û—Ç–∫—Ä–æ–π—Ç–µ –ø–∞–ø–∫—É –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ.")
			self.status_label.setText("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–±–∏–Ω–∞—Ä–Ω–∏–∫) —Å–∫–∞—á–∞–Ω–æ")
		except Exception:
			pass

	@QtCore.Slot()
	def _on_update_sources_applied(self):
		try:
			QtWidgets.QMessageBox.information(self, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ", "–§–∞–π–ª—ã –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –î–ª—è EXE –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–°–∫–∞—á–∞—Ç—å EXE'.")
			self.status_label.setText("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
		except Exception:
			pass

	@QtCore.Slot(str)
	def _on_update_sources_applied_with_backup(self, backup_dir: str):
		try:
			QtWidgets.QMessageBox.information(self, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ", f"–§–∞–π–ª—ã –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ. –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_dir}")
			self.status_label.setText("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (—Å–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø)")
		except Exception:
			pass

	@QtCore.Slot(str)
	def _apply_update_mark(self, sha: str):
		try:
			self.settings.set_last_update_sha(sha)
		except Exception:
			pass

	@QtCore.Slot(str)
	def _on_update_error(self, message: str):
		try:
			QtWidgets.QMessageBox.critical(self, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å: {message}")
			self.status_label.setText("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
		except Exception:
			pass

	def _manual_check_updates(self):
		try:
			checker = UpdateChecker(self.settings)
			info = checker.check()
			if info.available:
				self._download_and_apply_update(info.latest_sha, info.zip_url, getattr(info, 'binary_url', None))
			else:
				msg = "–û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç" if not getattr(info, 'message', '') else f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç. {info.message}"
				QtWidgets.QMessageBox.information(self, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π", msg)
		except Exception as e:
			QtWidgets.QMessageBox.warning(self, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É: {e}")

	# —É–¥–∞–ª–µ–Ω—ã –º–µ—Ç–æ–¥—ã –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

	def _load_initial_state(self):
		# –ò—Å—Ç–æ—Ä–∏—è —Ç–µ–º–∞—Ç–∏–∫
		self.theme_combo.clear()
		history = self.settings.get_theme_history()
		if history:
			self.theme_combo.addItems(history)
		# –°—Ç—Ä–∞–Ω—ã (–∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–≤–µ—Ä—Ö—É)
		self._rebuild_country_items()
		# –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∞
		last_country = self.settings.get_last_selected_country()
		if last_country and last_country in COUNTRIES_DATA:
			idx = self.country_combo.findText(last_country)
			if idx >= 0:
				self.country_combo.setCurrentIndex(idx)
		self._update_fav_button()
		self._rebuild_favorites_list()
		self._update_last_country_label()

	def _rebuild_favorites_list(self):
		self.fav_list.clear()
		for c in self.settings.get_favorite_countries():
			item = QtWidgets.QListWidgetItem(c)
			if c == self.settings.get_last_selected_country():
				item.setData(QtCore.Qt.UserRole, "last")
				item.setForeground(QtGui.QColor("#22c55e"))
				font = item.font()
				font.setBold(True)
				item.setFont(font)
			self.fav_list.addItem(item)
		# –ò—Å—Ç–æ—Ä–∏—è –ª–µ–Ω–¥–∏–Ω–≥–æ–≤
		self.hist_list.clear()
		for e in self.settings.get_landing_history():
			text = e.get("domain", "")
			item = QtWidgets.QListWidgetItem(text)
			item.setData(QtCore.Qt.UserRole, e)
			self.hist_list.addItem(item)

	def _update_last_country_label(self):
		last = self.settings.get_last_selected_country()
		self.last_country_label.setText(f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∞: {last}" if last else "")

	def _on_favorite_clicked(self, item):
		country = item.text()
		idx = self.country_combo.findText(country)
		if idx >= 0:
			self.country_combo.setCurrentIndex(idx)

	def _on_favorite_double_clicked(self, item):
		self._on_favorite_clicked(item)
		self._generate_city()

	def _on_history_clicked(self, item):
		data = item.data(QtCore.Qt.UserRole)
		prompt = (data or {}).get("prompt", "")
		if not prompt:
			QtWidgets.QMessageBox.information(self, "–ò—Å—Ç–æ—Ä–∏—è", "–ü—Ä–æ–º–ø—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
			return
		try:
			QtWidgets.QApplication.clipboard().setText(prompt)
			QtWidgets.QMessageBox.information(self, "–ò—Å—Ç–æ—Ä–∏—è", "–ü—Ä–æ–º–ø—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
		except Exception:
			QtWidgets.QMessageBox.warning(self, "–ò—Å—Ç–æ—Ä–∏—è", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç")

	def _apply_modern_style(self):
		self.setStyleSheet(
			"""
			QWidget { background: #0b1220; color: #f8fafc; font-size: 14px; }
			QLabel { color: #cbd5e1; }
			/* –ò–Ω–ø—É—Ç—ã –±–æ–ª–µ–µ –≤–∏–¥–∏–º—ã–µ: –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–∞—è —Ä–∞–º–∫–∞ –∏ –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –≤ —Ñ–æ–∫—É—Å–µ (–±–µ–∑ box-shadow) */
			QLineEdit, QComboBox, QPlainTextEdit { background: #0b1526; border: 2px solid #1e293b; padding: 10px 12px; border-radius: 10px; color: #f8fafc; }
			QLineEdit:focus, QComboBox:focus, QPlainTextEdit:focus { border: 2px solid #2563eb; background: #0d1b2e; }
			QPushButton { background: #475569; border: 0px; padding: 10px 16px; border-radius: 10px; color: #f8fafc; }
			QPushButton:hover { background: #334155; }
			QPushButton#PrimaryButton { background: #2563eb; }
			QPushButton#PrimaryButton:hover { background: #1d4ed8; }
			#StatusLabel { color: #10b981; padding: 8px 6px; }
			/* –ü–æ–¥–ø–∏—Å–∏ –∫ –ø–æ–ª—è–º —è—Ä—á–µ */
			QGroupBox { border: 1px solid #1e293b; border-radius: 10px; margin-top: 8px; }
			QGroupBox::title { subcontrol-origin: margin; left: 10px; padding: 0 6px; color: #e2e8f0; }
			"""
		)

	def _refresh_no_images_state(self):
		try:
			has_key = bool(self.settings.get_ideogram_api_key())
			if not has_key:
				self.no_images_checkbox.setChecked(True)
				self.no_images_checkbox.setEnabled(False)
			else:
				self.no_images_checkbox.setEnabled(True)
		except Exception:
			pass

	def _open_settings_dialog(self):
		try:
			dlg = QtWidgets.QDialog(self)
			dlg.setWindowTitle("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
			layout = QtWidgets.QVBoxLayout(dlg)
			# Ideogram API
			grp_api = QtWidgets.QGroupBox("Ideogram API")
			api_layout = QtWidgets.QHBoxLayout(grp_api)
			api_layout.addWidget(QtWidgets.QLabel("API –∫–ª—é—á:"))
			api_edit = QtWidgets.QLineEdit(self.settings.get_ideogram_api_key())
			api_layout.addWidget(api_edit)
			btn_save_api = QtWidgets.QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª—é—á")
			api_layout.addWidget(btn_save_api)
			layout.addWidget(grp_api)

			# –§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ ‚Äî –≤—ã–±–æ—Ä –ø–∞–ø–∫–∏
			grp_file = QtWidgets.QGroupBox("–§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫")
			file_layout = QtWidgets.QHBoxLayout(grp_file)
			path_label = QtWidgets.QLineEdit(str(self.settings.settings_file))
			path_label.setReadOnly(True)
			btn_choose = QtWidgets.QPushButton("–í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É")
			file_layout.addWidget(path_label, 1)
			file_layout.addWidget(btn_choose)
			layout.addWidget(grp_file)

			# Cursor –ø–æ–≤–µ–¥–µ–Ω–∏–µ
			grp_cursor = QtWidgets.QGroupBox("Cursor")
			cursor_layout = QtWidgets.QVBoxLayout(grp_cursor)
			auto_paste_cb = QtWidgets.QCheckBox("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—Å—Ç–∞–≤–ª—è—Ç—å –ø—Ä–æ–º–ø—Ç –≤ Cursor")
			auto_paste_cb.setChecked(bool(self.settings.get_auto_paste_prompt()))
			cursor_layout.addWidget(auto_paste_cb)
			layout.addWidget(grp_cursor)

			btns = QtWidgets.QHBoxLayout()
			btn_ok = QtWidgets.QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
			btns.addStretch(1)
			btns.addWidget(btn_ok)
			layout.addLayout(btns)

			def _save_api():
				self.settings.set_ideogram_api_key(api_edit.text().strip())
				self.status_label.setText("‚úÖ API –∫–ª—é—á Ideogram —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
				self._refresh_no_images_state()
			btn_save_api.clicked.connect(_save_api)

			def _choose_dir():
				folder = QtWidgets.QFileDialog.getExistingDirectory(self, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É", str(Path(self.settings.settings_file).parent))
				if folder:
					ok = self.settings.relocate_settings_file(folder)
					if ok:
						path_label.setText(str(self.settings.settings_file))
						self.status_label.setText("‚úÖ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω")
					else:
						QtWidgets.QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫")
			btn_choose.clicked.connect(_choose_dir)

			def _toggle_auto_paste(checked: bool):
				self.settings.set_auto_paste_prompt(bool(checked))
			auto_paste_cb.toggled.connect(_toggle_auto_paste)

			btn_ok.clicked.connect(dlg.accept)
			dlg.exec()
		except Exception as e:
			QtWidgets.QMessageBox.critical(self, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

	def _browse_path(self):
		path = QtWidgets.QFileDialog.getExistingDirectory(self, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É", self.path_edit.text())
		if path:
			self.path_edit.setText(path)
			self.settings.set_save_path(path)

	def _reset_to_desktop(self):
		desktop = str(get_desktop_path())
		self.path_edit.setText(desktop)
		self.settings.set_save_path(desktop)

	def _generate_city(self):
		try:
			country = self.country_combo.currentText()
			if not country:
				QtWidgets.QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É!")
				return
			self.city = self.city_generator.get_random_city(country)
			self.status_label.setText(f"üèôÔ∏è –ì–æ—Ä–æ–¥: {self.city}")
		except Exception as e:
			QtWidgets.QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä–æ–¥: {e}")

	def _on_country_change(self, text):
		self.country = text
		if text:
			self.status_label.setText(f"üåê –Ø–∑—ã–∫: {self._get_effective_language_display(text)}")
			self._generate_city()
			self.settings.set_last_selected_country(text)
		self._update_fav_button()
		self._rebuild_favorites_list()
		self._update_last_country_label()

	def _toggle_favorite_country(self):
		country = self.country_combo.currentText().strip()
		if not country:
			return
		favs = set(self.settings.get_favorite_countries())
		if country in favs:
			self.settings.remove_favorite_country(country)
		else:
			self.settings.add_favorite_country(country)
		self._rebuild_country_items()
		self._update_fav_button()
		self._rebuild_favorites_list()

	def _rebuild_country_items(self):
		current = self.country_combo.currentText()
		favs = self.settings.get_favorite_countries()
		all_countries = list(COUNTRIES_DATA.keys())
		ordered = [c for c in favs if c in all_countries] + [c for c in sorted(all_countries) if c not in favs]
		self.country_combo.blockSignals(True)
		self.country_combo.clear()
		self.country_combo.addItems(ordered)
		self.country_combo.blockSignals(False)
		if current:
			idx = self.country_combo.findText(current)
			if idx >= 0:
				self.country_combo.setCurrentIndex(idx)

	def _update_fav_button(self):
		country = self.country_combo.currentText().strip()
		favs = set(self.settings.get_favorite_countries())
		self.fav_btn.setText("‚≠ê" if country in favs else "‚òÜ")

	def _edit_prompt(self):
		country = self.country_combo.currentText().strip()
		theme = self.theme_combo.currentText().strip()
		domain = self.domain_edit.text().strip()
		city = self.city
		if not theme or not country or not domain or not city:
			QtWidgets.QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É, —Å—Ç—Ä–∞–Ω—É, –¥–æ–º–µ–Ω –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –≥–æ—Ä–æ–¥")
			return
		language = self._get_effective_language_code(country)
		prompt = create_landing_prompt(country, city, language, domain, theme)
		text, ok = QtWidgets.QInputDialog.getMultiLineText(self, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞", "–ü—Ä–æ–º–ø—Ç:", prompt)
		if ok:
			self._custom_prompt = text
			self.settings.save_prompt(text)
			QtWidgets.QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", "–ü—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω")

	def _reset_prompt(self):
		self._custom_prompt = None
		self.settings.save_prompt("")
		QtWidgets.QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", "–ü—Ä–æ–º–ø—Ç —Å–±—Ä–æ—à–µ–Ω")

	def _validate(self):
		theme = self.theme_combo.currentText().strip()
		if not theme:
			return False, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É"
		country = self.country_combo.currentText().strip()
		if not country:
			return False, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É"
		domain = self.domain_edit.text().strip()
		is_valid, error_msg, fixed = validate_domain(domain)
		if not is_valid:
			return False, error_msg
		if fixed != domain:
			self.domain_edit.setText(fixed)
		self.theme = theme
		self.country = country
		self.domain = fixed
		return True, ""

	def _on_create(self):
		ok, msg = self._validate()
		if not ok:
			QtWidgets.QMessageBox.critical(self, "–û—à–∏–±–∫–∞", msg)
			return
		# –ï—Å–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–∞ ‚Äî –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å–Ω–∏–º–∞—Ç—å "–±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
		try:
			if not self.settings.get_ideogram_api_key() and not self.no_images_checkbox.isChecked():
				QtWidgets.QMessageBox.warning(self, "–¢—Ä–µ–±—É–µ—Ç—Å—è API –∫–ª—é—á", "–í–≤–µ–¥–∏—Ç–µ Ideogram API –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏–ª–∏ –≤–∫–ª—é—á–∏—Ç–µ —Ä–µ–∂–∏–º '–ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'.")
				return
		except Exception:
			pass
		language_display = self._get_effective_language_display(self.country) if self.country else ""
		res = QtWidgets.QMessageBox.question(
			self,
			"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
			f"–°–æ–∑–¥–∞—Ç—å –ª–µ–Ω–¥–∏–Ω–≥?\n\n–¢–µ–º–∞—Ç–∏–∫–∞: {self.theme}\n–°—Ç—Ä–∞–Ω–∞: {self.country}\n–ì–æ—Ä–æ–¥: {self.city}\n–Ø–∑—ã–∫: {language_display}\n–î–æ–º–µ–Ω: {self.domain}\n–ü–∞–ø–∫–∞: {self.path_edit.text()}\n\n–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—É–¥—É—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –∏ –∑–∞–¥–∞–Ω API –∫–ª—é—á."
		)
		if res != QtWidgets.QMessageBox.Yes:
			return
		# –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å; –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∞–º –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç –¥–æ 5 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
		self._enqueue_build()

	def _create_landing(self):
		# –°–æ–∑–¥–∞–Ω–∏–µ –≤ —Ñ–æ–Ω–µ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å, —á—Ç–æ–±—ã –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º
		self._start_build_task()

	def _enqueue_build(self):
		import threading
		cancel_event = threading.Event()
		params = {
			"save_path": self.path_edit.text(),
			"country": self.country,
			"theme": self.theme,
			"domain": self.domain,
			"city": self._pick_next_city(self.country),
			"custom_prompt": getattr(self, "_custom_prompt", None),
			"no_images": self.no_images_checkbox.isChecked(),
			"language": self._get_effective_language_code(self.country) if self.country else get_language_by_country(self.country),
			"id": self._job_seq,
			"auto_paste": bool(self.settings.get_auto_paste_prompt()),
			"cancel_event": cancel_event,
		}
		self._job_seq += 1
		self._build_queue.append(params)
		self._refresh_queue_ui()
		self._start_build_task()

		# –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏
		self._update_queue_label()

	def _pick_next_city(self, country: str) -> str:
		# –í—ã–±–∏—Ä–∞–µ–º –≥–æ—Ä–æ–¥, –∏–∑–±–µ–≥–∞—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥ –¥–ª—è –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã
		try:
			last = self._last_city_by_country.get(country, "")
			city = self.city_generator.get_random_city(country)
			# –µ—Å–ª–∏ —Å–æ–≤–ø–∞–ª ‚Äî –ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑ 1-2 –ø–æ–ø—ã—Ç–∫–∏
			for _ in range(2):
				if city != last and city:
					break
				city = self.city_generator.get_random_city(country)
			self._last_city_by_country[country] = city
			return city
		except Exception:
			return self.city or ""

	def _start_build_task(self):
		if self._active_builds >= self.max_parallel:
			return
		if not self._build_queue:
			return
		params = self._build_queue.pop(0)
		self._active_builds += 1
		self._active_jobs.append(params)
		self.status_label.setText("üöß –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")

		def task():
			try:
				cancel = params.get("cancel_event")
				zip_path = ensure_empty_zip_for_landing(params["save_path"], params["country"], params["theme"])
				if zip_path:
					print(f"ZIP —Å–æ–∑–¥–∞–Ω: {zip_path}")
				def progress_cb(text: str):
					QtCore.QMetaObject.invokeMethod(
						self.status_label, "setText", QtCore.Qt.QueuedConnection, QtCore.Q_ARG(str, text)
					)
				# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ API –∫–ª—é—á–∞
				# –í –≥—Ä–∏–¥-—Ä–µ–∂–∏–º–µ —Ç–æ–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –≥–∞–ª–æ—á–∫–∞ –Ω–µ —Å—Ç–æ–∏—Ç –∏ –∫–ª—é—á –∑–∞–¥–∞–Ω
				should_gen_images = (not params.get("no_images", False)) and bool(self.settings.get_ideogram_api_key())
				# –ò–º—è –ø–∞–ø–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∑–∞—Ä–∞–Ω–µ–µ –ø—Ä–∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å (folder_name),
				# –∑–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–π id –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
				base_folder = params.get("folder_name") or params["domain"]
				# –ò–Ω–¥–µ–∫—Å –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ (–ø—Ä–∏ –∫–æ–ª–ª–∏–∑–∏—è—Ö/–¥—É–±–ª–∏–∫–∞—Ç–∞—Ö)
				if params.get("needs_index"):
					project_folder = f"{base_folder}_{params['id']}"
				else:
					project_folder = base_folder
				project_path, media_path = self.cursor_manager.create_project_structure(
					project_folder, params["save_path"], params["theme"], progress_cb, generate_images=should_gen_images, cancel_check=(lambda: bool(cancel.is_set())) if cancel else None
				)
				if cancel and cancel.is_set():
					return
				# –í–∏–¥–∂–µ—Ç –ø—É—Ç–∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±—ã–ª —É–¥–∞–ª—ë–Ω; –±–æ–ª—å—à–µ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º
				language = params.get("language") or get_language_by_country(params["country"]) 
				prompt = params.get("custom_prompt") or create_landing_prompt(params["country"], params["city"], language, params["domain"], params["theme"])
				# –î–ª—è –≥—Ä–∏–¥-—Ä–µ–∂–∏–º–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—Å—Ç–∞–≤–ª—è–µ–º –∏ –Ω–µ –∫–æ–ø–∏—Ä—É–µ–º; –ø—Ä–∏–∑–Ω–∞–∫ origin == 'grid'
				origin = params.get("origin", "single")
				do_copy = origin != "grid"
				do_auto_paste = bool(params.get("auto_paste", False)) and origin != "grid"
				if do_copy:
					try:
						QtWidgets.QApplication.clipboard().setText(prompt)
					except Exception:
						pass
				success, message = self.cursor_manager.open_project_and_paste_prompt(
					project_path, prompt, None, auto_paste=do_auto_paste
				)
				QtCore.QMetaObject.invokeMethod(
					self, "_show_create_done", QtCore.Qt.QueuedConnection,
					QtCore.Q_ARG(str, f"–ü—Ä–æ–µ–∫—Ç: {project_path}\nMedia: {media_path}\n{message}"),
					QtCore.Q_ARG(str, prompt),
					QtCore.Q_ARG(str, params["domain"]),
					QtCore.Q_ARG(str, params["theme"]) 
				)
			except Exception as e:
				QtCore.QMetaObject.invokeMethod(
					self, "_show_create_error", QtCore.Qt.QueuedConnection, QtCore.Q_ARG(str, str(e))
				)
			finally:
				QtCore.QMetaObject.invokeMethod(self, "_on_build_finished", QtCore.Qt.QueuedConnection)

		worker = QtCore.QThread(self)
		worker.run = task  # type: ignore
		self._bg_threads.append(worker)
		worker.finished.connect(lambda: self._bg_threads.remove(worker) if worker in self._bg_threads else None)
		worker.start()

	@QtCore.Slot()
	def _on_build_finished(self):
		self._active_builds = max(0, self._active_builds - 1)
		if self._active_jobs:
			self._active_jobs.pop(0)
		self._refresh_queue_ui()
		self._update_queue_label()
		if self._build_queue:
			self._start_build_task()

	def _stop_all(self):
		try:
			# –°—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ –æ—Ç–º–µ–Ω—ã –≤—Å–µ–º —Ç–µ–∫—É—â–∏–º –∏ –æ–∂–∏–¥–∞—é—â–∏–º –∑–∞–¥–∞—á–∞–º
			for p in self._active_jobs + self._build_queue:
				ce = p.get("cancel_event")
				if ce:
					try:
						ce.set()
					except Exception:
						pass
			self.status_label.setText("‚èπÔ∏è –û—á–µ—Ä–µ–¥—å –ø–æ–º–µ—á–µ–Ω–∞ –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É")
		except Exception:
			pass

	def _refresh_queue_ui(self):
		items = []
		for p in self._active_jobs:
			items.append(f"‚ñ∂ {p['id']}: {p['domain']} [{p['theme']}] {'(–±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)' if p.get('no_images') else ''}")
		for p in self._build_queue:
			items.append(f"‚è≥ {p['id']}: {p['domain']} [{p['theme']}] {'(–±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)' if p.get('no_images') else ''}")
		self.queue_list.clear()
		self.queue_list.addItems(items)

	def _update_queue_label(self):
		try:
			q_total = len(self._active_jobs) + len(self._build_queue)
			self.queue_label.setText(f"–û—á–µ—Ä–µ–¥—å: {q_total}")
		except Exception:
			pass

	def _open_grid_dialog(self):
		try:
			dlg = QtWidgets.QDialog(self)
			dlg.setWindowTitle("–†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏ (5)")
			# –î–µ–ª–∞–µ–º –æ–∫–Ω–æ –Ω–µ–º–æ–¥–∞–ª—å–Ω—ã–º, —á—Ç–æ–±—ã –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å
			dlg.setWindowModality(QtCore.Qt.NonModal)
			dlg.setAttribute(QtCore.Qt.WA_DeleteOnClose, True)
			v = QtWidgets.QVBoxLayout(dlg)
			# –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã –≤ –¥–∏–∞–ª–æ–≥–µ
			country_row = QtWidgets.QHBoxLayout()
			label_country = QtWidgets.QLabel("–°—Ç—Ä–∞–Ω–∞:")
			label_country.setStyleSheet("color:#e2e8f0;font-weight:600;")
			country_row.addWidget(label_country)
			country_combo = QtWidgets.QComboBox()
			# –ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ —Å–≤–µ—Ä—Ö—É
			favs = self.settings.get_favorite_countries()
			all_countries = list(COUNTRIES_DATA.keys())
			favorites = [c for c in favs if c in all_countries]
			others = [c for c in sorted(all_countries) if c not in favs]
			country_combo.addItem("‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É ‚Äî")
			if favorites:
				country_combo.addItem("‚Äî –ò–∑–±—Ä–∞–Ω–Ω—ã–µ ‚Äî")
				for c in favorites:
					country_combo.addItem(f"‚òÖ {c}")
				country_combo.insertSeparator(country_combo.count())
			country_combo.addItem("‚Äî –í—Å–µ —Å—Ç—Ä–∞–Ω—ã ‚Äî")
			for c in others:
				country_combo.addItem(c)
			# –°—Ç–∏–ª–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–µ–Ω–∏—è
			country_combo.setStyleSheet("QComboBox{font-weight:600;} QAbstractItemView::item{padding:6px;} ")
			# –ù–µ –≤—ã–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ï—Å–ª–∏ —Ä–∞–Ω–µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–±–∏—Ä–∞–ª ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º
			if hasattr(self, "_grid_last_country") and self._grid_last_country:
				idx = country_combo.findText(self._grid_last_country)
				if idx >= 0:
					country_combo.setCurrentIndex(idx)
			country_row.addWidget(country_combo, 1)
			v.addLayout(country_row)
			# –î–≤–µ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏: —Ç–µ–º–∞—Ç–∏–∫–∏ –∏ –¥–æ–º–µ–Ω—ã
			inputs = QtWidgets.QHBoxLayout()
			left_box = QtWidgets.QGroupBox("–¢–µ–º–∞—Ç–∏–∫–∏ (–∫–∞–∂–¥–∞—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)")
			left_v = QtWidgets.QVBoxLayout(left_box)
			themes_text = QtWidgets.QPlainTextEdit()
			# –î–ª–∏–Ω–Ω—ã–µ —Ç–µ–º–∞—Ç–∏–∫–∏ –≤–∏–∑—É–∞–ª—å–Ω–æ –ø–µ—Ä–µ–Ω–æ—Å—è—Ç—Å—è, –Ω–æ –ª–æ–≥–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
			themes_text.setWordWrapMode(QtGui.QTextOption.WrapAtWordBoundaryOrAnywhere)
			themes_text.setPlaceholderText("–ê–≤—Ç–æ–º–æ–π–∫–∞\n–ü–æ–ª–∏—Ä–æ–≤–∫–∞ –∏ –¥–µ—Ç–µ–π–ª–∏–Ω–≥ –∞–≤—Ç–æ\n–ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å –∏ —Ä–µ–º–æ–Ω—Ç –º–∞—à–∏–Ω\n–®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂\n–ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞")
			left_v.addWidget(themes_text)
			right_box = QtWidgets.QGroupBox("–î–æ–º–µ–Ω—ã (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)")
			right_v = QtWidgets.QVBoxLayout(right_box)
			domains_text = QtWidgets.QPlainTextEdit()
			domains_text.setPlaceholderText("familykedx.org\nfrankjgoh.org\npuccinyomf.org\ncuekuth.org\nblockbzore.org")
			right_v.addWidget(domains_text)
			inputs.addWidget(left_box, 1)
			inputs.addWidget(right_box, 1)
			v.addLayout(inputs)
			# –ù–∏–∑: –æ–ø—Ü–∏–∏
			bottom = QtWidgets.QHBoxLayout()
			custom_lang_cb = QtWidgets.QCheckBox("–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —è–∑—ã–∫")
			custom_lang_cb.setChecked(self.custom_lang_cb.isChecked())
			lang_combo = QtWidgets.QComboBox()
			lang_combo.addItems(["en","ru","uk","be","kk","de","fr","it","es","pl","cs","tr","zh","ja","ko","hi","pt"])
			lang_combo.setCurrentText(self.custom_lang_combo.currentText())
			no_images_cb = QtWidgets.QCheckBox("–ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
			# –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Ä–µ–∂–∏–º–µ —Å–µ—Ç–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å API –∫–ª—é—á
			has_key = bool(self.settings.get_ideogram_api_key())
			no_images_cb.setChecked(not has_key)
			if not has_key:
				no_images_cb.setEnabled(False)
			bottom.addWidget(custom_lang_cb)
			bottom.addWidget(lang_combo)
			bottom.addStretch(1)
			bottom.addWidget(no_images_cb)
			v.addLayout(bottom)

			btns = QtWidgets.QHBoxLayout()
			start_btn = QtWidgets.QPushButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å")
			btns.addStretch(1)
			btns.addWidget(start_btn)
			v.addLayout(btns)

			def _start():
				country = country_combo.currentText().strip()
				if not country:
					QtWidgets.QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É")
					return
				# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω—É –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤ –¥–∏–∞–ª–æ–≥–∞
				self._grid_last_country = country
				outer_save_path = self.path_edit.text().strip()
				# –†–∞–∑–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–∫–∏
				themes = [s.strip() for s in themes_text.toPlainText().splitlines() if s.strip()]
				domains = [s.strip() for s in domains_text.toPlainText().splitlines() if s.strip()]
				# –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä—ã (—Ç–µ–º–∞, –¥–æ–º–µ–Ω)
				raw_pairs = []
				if len(themes) == 1 and len(domains) >= 1:
					for d in domains:
						raw_pairs.append((themes[0], d))
				elif len(domains) == 1 and len(themes) >= 1:
					for t in themes:
						raw_pairs.append((t, domains[0]))
				else:
					for t, d in zip(themes, domains):
						raw_pairs.append((t, d))
				if not raw_pairs:
					QtWidgets.QMessageBox.warning(self, "–†–µ–∂–∏–º —Å–µ—Ç–∫–∏", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫–∏ –∏ –¥–æ–º–µ–Ω—ã")
					return
				# –°–æ–∑–¥–∞—ë–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É –ø–∞—Ä—Ç–∏–∏, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –∫–æ—Ä–µ–Ω—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
				try:
					from datetime import datetime
					clean_country = country.replace('‚òÖ', '').strip()
					country_abbr = get_country_short_code(clean_country)
					unique_themes = list({t for t, _ in raw_pairs})
					folder_theme = unique_themes[0] if len(unique_themes) == 1 else "grid"
					parent_name = f"{sanitize_filename(country_abbr)}_{sanitize_filename(folder_theme)}_{datetime.now().strftime('%d.%m.%Y')}"
					batch_dir = Path(outer_save_path) / parent_name
					batch_dir.mkdir(parents=True, exist_ok=True)
					# –ü—É—Å—Ç–∞—è .zip —Å —Ç–µ–º –∂–µ –∏–º–µ–Ω–µ–º –≤–Ω—É—Ç—Ä–∏ –ø–∞—Ä—Ç–∏–∏ (—Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞, –±–µ–∑ –¥—É–±–ª–µ–π)
					try:
						import zipfile
						zip_path = batch_dir / f"{parent_name}.zip"
						if not zip_path.exists():
							with zipfile.ZipFile(zip_path, mode='w', compression=zipfile.ZIP_DEFLATED):
								pass
					except Exception:
						pass
				except Exception as _e:
					QtWidgets.QMessageBox.warning(self, "–†–µ–∂–∏–º —Å–µ—Ç–∫–∏", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–∞–ø–∫—É –ø–∞—Ä—Ç–∏–∏: {_e}")
					return
				# –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–æ–º–µ–Ω—ã –∏ —Å—á–∏—Ç–∞–µ–º –ø–æ–≤—Ç–æ—Ä—ã
				validated = []  # (theme, fixed_domain)
				domain_counts = {}
				for t, d in raw_pairs:
					ok, err, fixed = validate_domain(d)
					if not ok:
						self.status_label.setText(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ '{d}': {err}")
						continue
					validated.append((t, fixed))
					domain_counts[fixed] = domain_counts.get(fixed, 0) + 1
				if not validated:
					QtWidgets.QMessageBox.warning(self, "–†–µ–∂–∏–º —Å–µ—Ç–∫–∏", "–ü–æ—Å–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–æ–º–µ–Ω–æ–≤ –∑–∞–¥–∞—á –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å")
					return
				# –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á–∏: –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º–∞—Ç–∏–∫—É –∫ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ–º–µ–Ω –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è
				# –∏ –≤–∫–ª—é—á–∞–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–ª–ª–∏–∑–∏–∏ –∏–º—ë–Ω
				needs_index_global = any(cnt >= 2 for cnt in domain_counts.values())
				for theme, fixed_domain in validated:
					# –£–±–∏—Ä–∞–µ–º –∑–≤—ë–∑–¥–æ—á–∫—É –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã (–≤–∏–∑—É–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ)
					clean_country = country.replace('‚òÖ', '').strip()
					if domain_counts.get(fixed_domain, 0) >= 2:
						folder_name = f"{fixed_domain}_{sanitize_filename(theme)}"
						needs_index = True  # –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –Ω–∞ –æ–¥–Ω—É –±–∞–∑—É ‚Üí –≤–æ–∑–º–æ–∂–Ω—ã –∫–æ–ª–ª–∏–∑–∏–∏
					else:
						folder_name = fixed_domain
						needs_index = False  # —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–æ–º–µ–Ω ‚Üí –∏–Ω–¥–µ–∫—Å –Ω–µ –Ω—É–∂–µ–Ω
					params = {
						"save_path": str(batch_dir),
						"country": clean_country,
						"theme": theme,
						"domain": fixed_domain,
						"folder_name": folder_name,
						"city": self._pick_next_city(clean_country),
						"custom_prompt": getattr(self, "_custom_prompt", None),
						"no_images": bool(no_images_cb.isChecked()),
						"language": (lang_combo.currentText().strip() if custom_lang_cb.isChecked() else self._get_effective_language_code(clean_country)),
						"id": self._job_seq,
						"auto_paste": False,
						"origin": "grid",
						"needs_index": needs_index
					}
					self._job_seq += 1
					self._build_queue.append(params)
				self._refresh_queue_ui()
				self._start_build_task()
				self._update_queue_label()
				dlg.accept()

			start_btn.clicked.connect(_start)
			# –•—Ä–∞–Ω–∏–º —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –¥–∏–∞–ª–æ–≥ –Ω–µ –±—ã–ª —É–Ω–∏—á—Ç–æ–∂–µ–Ω —Å–±–æ—Ä—â–∏–∫–æ–º –º—É—Å–æ—Ä–∞
			self._grid_dialog = dlg
			dlg.show()
		except Exception as e:
			QtWidgets.QMessageBox.critical(self, "–†–µ–∂–∏–º —Å–µ—Ç–∫–∏", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ: {e}")

	def _on_custom_lang_toggle(self, checked: bool):
		try:
			self.custom_lang_combo.setEnabled(bool(checked))
			country = self.country_combo.currentText().strip()
			if country:
				self.status_label.setText(f"üåê –Ø–∑—ã–∫: {self._get_effective_language_display(country)}")
		except Exception:
			pass

	def _on_custom_lang_changed(self, text: str):
		try:
			country = self.country_combo.currentText().strip()
			if country:
				self.status_label.setText(f"üåê –Ø–∑—ã–∫: {self._get_effective_language_display(country)}")
		except Exception:
			pass

	def _get_effective_language_code(self, country: str) -> str:
		try:
			if hasattr(self, 'custom_lang_cb') and self.custom_lang_cb.isChecked():
				code = (self.custom_lang_combo.currentText() or 'en').strip()
				return code
			return get_language_by_country(country)
		except Exception:
			return get_language_by_country(country)

	def _get_effective_language_display(self, country: str) -> str:
		code = self._get_effective_language_code(country)
		name = self._language_code_to_display.get(code, code)
		return name if not (hasattr(self, 'custom_lang_cb') and self.custom_lang_cb.isChecked()) else f"{name} (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω)"

	@QtCore.Slot(str, str, str, str)
	def _show_create_done(self, message: str, prompt: str, domain: str, theme: str):
		QtWidgets.QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", message)
		# —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ ‚Äî –¥–ª—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–º–µ–Ω–∞/—Ç–µ–º—ã
		try:
			self.settings.add_theme_to_history(theme)
			self.settings.add_landing_to_history(domain, prompt)
		except Exception:
			pass
		self._load_initial_state()
		self.status_label.setText("‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

	@QtCore.Slot(str)
	def _show_create_error(self, message: str):
		QtWidgets.QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç: {message}")
		self.status_label.setText("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞")


def run_qt():
	app = QtWidgets.QApplication([])
	# Splash (–ª–∞—É–Ω—á–µ—Ä)
	pix = QtGui.QPixmap(480, 240)
	pix.fill(QtGui.QColor("#0b1220"))
	splash = QtWidgets.QSplashScreen(pix)
	splash.showMessage("–ó–∞–≥—Ä—É–∑–∫–∞ PromptHelper...", QtCore.Qt.AlignCenter | QtCore.Qt.AlignBottom, QtGui.QColor("#f8fafc"))
	splash.show()
	app.processEvents()

	w = QtMainWindow()

	def _finish():
		w.show()
		splash.finish(w)

	QtCore.QTimer.singleShot(700, _finish)
	app.exec()
