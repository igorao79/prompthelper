#!/usr/bin/env python3
"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ª–µ–Ω–¥–∏–Ω–≥–æ–≤ –¥–ª—è EXE
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import os
import sys
import threading
import webbrowser
import subprocess
from pathlib import Path

class MinimalLandingGenerator:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –õ–µ–Ω–¥–∏–Ω–≥–æ–≤ v2.0 - EXE")
        self.root.geometry("800x600")
        
        # –ë–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.project_folder = tk.StringVar()
        self.theme = tk.StringVar(value="–∫–∞—Ñ–µ")
        self.country = tk.StringVar(value="–†–æ—Å—Å–∏—è")
        
        self.create_interface()
        
    def create_interface(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(self.root, text="üöÄ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –õ–µ–Ω–¥–∏–Ω–≥–æ–≤ v2.0", 
                              font=("Arial", 16, "bold"))
        title_label.pack(pady=10)
        
        # –†–∞–º–∫–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        main_frame = ttk.Frame(self.root)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # –í—ã–±–æ—Ä –ø–∞–ø–∫–∏
        folder_frame = ttk.LabelFrame(main_frame, text="üìÅ –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞", padding=10)
        folder_frame.pack(fill=tk.X, pady=5)
        
        ttk.Entry(folder_frame, textvariable=self.project_folder, width=60).pack(side=tk.LEFT, padx=5)
        ttk.Button(folder_frame, text="–í—ã–±—Ä–∞—Ç—å", command=self.select_folder).pack(side=tk.RIGHT)
        
        # –¢–µ–º–∞—Ç–∏–∫–∞
        theme_frame = ttk.LabelFrame(main_frame, text="üéØ –¢–µ–º–∞—Ç–∏–∫–∞", padding=10)
        theme_frame.pack(fill=tk.X, pady=5)
        
        themes = ["–∫–∞—Ñ–µ", "—Ä–µ—Å—Ç–æ—Ä–∞–Ω", "–∞–≤—Ç–æ–º–æ–π–∫–∞", "–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∞—è", "—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è", 
                 "—Ñ–∏—Ç–Ω–µ—Å", "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ", "—Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã"]
        ttk.Combobox(theme_frame, textvariable=self.theme, values=themes, width=30).pack()
        
        # –°—Ç—Ä–∞–Ω–∞
        country_frame = ttk.LabelFrame(main_frame, text="üåç –°—Ç—Ä–∞–Ω–∞", padding=10)
        country_frame.pack(fill=tk.X, pady=5)
        
        countries = ["–†–æ—Å—Å–∏—è", "–£–∫—Ä–∞–∏–Ω–∞", "–ë–µ–ª–∞—Ä—É—Å—å", "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", "–°–®–ê", "–ì–µ—Ä–º–∞–Ω–∏—è"]
        ttk.Combobox(country_frame, textvariable=self.country, values=countries, width=30).pack()
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        buttons_frame = ttk.Frame(main_frame)
        buttons_frame.pack(fill=tk.X, pady=20)
        
        ttk.Button(buttons_frame, text="üé® –°–æ–∑–¥–∞—Ç—å –ª–µ–Ω–¥–∏–Ω–≥", 
                  command=self.create_landing, style="Accent.TButton").pack(side=tk.LEFT, padx=5)
        ttk.Button(buttons_frame, text="üñºÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", 
                  command=self.generate_images).pack(side=tk.LEFT, padx=5)
        ttk.Button(buttons_frame, text="üì± –û—Ç–∫—Ä—ã—Ç—å Cursor", 
                  command=self.open_cursor).pack(side=tk.LEFT, padx=5)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_text = tk.Text(main_frame, height=15, wrap=tk.WORD)
        self.status_text.pack(fill=tk.BOTH, expand=True, pady=10)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–æ–ª–ª–±–∞—Ä
        scrollbar = ttk.Scrollbar(self.status_text)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.status_text.config(yscrollcommand=scrollbar.set)
        scrollbar.config(command=self.status_text.yview)
        
        self.log("‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–≥—Ä—É–∂–µ–Ω!")
        self.log("üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –∏ –Ω–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É")
        
    def log(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥"""
        self.status_text.insert(tk.END, message + "\n")
        self.status_text.see(tk.END)
        self.root.update()
        
    def select_folder(self):
        """–í—ã–±–æ—Ä –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        folder = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞")
        if folder:
            self.project_folder.set(folder)
            self.log(f"üìÅ –í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞: {folder}")
            
    def create_landing(self):
        """–°–æ–∑–¥–∞–µ—Ç –ª–µ–Ω–¥–∏–Ω–≥"""
        if not self.project_folder.get():
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞!")
            return
            
        self.log("üé® –°–æ–∑–¥–∞–Ω–∏–µ –ª–µ–Ω–¥–∏–Ω–≥–∞...")
        self.log(f"üéØ –¢–µ–º–∞—Ç–∏–∫–∞: {self.theme.get()}")
        self.log(f"üåç –°—Ç—Ä–∞–Ω–∞: {self.country.get()}")
        
        # –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–µ–Ω–¥–∏–Ω–≥–∞
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º
        
        self.log("‚úÖ –õ–µ–Ω–¥–∏–Ω–≥ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    def generate_images(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not self.project_folder.get():
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞!")
            return
            
        self.log("üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º DiceBear –¥–ª—è —Ñ–∞–≤–∏–∫–æ–Ω–æ–∫
            import requests
            
            # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ DiceBear API
            url = f"https://api.dicebear.com/9.x/bottts/png?seed={self.theme.get()}&size=256"
            response = requests.get(url, timeout=10)
            
            if response.status_code == 200:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–≤–∏–∫–æ–Ω–∫—É
                favicon_path = Path(self.project_folder.get()) / "favicon.png"
                with open(favicon_path, 'wb') as f:
                    f.write(response.content)
                
                self.log(f"‚úÖ –§–∞–≤–∏–∫–æ–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {favicon_path}")
            else:
                self.log("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏")
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            
        self.log("üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    def open_cursor(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç Cursor AI"""
        self.log("üîç –ü–æ–∏—Å–∫ Cursor AI...")
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ Cursor
        cursor_paths = [
            "C:\\Users\\AppData\\Local\\Programs\\cursor\\Cursor.exe",
            "E:\\cursor\\Cursor.exe",
            "C:\\Program Files\\Cursor\\Cursor.exe"
        ]
        
        for path in cursor_paths:
            if os.path.exists(path):
                subprocess.Popen([path, self.project_folder.get()])
                self.log(f"‚úÖ Cursor –∑–∞–ø—É—â–µ–Ω: {path}")
                return
                
        self.log("‚ùå Cursor AI –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.root.mainloop()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    app = MinimalLandingGenerator()
    app.run()

if __name__ == "__main__":
    main()
