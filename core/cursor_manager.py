# -*- coding: utf-8 -*-

"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Cursor AI
–ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è (Windows/Linux/macOS)
"""

import os
import subprocess
import time
import platform
from pathlib import Path
import tkinter as tk
from tkinter import filedialog, messagebox

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å pyautogui
try:
    import pyautogui
    PYAUTOGUI_AVAILABLE = True
except ImportError:
    PYAUTOGUI_AVAILABLE = False
    print("‚ö†Ô∏è pyautogui –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∞–≤—Ç–æ–≤—Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞")

# –ò–º–ø–æ—Ä—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
try:
    from generators.image_generator import ImageGenerator
    IMAGE_GENERATION_AVAILABLE = True
except ImportError as e:
    IMAGE_GENERATION_AVAILABLE = False
    print(f"‚ö†Ô∏è –ú–æ–¥—É–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")


class CursorManager:
    """–ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Cursor AI"""
    
    def __init__(self):
        self.cursor_paths = [
            "cursor",
            "code"
        ]
        self.cached_cursor_path = None  # –ö—ç—à –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏
        self.os_type = platform.system().lower()
        
        print(f"üñ•Ô∏è –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –û–°: {self.os_type}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É—Ç–∏ –ø–æ–∏—Å–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°
        self.search_paths = self._get_platform_search_paths()

    def _get_platform_search_paths(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç–∏ –ø–æ–∏—Å–∫–∞ Cursor –¥–ª—è —Ç–µ–∫—É—â–µ–π –û–°"""
        if self.os_type == 'windows':
            return self._get_windows_search_paths()
        elif self.os_type == 'linux':
            return self._get_linux_search_paths()
        elif self.os_type == 'darwin':  # macOS
            return self._get_macos_search_paths()
        else:
            return []

    def _get_windows_search_paths(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç–∏ –ø–æ–∏—Å–∫–∞ –¥–ª—è Windows"""
        username = os.getenv('USERNAME', os.getenv('USER', ''))
        return [
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
            fr"C:\Users\{username}\AppData\Local\Programs\cursor\Cursor.exe",
            r"C:\Program Files\Cursor\Cursor.exe", 
            r"C:\Program Files (x86)\Cursor\Cursor.exe",
            
            # –í–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Å—Ç–∞ –≤ –º–µ–Ω—é –ü—É—Å–∫
            fr"C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Cursor.lnk",
            fr"C:\Users\{username}\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Cursor.lnk",
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Å—Ç–∞
            fr"C:\Users\{username}\AppData\Roaming\Cursor\Cursor.exe",
            fr"C:\Users\{username}\Desktop\Cursor.exe",
            fr"C:\Users\{username}\Desktop\Cursor.lnk",
            
            # –î—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Å—Ç–∞
            r"D:\Program Files\Cursor\Cursor.exe",
            r"D:\Cursor\Cursor.exe",
            fr"C:\Users\{username}\Downloads\Cursor.exe"
        ]

    def _get_linux_search_paths(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç–∏ –ø–æ–∏—Å–∫–∞ –¥–ª—è Linux"""
        username = os.getenv('USER', '')
        home = Path.home()
        
        return [
            # AppImage –≤ –¥–æ–º–∞—à–Ω–µ–π –ø–∞–ø–∫–µ
            str(home / "cursor.AppImage"),
            str(home / "Cursor.AppImage"),
            str(home / "Downloads/cursor.AppImage"),
            str(home / "Downloads/Cursor.AppImage"),
            str(home / "Applications/cursor.AppImage"),
            str(home / "Applications/Cursor.AppImage"),
            
            # Snap —É—Å—Ç–∞–Ω–æ–≤–∫–∞
            "/snap/cursor/current/cursor",
            f"/home/{username}/snap/cursor/current/cursor",
            
            # Flatpak —É—Å—Ç–∞–Ω–æ–≤–∫–∞
            "/var/lib/flatpak/app/com.cursor.Cursor/current/active/files/cursor",
            f"/home/{username}/.local/share/flatpak/app/com.cursor.Cursor/current/active/files/cursor",
            
            # –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ Linux –ø—É—Ç–∏
            "/usr/bin/cursor",
            "/usr/local/bin/cursor",
            "/opt/cursor/cursor",
            "/opt/Cursor/cursor",
            
            # –í –¥–æ–º–∞—à–Ω–µ–π –ø–∞–ø–∫–µ
            str(home / ".local/bin/cursor"),
            str(home / ".local/share/cursor/cursor"),
            str(home / "bin/cursor"),
            
            # Deb –ø–∞–∫–µ—Ç
            "/usr/share/cursor/cursor",
            
            # Tar.gz –∞—Ä—Ö–∏–≤
            str(home / "cursor/cursor"),
            str(home / "Cursor/cursor"),
        ]

    def _get_macos_search_paths(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç–∏ –ø–æ–∏—Å–∫–∞ –¥–ª—è macOS"""
        username = os.getenv('USER', '')
        home = Path.home()
        
        return [
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            "/Applications/Cursor.app/Contents/MacOS/Cursor",
            f"/Users/{username}/Applications/Cursor.app/Contents/MacOS/Cursor",
            
            # Homebrew
            "/usr/local/bin/cursor",
            "/opt/homebrew/bin/cursor",
            
            # –í –¥–æ–º–∞—à–Ω–µ–π –ø–∞–ø–∫–µ
            str(home / "Applications/Cursor.app/Contents/MacOS/Cursor"),
            str(home / "Downloads/Cursor.app/Contents/MacOS/Cursor"),
        ]

    @staticmethod
    def get_desktop_path():
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ä–∞–±–æ—á–µ–º—É —Å—Ç–æ–ª—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ"""
        system = platform.system().lower()
        home = Path.home()
        
        if system == 'windows':
            # –î–ª—è Windows
            desktop_paths = [
                home / "Desktop",
                home / "–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª",  # –†—É—Å—Å–∫–∞—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
            ]
        elif system == 'linux':
            # –î–ª—è Linux
            desktop_paths = [
                home / "Desktop",
                home / "–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª",  # –†—É—Å—Å–∫–∞—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
                home / "–†–∞–±–æ—á–∏–π_—Å—Ç–æ–ª",
                home / ".local/share/desktop",  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å
            ]
        elif system == 'darwin':  # macOS
            desktop_paths = [
                home / "Desktop",
            ]
        else:
            desktop_paths = [home / "Desktop"]
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—É—Ç—å
        for path in desktop_paths:
            if path.exists():
                return str(path)
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
        return str(home / "Desktop")

    @staticmethod
    def check_directory_exists(base_path, dir_name):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        
        Args:
            base_path (str): –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å
            dir_name (str): –ò–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            
        Returns:
            tuple: (exists, full_path) - —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å
        """
        full_path = Path(base_path) / dir_name
        return full_path.exists(), str(full_path)
    
    def find_cursor_in_directories(self):
        """
        –ì–ª—É–±–æ–∫–∏–π –ø–æ–∏—Å–∫ Cursor –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º (–∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π)
        
        Returns:
            str: –ü—É—Ç—å –∫ Cursor AI –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        search_dirs = self._get_search_directories()
        
        # –£–±–∏—Ä–∞–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
        search_dirs = [d for d in search_dirs if d and os.path.exists(d)]
        
        for search_dir in search_dirs:
            try:
                for root, dirs, files in os.walk(search_dir):
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É –ø–æ–∏—Å–∫–∞ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                    if root.count(os.sep) - search_dir.count(os.sep) > 3:
                        continue
                        
                    for file in files:
                        if self._is_cursor_file(file):
                            full_path = os.path.join(root, file)
                            if self._test_cursor_executable(full_path):
                                print(f"–ù–∞–π–¥–µ–Ω Cursor AI: {full_path}")
                                return full_path
            except (PermissionError, OSError):
                continue
        return None
    
    def _get_search_directories(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°"""
        if self.os_type == 'windows':
            username = os.getenv('USERNAME', os.getenv('USER', ''))
            return [
                r"C:\Program Files",
                r"C:\Program Files (x86)", 
                fr"C:\Users\{username}\AppData\Local\Programs",
                fr"C:\Users\{username}\AppData\Roaming",
                r"C:\ProgramData",
                r"D:\Program Files" if os.path.exists("D:") else None
            ]
        elif self.os_type == 'linux':
            home = Path.home()
            return [
                "/usr/bin",
                "/usr/local/bin", 
                "/opt",
                "/snap",
                "/var/lib/flatpak",
                str(home / ".local"),
                str(home / "Applications"),
                str(home / "Downloads"),
                str(home),
            ]
        elif self.os_type == 'darwin':  # macOS
            home = Path.home()
            return [
                "/Applications",
                "/usr/local/bin",
                "/opt/homebrew/bin",
                str(home / "Applications"),
                str(home / "Downloads"),
            ]
        else:
            return []
    
    def _is_cursor_file(self, filename):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ Cursor AI"""
        filename_lower = filename.lower()
        
        if self.os_type == 'windows':
            return filename_lower in ['cursor.exe', 'cursor']
        elif self.os_type == 'linux':
            return filename_lower in ['cursor', 'cursor.appimage'] or 'cursor' in filename_lower
        elif self.os_type == 'darwin':  # macOS
            return filename_lower in ['cursor'] or 'cursor' in filename_lower
        else:
            return 'cursor' in filename_lower
    
    def _test_cursor_executable(self, path):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Ä–∞–±–æ—á–∏–º Cursor
        
        Args:
            path (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            
        Returns:
            bool: True –µ—Å–ª–∏ —ç—Ç–æ —Ä–∞–±–æ—á–∏–π Cursor
        """
        try:
            if not os.path.exists(path):
                return False
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å --help
            result = subprocess.run([path, "--help"], 
                                  capture_output=True, timeout=3,
                                  encoding='utf-8', errors='ignore')
            return result.returncode in [0, 1]  # 0 –∏–ª–∏ 1 –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º
        except:
            return False
    
    def find_cursor_executable(self):
        """
        –ò—â–µ—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª Cursor AI - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
        
        Returns:
            str: –ü—É—Ç—å –∫ Cursor AI –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if self.cached_cursor_path and os.path.exists(self.cached_cursor_path):
            print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å: {self.cached_cursor_path}")
            return self.cached_cursor_path
        
        print("–ü–æ–∏—Å–∫ Cursor AI...")
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ PATH
        for cmd in self.cursor_paths:
            try:
                result = subprocess.run([cmd, "--version"], 
                                      capture_output=True, text=True, timeout=5,
                                      encoding='utf-8', errors='ignore')
                if result.returncode == 0:
                    print(f"–ù–∞–π–¥–µ–Ω Cursor –≤ PATH: {cmd}")
                    self.cached_cursor_path = cmd
                    return cmd
            except:
                continue
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—É—Ç–∏
        for path in self.search_paths:
            try:
                if path.endswith('.lnk'):
                    # –î–ª—è .lnk —Ñ–∞–π–ª–æ–≤ –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Ä–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å
                    if os.path.exists(path):
                        print(f"–ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ Cursor: {path}")
                        self.cached_cursor_path = path
                        return path
                elif os.path.exists(path) and self._test_cursor_executable(path):
                    print(f"–ù–∞–π–¥–µ–Ω Cursor: {path}")
                    self.cached_cursor_path = path
                    return path
            except:
                continue
        
        # 3. –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        if self.os_type == 'windows':
            print("–ü–æ–∏—Å–∫ –≤ —Ä–µ–µ—Å—Ç—Ä–µ Windows...")
            registry_result = self.find_cursor_in_registry()
            if registry_result:
                self.cached_cursor_path = registry_result
                return registry_result
        
        # 4. –ì–ª—É–±–æ–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ —Å–∏—Å—Ç–µ–º–µ
        print("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≥–ª—É–±–æ–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ —Å–∏—Å—Ç–µ–º–µ...")
        deep_search_result = self.find_cursor_in_directories()
        if deep_search_result:
            self.cached_cursor_path = deep_search_result
            return deep_search_result
        
        # 5. –ü–æ–∏—Å–∫ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        if self.os_type == 'windows':
            print("–ü–æ–∏—Å–∫ –≤ Start Menu...")
            start_menu_result = self.find_cursor_in_start_menu()
            if start_menu_result:
                self.cached_cursor_path = start_menu_result
                return start_menu_result
        elif self.os_type == 'linux':
            print("–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ which/whereis...")
            linux_result = self.find_cursor_linux_commands()
            if linux_result:
                self.cached_cursor_path = linux_result
                return linux_result
        
        print("Cursor AI –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        return self.ask_for_cursor_path()
    
    def find_cursor_in_registry(self):
        """
        –ü–æ–∏—Å–∫ Cursor –≤ —Ä–µ–µ—Å—Ç—Ä–µ Windows
        
        Returns:
            str: –ü—É—Ç—å –∫ Cursor AI –∏–ª–∏ None
        """
        try:
            import winreg
            
            # –ò—â–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö —Ä–µ–µ—Å—Ç—Ä–∞
            registry_paths = [
                (winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall"),
                (winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall"),
                (winreg.HKEY_CURRENT_USER, r"SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall")
            ]
            
            for hkey, path in registry_paths:
                try:
                    with winreg.OpenKey(hkey, path) as key:
                        i = 0
                        while True:
                            try:
                                subkey_name = winreg.EnumKey(key, i)
                                with winreg.OpenKey(key, subkey_name) as subkey:
                                    try:
                                        display_name = winreg.QueryValueEx(subkey, "DisplayName")[0]
                                        if "cursor" in display_name.lower():
                                            install_location = winreg.QueryValueEx(subkey, "InstallLocation")[0]
                                            cursor_path = os.path.join(install_location, "Cursor.exe")
                                            if os.path.exists(cursor_path):
                                                print(f"–ù–∞–π–¥–µ–Ω Cursor –≤ —Ä–µ–µ—Å—Ç—Ä–µ: {cursor_path}")
                                                return cursor_path
                                    except FileNotFoundError:
                                        pass
                                i += 1
                            except OSError:
                                break
                except FileNotFoundError:
                    continue
        except ImportError:
            pass
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ —Ä–µ–µ—Å—Ç—Ä–µ: {e}")
        return None
    
    def find_cursor_in_start_menu(self):
        """
        –ü–æ–∏—Å–∫ Cursor –≤ Start Menu
        
        Returns:
            str: –ü—É—Ç—å –∫ Cursor AI –∏–ª–∏ None
        """
        start_menu_paths = [
            r"C:\ProgramData\Microsoft\Windows\Start Menu\Programs",
            fr"C:\Users\{os.getenv('USERNAME')}\AppData\Roaming\Microsoft\Windows\Start Menu\Programs"
        ]
        
        for start_path in start_menu_paths:
            try:
                if os.path.exists(start_path):
                    for root, dirs, files in os.walk(start_path):
                        for file in files:
                            if "cursor" in file.lower() and file.endswith('.lnk'):
                                full_path = os.path.join(root, file)
                                print(f"–ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ Cursor –≤ Start Menu: {full_path}")
                                return full_path
            except (PermissionError, OSError):
                continue
        return None
    
    def find_cursor_linux_commands(self):
        """
        –ü–æ–∏—Å–∫ Cursor —á–µ—Ä–µ–∑ Linux –∫–æ–º–∞–Ω–¥—ã which/whereis
        
        Returns:
            str: –ü—É—Ç—å –∫ Cursor AI –∏–ª–∏ None
        """
        try:
            # –ü—Ä–æ–±—É–µ–º –∫–æ–º–∞–Ω–¥—É which
            result = subprocess.run(['which', 'cursor'], 
                                  capture_output=True, text=True, timeout=5,
                                  encoding='utf-8', errors='ignore')
            if result.returncode == 0 and result.stdout.strip():
                cursor_path = result.stdout.strip()
                print(f"–ù–∞–π–¥–µ–Ω Cursor —á–µ—Ä–µ–∑ which: {cursor_path}")
                return cursor_path
        except:
            pass
        
        try:
            # –ü—Ä–æ–±—É–µ–º –∫–æ–º–∞–Ω–¥—É whereis
            result = subprocess.run(['whereis', 'cursor'], 
                                  capture_output=True, text=True, timeout=5,
                                  encoding='utf-8', errors='ignore')
            if result.returncode == 0 and result.stdout.strip():
                # whereis –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—É—Ç–µ–π, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π
                paths = result.stdout.strip().split()[1:]  # –£–±–∏—Ä–∞–µ–º "cursor:"
                for path in paths:
                    if os.path.exists(path) and self._test_cursor_executable(path):
                        print(f"–ù–∞–π–¥–µ–Ω Cursor —á–µ—Ä–µ–∑ whereis: {path}")
                        return path
        except:
            pass
        
        return None
    
    def ask_for_cursor_path(self):
        """
        –ü—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∫–∞–∑–∞—Ç—å –ø—É—Ç—å –∫ Cursor AI –≤—Ä—É—á–Ω—É—é
        
        Returns:
            str: –ü—É—Ç—å –∫ Cursor AI –∏–ª–∏ None
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
            root = tk.Tk()
            root.withdraw()  # –°–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ
            
            result = messagebox.askyesno(
                "Cursor AI –Ω–µ –Ω–∞–π–¥–µ–Ω",
                "Cursor AI –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n"
                "–•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å –ø—É—Ç—å –∫ Cursor –≤—Ä—É—á–Ω—É—é?\n\n"
                "–ù–∞–∂–º–∏—Ç–µ '–î–∞' —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª Cursor.exe\n"
                "–ù–∞–∂–º–∏—Ç–µ '–ù–µ—Ç' —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ Cursor"
            )
            
            if result:
                # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–¥ –û–°
                if self.os_type == 'windows':
                    filetypes = [
                        ("Cursor executable", "Cursor.exe"),
                        ("Executable files", "*.exe"),
                        ("Link files", "*.lnk"),
                        ("All files", "*.*")
                    ]
                    initialdir = "C:\\Program Files"
                elif self.os_type == 'linux':
                    filetypes = [
                        ("Cursor AppImage", "*.AppImage"),
                        ("Cursor executable", "cursor"),
                        ("All files", "*")
                    ]
                    initialdir = str(Path.home())
                elif self.os_type == 'darwin':  # macOS
                    filetypes = [
                        ("Cursor app", "Cursor"),
                        ("Application", "*.app"),
                        ("All files", "*")
                    ]
                    initialdir = "/Applications"
                else:
                    filetypes = [("All files", "*")]
                    initialdir = str(Path.home())
                
                file_path = filedialog.askopenfilename(
                    title=f"–í—ã–±–µ—Ä–∏—Ç–µ Cursor ({self.os_type})",
                    filetypes=filetypes,
                    initialdir=initialdir
                )
                
                if file_path and os.path.exists(file_path):
                    if self._test_cursor_executable(file_path) or file_path.endswith('.lnk'):
                        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª Cursor: {file_path}")
                        self.cached_cursor_path = file_path
                        root.destroy()
                        return file_path
                    else:
                        messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ä–∞–±–æ—á–∏–º Cursor")
            
            root.destroy()
            return None
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞: {e}")
            return None
    
    def open_cursor_with_project(self, project_path):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç Cursor AI —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º
        
        Args:
            project_path (Path): –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        cursor_exe = self.find_cursor_executable()
        
        if not cursor_exe:
            return False
        
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π Cursor (–¥–ª—è –≤—Å–µ—Ö –û–°)
        if self._is_cursor_already_running_with_project(project_path):
            print(f"Cursor —É–∂–µ –∑–∞–ø—É—â–µ–Ω —Å –ø—Ä–æ–µ–∫—Ç–æ–º: {project_path}")
            return True
        
        try:
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—É—Å–∫–∞ –ø–æ–¥ –û–°
            if self.os_type == 'windows':
                return self._launch_cursor_windows(cursor_exe, project_path)
            elif self.os_type == 'linux':
                return self._launch_cursor_linux(cursor_exe, project_path)
            elif self.os_type == 'darwin':  # macOS
                return self._launch_cursor_macos(cursor_exe, project_path)
            else:
                # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
                return self._launch_cursor_generic(cursor_exe, project_path)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Cursor: {e}")
            return False
    
    def _launch_cursor_windows(self, cursor_exe, project_path):
        """–ó–∞–ø—É—Å–∫ Cursor –≤ Windows"""
        try:
            if cursor_exe in ["cursor", "code"]:
                # –ö–æ–º–∞–Ω–¥—ã –≤ PATH
                subprocess.Popen([cursor_exe, str(project_path)], shell=True,
                               stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            elif cursor_exe.endswith('.lnk'):
                # –î–ª—è .lnk —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º start
                subprocess.Popen(['start', cursor_exe, str(project_path)], shell=True,
                               stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            else:
                # –ü—Ä—è–º–æ–π –ø—É—Ç—å –∫ .exe
                subprocess.Popen([cursor_exe, str(project_path)],
                               stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            
            print(f"Cursor AI –∑–∞–ø—É—â–µ–Ω (Windows): {cursor_exe}")
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Cursor –≤ Windows: {e}")
            return False
    
    def _launch_cursor_linux(self, cursor_exe, project_path):
        """–ó–∞–ø—É—Å–∫ Cursor –≤ Linux"""
        try:
            if cursor_exe in ["cursor", "code"]:
                # –ö–æ–º–∞–Ω–¥—ã –≤ PATH
                subprocess.Popen([cursor_exe, str(project_path)],
                               stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            elif cursor_exe.endswith('.AppImage'):
                # AppImage —Ñ–∞–π–ª—ã
                # –î–µ–ª–∞–µ–º AppImage –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                os.chmod(cursor_exe, 0o755)
                subprocess.Popen([cursor_exe, str(project_path)],
                               stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            elif '/snap/' in cursor_exe:
                # Snap –ø–∞–∫–µ—Ç
                subprocess.Popen([cursor_exe, str(project_path)],
                               stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            elif '/flatpak/' in cursor_exe:
                # Flatpak
                subprocess.Popen(['flatpak', 'run', 'com.cursor.Cursor', str(project_path)],
                               stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            else:
                # –û–±—ã—á–Ω—ã–π –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª
                # –î–µ–ª–∞–µ–º —Ñ–∞–π–ª –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                try:
                    os.chmod(cursor_exe, 0o755)
                except:
                    pass
                subprocess.Popen([cursor_exe, str(project_path)],
                               stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            
            print(f"Cursor AI –∑–∞–ø—É—â–µ–Ω (Linux): {cursor_exe}")
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Cursor –≤ Linux: {e}")
            return False
    
    def _is_cursor_already_running_with_project(self, project_path):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ Cursor —Å –¥–∞–Ω–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º"""
        try:
            project_name = str(project_path).split('/')[-1] if '/' in str(project_path) else str(project_path).split('\\')[-1]
            project_full_path = str(project_path)
            
            if self.os_type == 'windows':
                # –î–ª—è Windows –∏—Å–ø–æ–ª—å–∑—É–µ–º tasklist
                try:
                    result = subprocess.run(['tasklist', '/FO', 'CSV'], 
                                          capture_output=True, text=True, timeout=5,
                                          encoding='utf-8', errors='ignore')
                    if result.returncode == 0:
                        lines = result.stdout.split('\n')
                        for line in lines:
                            if 'cursor' in line.lower() or 'Cursor' in line:
                                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ wmic –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
                                try:
                                    wmic_result = subprocess.run(['wmic', 'process', 'where', 
                                                                f'name="Cursor.exe"', 'get', 'CommandLine'], 
                                                               capture_output=True, text=True, timeout=3,
                                                               encoding='utf-8', errors='ignore')
                                    if project_name in wmic_result.stdout or project_full_path in wmic_result.stdout:
                                        print(f"–ù–∞–π–¥–µ–Ω –∑–∞–ø—É—â–µ–Ω–Ω—ã–π Cursor —Å –ø—Ä–æ–µ–∫—Ç–æ–º: {project_name}")
                                        return True
                                except:
                                    pass
                except:
                    pass
                    
            elif self.os_type == 'linux':
                # –î–ª—è Linux –∏—Å–ø–æ–ª—å–∑—É–µ–º ps
                result = subprocess.run(['ps', 'aux'], capture_output=True, text=True, timeout=5,
                                       encoding='utf-8', errors='ignore')
                if result.returncode == 0:
                    lines = result.stdout.split('\n')
                    
                    cursor_processes = []
                    for line in lines:
                        if 'cursor' in line.lower() or 'Cursor' in line:
                            cursor_processes.append(line)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ—Ü–µ—Å—Å Cursor
                    for process_line in cursor_processes:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏ –∏–ª–∏ –ø–æ–ª–Ω–æ–º—É –ø—É—Ç–∏
                        if project_name in process_line or project_full_path in process_line:
                            print(f"–ù–∞–π–¥–µ–Ω –∑–∞–ø—É—â–µ–Ω–Ω—ã–π Cursor —Å –ø—Ä–æ–µ–∫—Ç–æ–º: {project_name}")
                            return True
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ pgrep –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                    try:
                        pgrep_result = subprocess.run(['pgrep', '-f', f'cursor.*{project_name}'], 
                                                    capture_output=True, text=True, timeout=3,
                                                    encoding='utf-8', errors='ignore')
                        if pgrep_result.returncode == 0 and pgrep_result.stdout.strip():
                            print(f"pgrep –Ω–∞—à–µ–ª Cursor —Å –ø—Ä–æ–µ–∫—Ç–æ–º: {project_name}")
                            return True
                    except:
                        pass
                        
            elif self.os_type == 'darwin':  # macOS
                # –î–ª—è macOS –∏—Å–ø–æ–ª—å–∑—É–µ–º ps
                result = subprocess.run(['ps', 'aux'], capture_output=True, text=True, timeout=5,
                                       encoding='utf-8', errors='ignore')
                if result.returncode == 0:
                    lines = result.stdout.split('\n')
                    for line in lines:
                        if 'cursor' in line.lower() or 'Cursor' in line:
                            if project_name in line or project_full_path in line:
                                print(f"–ù–∞–π–¥–µ–Ω –∑–∞–ø—É—â–µ–Ω–Ω—ã–π Cursor —Å –ø—Ä–æ–µ–∫—Ç–æ–º: {project_name}")
                                return True
                    
            return False
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
            return False
    
    def _launch_cursor_macos(self, cursor_exe, project_path):
        """–ó–∞–ø—É—Å–∫ Cursor –≤ macOS"""
        try:
            if cursor_exe in ["cursor", "code"]:
                # –ö–æ–º–∞–Ω–¥—ã –≤ PATH
                subprocess.Popen([cursor_exe, str(project_path)],
                               stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            elif '.app' in cursor_exe:
                # macOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                subprocess.Popen(['open', '-a', cursor_exe, str(project_path)],
                               stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            else:
                # –û–±—ã—á–Ω—ã–π –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª
                subprocess.Popen([cursor_exe, str(project_path)],
                               stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            
            print(f"Cursor AI –∑–∞–ø—É—â–µ–Ω (macOS): {cursor_exe}")
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Cursor –≤ macOS: {e}")
            return False
    
    def _launch_cursor_generic(self, cursor_exe, project_path):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ Cursor"""
        try:
            subprocess.Popen([cursor_exe, str(project_path)],
                           stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            print(f"Cursor AI –∑–∞–ø—É—â–µ–Ω (generic): {cursor_exe}")
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ Cursor: {e}")
            return False
    
    def copy_to_clipboard(self, text, root_widget):
        """
        –ö–æ–ø–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        
        Args:
            text (str): –¢–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            root_widget: –ö–æ—Ä–Ω–µ–≤–æ–π –≤–∏–¥–∂–µ—Ç Tkinter
        """
        root_widget.clipboard_clear()
        root_widget.clipboard_append(text)
        root_widget.update()
    
    def auto_paste_prompt(self, delay_seconds=3):
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ–º–ø—Ç –≤ Cursor AI
        
        Args:
            delay_seconds (int): –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π
        """
        if PYAUTOGUI_AVAILABLE:
            try:
                time.sleep(delay_seconds)
                pyautogui.hotkey('ctrl', 'v')
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–≤—Å—Ç–∞–≤–∫–∏: {e}")
        else:
            print("–ê–≤—Ç–æ–≤—Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è pyautogui")
    
    def create_project_structure(self, domain, desktop_path=None, theme=None, progress_callback=None, generate_images=False):
        """
        –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Args:
            domain (str): –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–º–µ–Ω–∞
            desktop_path (Path): –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            theme (str): –¢–µ–º–∞—Ç–∏–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            progress_callback (callable): –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            generate_images (bool): –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False)
            
        Returns:
            tuple: (project_path, media_path)
        """
        if desktop_path is None:
            desktop_path = self.get_desktop_path()
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ - –æ–Ω–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ GUI
        project_path = Path(desktop_path) / domain
        media_path = project_path / "media"
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏
        if progress_callback:
            progress_callback("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞...")
        
        project_path.mkdir(exist_ok=True)
        media_path.mkdir(exist_ok=True)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if theme and IMAGE_GENERATION_AVAILABLE and generate_images:
            try:
                if progress_callback:
                    progress_callback("üé® –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
                
                # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤ —Ç–∏—Ö–æ–º —Ä–µ–∂–∏–º–µ 
                from generators.image_generator import ImageGenerator
                image_generator = ImageGenerator(silent_mode=True)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                results = image_generator.generate_thematic_set(
                    theme_input=theme,
                    media_dir=str(media_path),
                    method="1",  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Pollinations
                    progress_callback=progress_callback
                )
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                successful_count = results if isinstance(results, int) else 0
                
                if progress_callback:
                    progress_callback(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {successful_count}/8")
                
                print(f"üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {successful_count}/8 —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {str(e)}"
                print(f"‚ö†Ô∏è {error_msg}")
                if progress_callback:
                    progress_callback(f"‚ö†Ô∏è {error_msg}")
        
        elif theme and not IMAGE_GENERATION_AVAILABLE and generate_images:
            if progress_callback:
                progress_callback("‚ö†Ô∏è –ú–æ–¥—É–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        return project_path, media_path
    
    def open_project_and_paste_prompt(self, project_path, prompt, root_widget, 
                                    auto_paste=True, paste_delay=5):
        """
        –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –≤—Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞
        
        Args:
            project_path (Path): –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
            prompt (str): –ü—Ä–æ–º–ø—Ç –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            root_widget: –ö–æ—Ä–Ω–µ–≤–æ–π –≤–∏–¥–∂–µ—Ç Tkinter
            auto_paste (bool): –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—Å—Ç–∞–≤–ª—è—Ç—å –ø—Ä–æ–º–ø—Ç
            paste_delay (int): –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π
            
        Returns:
            tuple: (success, message)
        """
        # –í—Å–µ–≥–¥–∞ –∫–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        self.copy_to_clipboard(prompt, root_widget)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å Cursor
        if self.open_cursor_with_project(project_path):
            if auto_paste:
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—Å—Ç–∞–≤–∫–∞
                self.auto_paste_prompt(paste_delay)
            
            return True, "Cursor AI –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        else:
            return False, "Cursor AI –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–º–ø—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"