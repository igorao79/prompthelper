#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import random
from pathlib import Path
from PIL import Image
from io import BytesIO
import json
import time

class ModernImageAPI:
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π API –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π 2025 –≥–æ–¥–∞"""
    
    def __init__(self, silent_mode=False):
        self.silent_mode = silent_mode
        
        # API endpoints –∏ –∫–ª—é—á–∏ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã)
        self.apis = {
            'flux_pro': {
                'url': 'https://api.aimlapi.com/images/generations',
                'model': 'flux-pro/v1.1',
                'quality': 'highest',
                'speed': 'fast',
                'cost': 0.055  # $ –∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            },
            'flux_dev': {
                'url': 'https://api.aimlapi.com/images/generations', 
                'model': 'flux-dev/v1',
                'quality': 'high',
                'speed': 'medium',
                'cost': 0.025
            },
            'fal_flux': {
                'url': 'https://fal.run/fal-ai/flux-pro',
                'model': 'flux-pro',
                'quality': 'highest',
                'speed': 'fastest',
                'cost': 0.055
            },
            'pollinations': {
                'url': 'https://image.pollinations.ai/prompt/',
                'model': 'flux',
                'quality': 'good',
                'speed': 'fast',
                'cost': 0  # –±–µ—Å–ø–ª–∞—Ç–Ω–æ
            }
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.default_api = 'pollinations'  # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ flux_pro –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–ª—é—á–∞
        
    def generate_image(self, prompt, image_name='image', output_dir='.', size='1024x768', api_name=None):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º –ª—É—á—à–µ–≥–æ API
        
        Args:
            prompt (str): –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
            image_name (str): –ò–º—è —Ñ–∞–π–ª–∞
            output_dir (str): –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            size (str): –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            api_name (str): –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–±–æ—Ä API
            
        Returns:
            str: –ü—É—Ç—å –∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None
        """
        
        # –í—ã–±–∏—Ä–∞–µ–º API
        api_name = api_name or self.default_api
        
        if not self.silent_mode:
            print(f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {image_name} —á–µ—Ä–µ–∑ {api_name}...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        enhanced_prompt = self._enhance_prompt(prompt, image_name)
        
        # –ü—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π API
        result = None
        try:
            if api_name == 'flux_pro':
                result = self._generate_flux_pro(enhanced_prompt, size)
            elif api_name == 'flux_dev':
                result = self._generate_flux_dev(enhanced_prompt, size)
            elif api_name == 'fal_flux':
                result = self._generate_fal_flux(enhanced_prompt, size)
            else:  # pollinations fallback
                result = self._generate_pollinations(enhanced_prompt, size)
                
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ {api_name}: {e}")
            
            # Fallback –Ω–∞ Pollinations
            if api_name != 'pollinations':
                try:
                    result = self._generate_pollinations(enhanced_prompt, size)
                except Exception as e2:
                    if not self.silent_mode:
                        print(f"‚ùå Fallback —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e2}")
                    return None
        
        if result:
            return self._save_and_compress_image(result, image_name, output_dir)
        
        return None
    
    def _enhance_prompt(self, prompt, image_name):
        """–£–ª—É—á—à–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è"""
        
        # –ë–∞–∑–æ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
        quality_words = ["high quality", "professional", "detailed", "sharp", "clear"]
        
        # –†–∞–∑–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        style_variants = {
            'main': [
                "modern commercial building exterior",
                "contemporary business facade", 
                "professional office building",
                "sleek company headquarters"
            ],
            'about1': [
                "spacious interior workspace",
                "modern office environment",
                "professional consultation area",
                "comfortable business space"
            ],
            'about2': [
                "professional at work",
                "expert providing service",
                "skilled specialist working",
                "professional consultation"
            ],
            'about3': [
                "excellent results showcase",
                "quality work demonstration",
                "successful project outcome",
                "professional achievement"
            ],
            'favicon': [
                "simple business icon",
                "clean company logo",
                "minimalist symbol",
                "professional emblem"
            ]
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ
        if image_name in style_variants:
            style = random.choice(style_variants[image_name])
            enhanced = f"{prompt}, {style}, {random.choice(quality_words)}"
        else:
            enhanced = f"{prompt}, {random.choice(quality_words)}"
        
        return enhanced
    
    def _generate_flux_pro(self, prompt, size):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ FLUX 1.1 Pro API"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è FLUX Pro API –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–ª—é—á–∞
        raise Exception("FLUX Pro API key required")
    
    def _generate_flux_dev(self, prompt, size):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ FLUX Dev API"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è FLUX Dev API –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–ª—é—á–∞
        raise Exception("FLUX Dev API key required")
    
    def _generate_fal_flux(self, prompt, size):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ fal.ai FLUX API"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è fal.ai API –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–ª—é—á–∞
        raise Exception("fal.ai API key required")
    
    def _generate_pollinations(self, prompt, size):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Pollinations (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)"""
        try:
            api_url = "https://image.pollinations.ai/prompt/"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã
            if size == '512x512':
                params = "?width=512&height=512&model=flux"
            else:
                params = "?width=1024&height=768&model=flux"
            
            url = f"{api_url}{prompt}{params}"
            
            response = requests.get(url, timeout=30)
            if response.status_code == 200:
                return Image.open(BytesIO(response.content))
                
        except Exception as e:
            raise Exception(f"Pollinations error: {e}")
        
        return None
    
    def _save_and_compress_image(self, image, image_name, output_dir):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏ —Å–∂–∏–º–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        try:
            output_path = Path(output_dir)
            output_path.mkdir(exist_ok=True)
            
            # –û–±—Ä–µ–∑–∞–µ–º –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
            cropped_image = self._remove_watermark(image)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∏ —Ü–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä
            if image_name == 'favicon':
                file_path = output_path / f"{image_name}.png"
                target_size_kb = 50
                format_type = 'PNG'
            else:
                file_path = output_path / f"{image_name}.jpg"
                target_size_kb = 150
                format_type = 'JPEG'
            
            # –°–∂–∏–º–∞–µ–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            self._compress_and_save(cropped_image, str(file_path), target_size_kb, format_type)
            
            if not self.silent_mode:
                actual_size = file_path.stat().st_size / 1024
                print(f"‚úÖ {image_name}: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {actual_size:.1f}–∫–±")
            
            return str(file_path)
            
        except Exception as e:
            if not self.silent_mode:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {image_name}: {e}")
            return None
    
    def _remove_watermark(self, image):
        """–£–¥–∞–ª—è–µ—Ç –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ Pollinations"""
        try:
            width, height = image.size
            
            # –û–±—Ä–µ–∑–∞–µ–º –Ω–∏–∂–Ω–∏–µ 60 –ø–∏–∫—Å–µ–ª–µ–π –≥–¥–µ –æ–±—ã—á–Ω–æ –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫
            crop_height = max(1, height - 60)
            cropped = image.crop((0, 0, width, crop_height))
            
            if not self.silent_mode:
                print(f"‚úÇÔ∏è –û–±—Ä–µ–∑–∞–Ω–æ —Å {width}x{height} –¥–æ {width}x{crop_height}")
            
            return cropped
            
        except Exception:
            return image
    
    def _compress_and_save(self, image, file_path, target_size_kb, format_type):
        """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —Å–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        import io
        
        if format_type == 'PNG':
            # PNG —Å–∂–∞—Ç–∏–µ —Å –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏–µ–π
            if image.mode != 'RGBA':
                image = image.convert('RGBA')
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ —Å–∂–∞—Ç–∏—è
            for colors in [256, 128, 64]:
                buffer = io.BytesIO()
                try:
                    # –î–ª—è RGBA –∏—Å–ø–æ–ª—å–∑—É–µ–º FASTOCTREE –º–µ—Ç–æ–¥
                    quantized = image.quantize(colors=colors, method=Image.Quantize.FASTOCTREE)
                    quantized = quantized.convert('RGBA')
                except:
                    # Fallback - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –¥–ª—è –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏–∏
                    rgb_image = image.convert('RGB')
                    quantized = rgb_image.quantize(colors=colors, method=Image.Quantize.MEDIANCUT)
                    quantized = quantized.convert('RGBA')
                    
                quantized.save(buffer, format='PNG', optimize=True)
                
                size_kb = len(buffer.getvalue()) / 1024
                if size_kb <= target_size_kb:
                    with open(file_path, 'wb') as f:
                        f.write(buffer.getvalue())
                    
                    if not self.silent_mode:
                        print(f"üì¶ PNG —Å–∂–∞—Ç –¥–æ {size_kb:.1f}–∫–± ({colors} —Ü–≤–µ—Ç–æ–≤)")
                    return
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            image.save(file_path, format='PNG', optimize=True)
            
        else:
            # JPEG —Å–∂–∞—Ç–∏–µ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
            for quality in [95, 90, 85, 80, 75, 70]:
                buffer = io.BytesIO()
                image.save(buffer, format='JPEG', quality=quality, optimize=True)
                
                size_kb = len(buffer.getvalue()) / 1024
                if size_kb <= target_size_kb:
                    with open(file_path, 'wb') as f:
                        f.write(buffer.getvalue())
                    
                    if not self.silent_mode:
                        print(f"üì¶ JPEG —Å–∂–∞—Ç –¥–æ {size_kb:.1f}–∫–± (–∫–∞—á–µ—Å—Ç–≤–æ {quality}%)")
                    return
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
            image.save(file_path, format='JPEG', quality=70, optimize=True)

    def set_api_key(self, api_name, api_key):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç API –∫–ª—é—á –¥–ª—è –ø—Ä–µ–º–∏—É–º —Å–µ—Ä–≤–∏—Å–æ–≤"""
        if api_name in self.apis:
            self.apis[api_name]['api_key'] = api_key
            if not self.silent_mode:
                print(f"‚úÖ API –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è {api_name}")
    
    def get_api_info(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö API"""
        info = []
        for name, config in self.apis.items():
            info.append({
                'name': name,
                'quality': config['quality'],
                'speed': config['speed'],
                'cost': config['cost'],
                'available': 'api_key' in config or config['cost'] == 0
            })
        return info 