#!/usr/bin/env python3
"""
Windows Builder: —Å–∫–∞—á–∏–≤–∞–µ—Ç –≤–µ—Ç–∫—É linux –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è igorao79/prompthelper,
—Å–æ–±–∏—Ä–∞–µ—Ç onefile EXE —Å –ø–æ–º–æ—â—å—é PyInstaller –∏ —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ release/.

–ó–∞–ø—É—Å–∫ (–∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞):
  python tools/builder.py

–û–ø—Ü–∏–∏:
  --repo https://github.com/igorao79/prompthelper
  --branch linux

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π Python 3.10+, –¥–æ—Å—Ç—É–ø –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.
"""
import argparse
import io
import os
import shutil
import subprocess
import sys
import tempfile
import zipfile
from pathlib import Path

import requests


def run(cmd, cwd=None):
    print(f"$ {' '.join(cmd)}")
    subprocess.check_call(cmd, cwd=cwd)


def ensure_venv(venv_dir: Path):
    if not venv_dir.exists():
        run([sys.executable, "-m", "venv", str(venv_dir)])
    python = venv_dir / ("Scripts/python.exe" if os.name == "nt" else "bin/python")
    def pip_run(*args):
        run([str(python), "-m", "pip", *args])
    return python, pip_run


def download_branch_zip(repo: str, branch: str, dest_dir: Path) -> Path:
    zip_url = f"{repo}/archive/refs/heads/{branch}.zip"
    print(f"üì• –°–∫–∞—á–∏–≤–∞–µ–º {zip_url}")
    r = requests.get(zip_url, timeout=60)
    if r.status_code == 404:
        raise FileNotFoundError("zip not found")
    r.raise_for_status()
    zf = zipfile.ZipFile(io.BytesIO(r.content))
    zf.extractall(dest_dir)
    # –í–Ω—É—Ç—Ä–∏ –±—É–¥–µ—Ç –ø–∞–ø–∫–∞ –≤–∏–¥–∞ prompthelper-<branch>
    root_candidates = list(dest_dir.glob("*"))
    if not root_candidates:
        raise RuntimeError("–ê—Ä—Ö–∏–≤ –ø—É—Å—Ç–æ–π")
    return root_candidates[0]


def clone_branch_git(repo: str, branch: str, dest_dir: Path) -> Path:
    print("üì¶ Zip –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º git clone --depth 1 ...")
    repo_dir = dest_dir / "repo"
    run(["git", "clone", "--depth", "1", "--branch", branch, repo, str(repo_dir)])
    return repo_dir


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--repo", default="https://github.com/igorao79/prompthelper")
    parser.add_argument("--branch", default="linux")
    parser.add_argument("--mode", choices=["local", "remote"], default="remote", help="local: —Å–æ–±–∏—Ä–∞—Ç—å –∏–∑ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏; remote: —Å–∫–∞—á–∞—Ç—å –≤–µ—Ç–∫—É –∏ —Å–æ–±–∏—Ä–∞—Ç—å")
    args = parser.parse_args()

    # –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç —Ñ–∞–π–ª–∞ builder.py (../)
    project_root = Path(__file__).resolve().parent.parent
    build_root = project_root / "_build"
    release_root = project_root / "release"
    venv_dir = build_root / "venv"
    src_dir = build_root / "src"

    # –ß–∏—Å—Ç–∏–º –∏ –≥–æ—Ç–æ–≤–∏–º –ø–∞–ø–∫–∏
    if build_root.exists():
        shutil.rmtree(build_root, ignore_errors=True)
    build_root.mkdir(parents=True, exist_ok=True)
    src_dir.mkdir(parents=True, exist_ok=True)
    release_root.mkdir(parents=True, exist_ok=True)

    # –ò—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤
    if args.mode == "remote":
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–∏–∫–∏ –≤–µ—Ç–∫–∏
        try:
            branch_root = download_branch_zip(args.repo, args.branch, src_dir)
        except FileNotFoundError:
            branch_root = clone_branch_git(args.repo, args.branch, src_dir)
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç (–í–ê–® –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–¥)
        branch_root = project_root

    # –°–æ–∑–¥–∞–µ–º venv –∏ —Å—Ç–∞–≤–∏–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    python, pip_run = ensure_venv(venv_dir)
    # –û–±–Ω–æ–≤–ª—è–µ–º pip/setuptools/wheel –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —á–µ—Ä–µ–∑ -m pip
    pip_run("install", "--upgrade", "pip", "setuptools", "wheel")
    req = branch_root / "requirements.txt"
    if req.exists():
        pip_run("install", "-r", str(req))
    pip_run("install", "pyinstaller", "requests")  # –¥–ª—è —Å–±–æ—Ä–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π

    # –°–±–æ—Ä–∫–∞
    dist_dir = build_root / "dist"
    if dist_dir.exists():
        shutil.rmtree(dist_dir, ignore_errors=True)

    # PyInstaller
    pyinstaller_cmd = [
        str(python), "-m", "PyInstaller",
        "--noconfirm", "--clean", "--onefile", "--windowed", "--noconsole",
        "--name", "LandGen",
        "--hidden-import", "PySide6",
        "--hidden-import", "PIL",
        "--hidden-import", "requests",
        str(branch_root / "main.py"),
    ]
    run(pyinstaller_cmd, cwd=str(branch_root))

    built_exe = branch_root / "dist" / ("LandGen.exe" if os.name == "nt" else "LandGen")
    if not built_exe.exists():
        raise RuntimeError("–°–±–æ—Ä–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–ª–∞ EXE")

    target_exe = release_root / "LandGen.exe"
    shutil.copy2(built_exe, target_exe)
    print(f"‚úÖ –ì–æ—Ç–æ–≤–æ: {target_exe}")
    
    # –ü—ã—Ç–∞–µ–º—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∫–æ–Ω–∫—É –∏ –∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Inno Setup
    # –ö–æ–º–ø–∏–ª—è—Ü–∏—è Inno Setup (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    iscc = Path("C:/Program Files (x86)/Inno Setup 6/ISCC.exe")
    if not iscc.exists():
        iscc = Path("C:/Program Files/Inno Setup 6/ISCC.exe")
    if iscc.exists():
        print("‚öôÔ∏è –ö–æ–º–ø–∏–ª—è—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞ Inno Setup...")
        run([str(iscc), str(project_root / "tools" / "installer.iss")])
        print("‚úÖ –£—Å—Ç–∞–Ω–æ–≤—â–∏–∫ —Å–æ–±—Ä–∞–Ω (—Ñ–∞–π–ª *.exe —Ä—è–¥–æ–º —Å installer.iss –∏–ª–∏ –≤ Output)")


if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏: {e}")
        sys.exit(1)


