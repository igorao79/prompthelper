# -*- coding: utf-8 -*-

"""
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–æ–º–±–æ–±–æ–∫—Å–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω —Å –ø–æ–∏—Å–∫–æ–º –∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–º
"""

import tkinter as tk
from tkinter import ttk
from shared.data import COUNTRIES_DATA


class CountrySearchCombobox(ttk.Frame):
    """–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∫–æ–º–±–æ–±–æ–∫—Å —Å –ø–æ–∏—Å–∫–æ–º –¥–ª—è —Å—Ç—Ä–∞–Ω"""
    
    def __init__(self, parent, settings_manager, textvariable=None, on_select=None):
        super().__init__(parent)
        
        self.textvariable = textvariable or tk.StringVar()
        self.on_select = on_select
        self.settings_manager = settings_manager
        self.all_countries = list(COUNTRIES_DATA.keys())
        self.filtered_countries = self.all_countries.copy()
        self.favorites = self.settings_manager.get_favorite_countries()
        self.last_selected = self.settings_manager.get_last_selected_country()
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.search_var = tk.StringVar()
        self.search_var.trace('w', self.on_search_change)
        self.popup_window = None
        
        self.setup_ui()
    
    def setup_ui(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self)
        main_frame.pack(fill="x")
        
        # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
        self.entry = ttk.Entry(
            main_frame, 
            textvariable=self.search_var,
            font=("Arial", 11),
            width=40
        )
        self.entry.pack(side="left", fill="x", expand=True)
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞
        select_btn = ttk.Button(
            main_frame,
            text="‚ñº",
            width=3,
            command=self.show_dropdown
        )
        select_btn.pack(side="left", padx=(2, 0))
        
        # –ë–∏–Ω–¥—ã
        self.entry.bind('<Return>', lambda e: self.show_dropdown())
        self.entry.bind('<Down>', lambda e: self.show_dropdown())
        
    def show_dropdown(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫"""
        if self.popup_window and self.popup_window.winfo_exists():
            self.popup_window.destroy()
            return
            
        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ
        self.popup_window = tk.Toplevel(self)
        self.popup_window.overrideredirect(True)
        self.popup_window.transient()
        
        # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
        x = self.entry.winfo_rootx()
        y = self.entry.winfo_rooty() + self.entry.winfo_height()
        self.popup_window.geometry(f"{self.entry.winfo_width() + 30}x200+{x}+{y}")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º —Å–æ —Å–∫—Ä–æ–ª–ª–æ–º
        container = ttk.Frame(self.popup_window)
        container.pack(fill="both", expand=True)
        
        # –ö–∞–Ω–≤–∞—Å –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞
        canvas = tk.Canvas(container, height=200)
        scrollbar = ttk.Scrollbar(container, orient="vertical", command=canvas.yview)
        
        # –§—Ä–µ–π–º –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.items_frame = ttk.Frame(canvas)
        self.items_frame.bind("<Configure>", 
            lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–Ω–≤–∞—Å
        canvas.create_window((0, 0), window=self.items_frame, anchor="nw", width=self.entry.winfo_width() + 13)
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # –†–∞–∑–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –∫–æ–ª–µ—Å–∏–∫–æ–º –º—ã—à–∏
        def _on_mousewheel(event):
            if canvas.winfo_exists():
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–æ–ª–ª–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –û–°
                if event.delta:
                    # Windows –∏ macOS
                    canvas.yview_scroll(int(-1*(event.delta/120)), "units")
                else:
                    # Linux - –∏—Å–ø–æ–ª—å–∑—É–µ–º event.num
                    if event.num == 4:
                        canvas.yview_scroll(-1, "units")
                    elif event.num == 5:
                        canvas.yview_scroll(1, "units")
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º –¥–ª—è –ª—É—á—à–µ–π —Ä–∞–±–æ—Ç—ã
        # Windows –∏ macOS
        canvas.bind("<MouseWheel>", _on_mousewheel)
        self.items_frame.bind("<MouseWheel>", _on_mousewheel)
        self.popup_window.bind("<MouseWheel>", _on_mousewheel)
        # Linux
        canvas.bind("<Button-4>", _on_mousewheel)
        canvas.bind("<Button-5>", _on_mousewheel)
        self.items_frame.bind("<Button-4>", _on_mousewheel)
        self.items_frame.bind("<Button-5>", _on_mousewheel)
        self.popup_window.bind("<Button-4>", _on_mousewheel)
        self.popup_window.bind("<Button-5>", _on_mousewheel)
        
        # –¢–∞–∫–∂–µ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –≤–Ω—É—Ç—Ä–∏ popup
        def _bind_mousewheel_to_children(widget):
            widget.bind("<MouseWheel>", _on_mousewheel)
            for child in widget.winfo_children():
                _bind_mousewheel_to_children(child)
        
        # –û—Ç–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞
        def _on_popup_destroy(event):
            try:
                if canvas.winfo_exists():
                    canvas.unbind("<MouseWheel>")
                    canvas.unbind("<Button-4>")
                    canvas.unbind("<Button-5>")
                if self.items_frame.winfo_exists():
                    self.items_frame.unbind("<MouseWheel>")
                    self.items_frame.unbind("<Button-4>")
                    self.items_frame.unbind("<Button-5>")
                if self.popup_window.winfo_exists():
                    self.popup_window.unbind("<MouseWheel>")
                    self.popup_window.unbind("<Button-4>")
                    self.popup_window.unbind("<Button-5>")
            except:
                pass
        self.popup_window.bind("<Destroy>", _on_popup_destroy)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω—ã
        self.update_dropdown_items()
        
        # –ë–∏–Ω–¥—ã –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        self.popup_window.bind('<Escape>', lambda e: self.popup_window.destroy())
        self.popup_window.bind('<FocusOut>', self._on_focus_out)
        
        # –°—Ç–∏–ª–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞
        style = ttk.Style()
        style.configure("Country.TLabel", padding=4, font=("Arial", 9))
        style.configure("Favorite.TLabel", padding=4, font=("Arial", 9, "bold"))
        
    def update_dropdown_items(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π"""
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        for widget in self.items_frame.winfo_children():
            widget.destroy()
        
        items_added = []
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ü–æ—Å–ª–µ–¥–Ω—è—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞ (–ñ–ï–õ–¢–û–ï –≤—ã–¥–µ–ª–µ–Ω–∏–µ)
        if (self.last_selected and 
            self._matches_search(self.last_selected) and 
            self.last_selected in self.all_countries):
            self.create_country_item(self.last_selected, False, is_last_selected=True)
            items_added.append(self.last_selected)
            
            # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π
            if (self.favorites or 
                any(self._matches_search(c) for c in self.filtered_countries if c != self.last_selected)):
                separator = ttk.Separator(self.items_frame)
                separator.pack(fill="x", pady=3)
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
        if self.favorites:
            for country in self.favorites:
                if self._matches_search(country) and country not in items_added:
                    self.create_country_item(country, True)
                    items_added.append(country)
            
            # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–æ—Å–ª–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
            if any(self._matches_search(c) for c in self.filtered_countries if c not in items_added):
                separator = ttk.Separator(self.items_frame)
                separator.pack(fill="x", pady=2)
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 3: –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
        for country in self.filtered_countries:
            if country not in items_added and self._matches_search(country):
                self.create_country_item(country, False)
    
    def create_country_item(self, country, is_favorite, is_last_selected=False):
        """–°–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Å—Ç—Ä–∞–Ω—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π"""
        frame = ttk.Frame(self.items_frame)
        frame.pack(fill="x")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –∏ —Ü–≤–µ—Ç–∞
        if is_last_selected:
            # –ñ–ï–õ–¢–û–ï –≤—ã–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã
            style = "LastSelected.TLabel"
            bg_color = "#FFE135"  # –Ø—Ä–∫–æ-–∂–µ–ª—Ç—ã–π
            fg_color = "#000000"  # –ß–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
            prefix = "üïí "  # –ò–∫–æ–Ω–∫–∞ —á–∞—Å–æ–≤ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π
        elif is_favorite:
            style = "Favorite.TLabel"
            bg_color = None
            fg_color = None
            prefix = ""
        else:
            style = "Country.TLabel"
            bg_color = None
            fg_color = None
            prefix = ""
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π
        if is_last_selected:
            ttk.Style().configure("LastSelected.TLabel", 
                                background=bg_color, 
                                foreground=fg_color,
                                padding=6,
                                font=("Arial", 9, "bold"))
        
        # –ú–µ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω—ã
        label = ttk.Label(
            frame, 
            text=f"{prefix}{country}",
            style=style
        )
        label.pack(side="left", fill="x", expand=True)
        
        # –ó–≤–µ–∑–¥–æ—á–∫–∞ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∫–æ–Ω–∫–∏
        icon_text = ""
        if is_last_selected:
            icon_text = "üïí"  # –ß–∞—Å—ã –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π
        elif is_favorite:
            icon_text = "‚òÖ"  # –ó–≤–µ–∑–¥–∞ –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
        else:
            icon_text = "‚òÜ"  # –ü—É—Å—Ç–∞—è –∑–≤–µ–∑–¥–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö
        
        star = ttk.Label(
            frame,
            text=icon_text,
            style=style,
            cursor="hand2"
        )
        star.pack(side="right", padx=5)
        
        # –ë–∏–Ω–¥—ã
        label.bind('<Button-1>', lambda e, c=country: self._select_country(c))
        star.bind('<Button-1>', lambda e, c=country: self._toggle_favorite(c))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –∫–æ–ª–µ—Å–∏–∫–æ–º –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º —Å—Ç—Ä–∞–Ω
        if hasattr(self, 'popup_window') and self.popup_window:
            def _item_mousewheel(event):
                if self.popup_window and self.popup_window.winfo_exists():
                    # –ù–∞—Ö–æ–¥–∏–º canvas —á–µ—Ä–µ–∑ –∏–µ—Ä–∞—Ä—Ö–∏—é –≤–∏–¥–∂–µ—Ç–æ–≤
                    canvas = None
                    parent = event.widget
                    while parent and not isinstance(parent, tk.Canvas):
                        parent = parent.master
                        if hasattr(parent, 'winfo_class') and parent.winfo_class() == 'Canvas':
                            canvas = parent
                            break
                    if canvas:
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–æ–ª–ª–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –û–°
                        if event.delta:
                            # Windows –∏ macOS
                            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
                        else:
                            # Linux - –∏—Å–ø–æ–ª—å–∑—É–µ–º event.num
                            if event.num == 4:
                                canvas.yview_scroll(-1, "units")
                            elif event.num == 5:
                                canvas.yview_scroll(1, "units")
            
            # Windows –∏ macOS
            frame.bind("<MouseWheel>", _item_mousewheel)
            label.bind("<MouseWheel>", _item_mousewheel)
            star.bind("<MouseWheel>", _item_mousewheel)
            # Linux
            frame.bind("<Button-4>", _item_mousewheel)
            frame.bind("<Button-5>", _item_mousewheel)
            label.bind("<Button-4>", _item_mousewheel)
            label.bind("<Button-5>", _item_mousewheel)
            star.bind("<Button-4>", _item_mousewheel)
            star.bind("<Button-5>", _item_mousewheel)
        
        # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        for widget in (label, star):
            widget.bind('<Enter>', lambda e, w=widget: w.configure(foreground="#2980b9"))
            widget.bind('<Leave>', lambda e, w=widget: w.configure(foreground="black"))
    
    def _matches_search(self, country):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É"""
        search = self.search_var.get().lower()
        return not search or search in country.lower()
    
    def _select_country(self, country):
        """–í—ã–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–∞–Ω—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ—ë –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω—é—é –≤—ã–±—Ä–∞–Ω–Ω—É—é"""
        self.textvariable.set(country)
        self.entry.delete(0, tk.END)
        self.entry.insert(0, country)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω—é—é –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω—É
        self.settings_manager.set_last_selected_country(country)
        self.last_selected = country
        
        if self.popup_window:
            self.popup_window.destroy()
        if self.on_select:
            self.on_select()
    
    def _toggle_favorite(self, country):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
        current_favorites = self.settings_manager.get_favorite_countries()
        
        if country in current_favorites:
            self.settings_manager.remove_favorite_country(country)
            self.favorites = self.settings_manager.get_favorite_countries()
        else:
            self.settings_manager.add_favorite_country(country)
            self.favorites = self.settings_manager.get_favorite_countries()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω—É
        self.last_selected = self.settings_manager.get_last_selected_country()
        
        self.update_dropdown_items()
    
    def _on_focus_out(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞"""
        if self.popup_window:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞ –Ω–∞—à–∏—Ö –ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞—Ö —Ñ–æ–∫—É—Å
            focused = self.popup_window.focus_get()
            if not focused or not (focused.winfo_toplevel() == self.popup_window):
                self.popup_window.destroy()
    
    def on_search_change(self, *args):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞"""
        if self.popup_window and self.popup_window.winfo_exists():
            self.update_dropdown_items()
            
    def set_value(self, value):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ"""
        self.entry.delete(0, tk.END)
        self.entry.insert(0, value)
        self.textvariable.set(value) 